"0","from exps import *"
"0","import copy"
"0",""
"0","n_reps = 100 # set this to 10000 when generating final results!"
"0",""
"0","def run_experiment_batch(conf):"
"0","    result = {}"
"0","    for (k, params) in conf.items():"
"0","        params = copy.copy(params)"
"0","        params[""ic_result""] = run_experiment(params)"
"0","        result[k] = params"
"0","    return result"
"0","    "
"0","def run_thresh_experiment_batch(conf):"
"0","    result = {}"
"0","    for (k, params) in conf.items():"
"0","        params = copy.copy(params)"
"0","        degrees = numpy.array(list(len(n) for n in read_graph(params[""graph""])))"
"0","        params[""thresholds""] = numpy.random.random(len(degrees)) * degrees"
"0","        params[""ic_result""] = run_thresh_experiment(params)"
"0","        result[k] = params"
"0","    return result"
"0","    "
"0","def figure_1(params, xlabel):"
"0","    c1, c2 = split_result_by_communities(params[""ic_result""], params)"
"0","    hist(c1)"
"0","    hist(c2)"
"0","    plt.xlabel(xlabel)"
"0","    plt.ylabel(""Frequency"")"
"0","    "
"0","def figure_2(conf, ylabel):"
"0","    x_values_1 = []"
"0","    x_values_2 = []"
"0","    y_values_1 = []"
"0","    y_values_2 = []"
"0","    for (k, v) in conf.items():"
"0","        c1, c2 = split_result_by_communities(v[""ic_result""], v)"
"0","        c1 = numpy.mean(c1)"
"0","        c2 = numpy.mean(c2)"
"0","        x_values_1.append(v[""factor""])"
"0","        x_values_2.append(v[""factor""])"
"0","        y_values_1.append(c1)"
"0","        y_values_2.append(c2)"
"0","    sns.lineplot(x = x_values_1, y = y_values_1, estimator = numpy.mean, ci = 95)"
"0","    sns.lineplot(x = x_values_2, y = y_values_2, estimator = numpy.mean, ci = 95)"
"0","    sns.scatterplot(x = x_values_1, y = y_values_1)"
"0","    sns.scatterplot(x = x_values_2, y = y_values_2)"
"0","    plt.xlabel(""Factor"")"
"0","    plt.ylabel(ylabel)"
"0","    "
"0","def figure_3(conf):"
"0","    x_values = []"
"0","    y_values = []"
"0","    for (k, v) in conf.items():"
"0","        c1, c2 = split_result_by_communities(v[""ic_result""], v)"
"0","        c1 = numpy.mean(c1)"
"0","        c2 = numpy.mean(c2)"
"0","        f = min(c1, c2) / max(c1, c2)"
"0","        x_values.append(v[""factor""])"
"0","        y_values.append(f)"
"0","    sns.lineplot(x = x_values, y = y_values, estimator = numpy.mean, ci = 95)"
"0","    sns.scatterplot(x = x_values, y = y_values)"
"0","    plt.ylim(0,1)"
"0","    plt.xlabel(""Factor"")"
"0","    plt.ylabel(""Fairness"")"
"0","    "
"0","def run_and_plot(conf, k, prefix):"
"0","    r = run_experiment_batch(conf)"
"0","    plt.figure()"
"0","    figure_1(r[k], ""Access probability"")"
"0","    plt.savefig(prefix + ""-fig-1.png"")"
"0","    plt.show()"
"0","    "
"0","    plt.figure()"
"0","    figure_2(r, ""Access"")"
"0","    plt.savefig(prefix + ""-fig-2.png"")"
"0","    plt.show()"
"0","    "
"0","    plt.figure()"
"0","    figure_3(r)"
"0","    plt.savefig(prefix + ""-fig-3.png"")"
"0","    plt.show()"
"0",""
