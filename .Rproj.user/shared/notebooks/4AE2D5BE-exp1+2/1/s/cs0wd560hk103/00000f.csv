"0","from exps import *"
"0","import numpy"
"0","import matplotlib.pyplot as plt"
"0","import networkx as nx"
"0","import random"
"0","   "
"0","def delete_nodes_from_network(network):"
"0","    network = read_graph(network)"
"0","    edge_list = graph_to_edge_list(network)"
"0","    nodes_to_delete = set() # solve_this_later()"
"0","    # NB we're deleting all edges instead of the nodes so that"
"0","    # the communities stay the same"
"0","    #for i in range(1000):"
"0","    #    r = random.random()"
"0","    #    if r < 0.1:"
"0","    #        nodes_to_delete.add(i)"
"0","    #for i in range(1000, 2000):"
"0","    #    r = random.random()"
"0","    #    if r < 0.3:"
"0","    #        nodes_to_delete.add(i)"
"0","    edge_list = list("
"0","        edge for edge in edge_list"
"0","        if (edge[0] not in nodes_to_delete and"
"0","            edge[1] not in nodes_to_delete))"
"0","    g = nx.Graph(edge_list)"
"0","    write_output(g, ""output.txt"")"
"0","    return ""output.txt"""
"0","    "
"0","def make_params(shrink_factor):"
"0","    return dict("
"0","        # seeding params"
"0","        seed1 = 0.3,"
"0","        seed2 = 0.3,"
"0","        # IC params"
"0","        alpha = 0.1,"
"0","        reprs = 100)"
"0","    "
"0","def run_experiment_range(network, communities, factors, f):"
"0","    c1s = []"
"0","    c2s = []"
"0","    for factor in factors:"
"0","        params = make_params(factor)"
"0","        params[""n""] = 1000"
"0","        params[""n1""] = 1000"
"0","        params[""n2""] = 1000"
"0","        params[""graph""] = delete_nodes_from_network(network)"
"0","        params[""communities""] = communities"
"0","        params[""seeds""] = set_seeds(params)"
"0","        ic_result = run_experiment(params)"
"0","        ic_result = f(ic_result, params)"
"0","        c1, c2 = split_result_by_communities(ic_result, params)"
"0","        c1s.append(numpy.mean(c1))"
"0","        c2s.append(numpy.mean(c2))"
"0","    return c1s, c2s"
"0","    "
"0","factors = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]"
"0","def plot_curve(network, community, f, label):"
"0","    c1s, c2s = run_experiment_range(network, community, factors, f)"
"0","    plt.figure()"
"0","    plt.plot(factors, c1s)"
"0","    plt.plot(factors, c2s)"
"0","    plt.xlabel(""Shrinkage factor"")"
"0","    plt.ylabel(label)"
"0","    plt.show()"
"0","    "
"0",""
