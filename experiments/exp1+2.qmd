---
Title: "Experiment 1+2"
format:
  html:
    code-tools: true
    code-fold: true
---

#

```{python}
from exps import *
import numpy
import matplotlib.pyplot as plt

def make_params(shrink_factor):
    return dict(
        ##
        network = "../data/reference_communities/Isolated_communities/SBM/Run_1",
        ##
        # graph params
        n = 1000,
        p1 = 0.01 / 2,
        p2 = 0.01 / 2,
        p_inter = 0.0001 / 2,
        # seeding params
        seed1 = 0.3,
        seed2 = 0.3,
        # IC params
        alpha = 0.1,
        reprs = 100)

def run_experiment_range(factors, f):
    c1s = []
    c2s = []
    for factor in factors:
        params = make_params(factor)
        n1 = int(params["n"] * (1 - factor))
        n2 = int(params["n"] * (1 - 0.1))
        params["n1"] = n1
        params["n2"] = n2
        graph = two_communities(params)
        seeds = set_seeds(params)
        params["graph"] = graph
        params["seeds"] = seeds
        ic_result = run_experiment(params)
        ic_result = f(ic_result, params)
        c1, c2 = split_result_by_communities(ic_result, params)
        c1s.append(numpy.mean(c1))
        c2s.append(numpy.mean(c2))
    return c1s, c2s

def id(r, params):
    return r
def square(r, params):
    return numpy.array(r) ** 2
def mean(r, params):
    r = collect_neighbor_data(r, params)
    return list(numpy.mean(v) for v in r if len(v))
def min(r, params):
    r = collect_neighbor_data(r, params)
    return list(numpy.min(v) for v in r if len(v))
factors = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]
def plot_curve(f, label):
    c1s, c2s = run_experiment_range(factors, f)
    plt.figure()
    plt.plot(factors, c1s)
    plt.plot(factors, c2s)
    plt.xlabel("Shrinkage factor")
    plt.ylabel(label)
    plt.show()

```

No transformation:

```{python}
plot_curve(id, "prob")
```

Square:

```{python}
plot_curve(square, "squared prob")
```

Mean of neighbors:

```{python}
plot_curve(mean, "mean of neighbors' prob")
```

Min of neighbors:

```{python}
plot_curve(min, "min of neighbors' prob")
```
