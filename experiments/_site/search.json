[
  {
    "objectID": "collateral.html",
    "href": "collateral.html",
    "title": "Collateral Consequences",
    "section": "",
    "text": "Jensen’s inequality stuff\nHere we aggregate last\n\nCode\nfrom exps import *\n\noverseeding_factor = 4\n\nparams = dict(\n    # graph params\n    n = 1000,\n    p1 = 0.01 / 2,\n    p2 = 0.01 / 2,\n    p_inter = 0.0001 / 2,\n    # seeding params\n    seed1 = overseeding_factor * 0.1,\n    seed2 = 0.1,\n    # IC params\n    alpha = 0.1,\n    reprs = 10000,\n    communities = [list(range(0, 1000)), list(range(1000, 2000))]\n    )\nparams[\"graph\"] = two_communities(params)\nparams[\"seeds\"] = set_seeds(params)\n\nic_neighbor_result_mean = read_array(ic_fun(\n    params[\"graph\"],\n    array_into_file(params[\"seeds\"]),\n    str(params[\"alpha\"]),\n    str(params[\"reprs\"]),\n    \"mean\"\n    ))\n\nic_neighbor_result_min = read_array(ic_fun(\n    params[\"graph\"],\n    array_into_file(params[\"seeds\"]),\n    str(params[\"alpha\"]),\n    str(params[\"reprs\"]),\n    \"min\"\n    ))\n\nMean shouldn’t change:\n\n\nCode\nplot_community_dists(ic_neighbor_result_mean, params)\n\n\n\n\n\nMin should change:\n\n\nCode\nplot_community_dists(ic_neighbor_result_mean, params)\n\n\n\n\n\n\n\n\nSource Code\n---\ntitle: \"Collateral Consequences\"\n---\n\n# Jensen's inequality stuff\n\nHere we aggregate last\n\n```{python}\nfrom exps import *\n\noverseeding_factor = 4\n\nparams = dict(\n    # graph params\n    n = 1000,\n    p1 = 0.01 / 2,\n    p2 = 0.01 / 2,\n    p_inter = 0.0001 / 2,\n    # seeding params\n    seed1 = overseeding_factor * 0.1,\n    seed2 = 0.1,\n    # IC params\n    alpha = 0.1,\n    reprs = 10000,\n    communities = [list(range(0, 1000)), list(range(1000, 2000))]\n    )\nparams[\"graph\"] = two_communities(params)\nparams[\"seeds\"] = set_seeds(params)\n\nic_neighbor_result_mean = read_array(ic_fun(\n    params[\"graph\"],\n    array_into_file(params[\"seeds\"]),\n    str(params[\"alpha\"]),\n    str(params[\"reprs\"]),\n    \"mean\"\n    ))\n\nic_neighbor_result_min = read_array(ic_fun(\n    params[\"graph\"],\n    array_into_file(params[\"seeds\"]),\n    str(params[\"alpha\"]),\n    str(params[\"reprs\"]),\n    \"min\"\n    ))\n```\n\nMean shouldn't change:\n\n```{python}\nplot_community_dists(ic_neighbor_result_mean, params)\n\n```\n\nMin should change:\n\n```{python}\nplot_community_dists(ic_neighbor_result_mean, params)\n\n```"
  },
  {
    "objectID": "index.html#files-with-figures",
    "href": "index.html#files-with-figures",
    "title": "Network fairness experiments",
    "section": "Files with figures",
    "text": "Files with figures\n\nfig 2\nfig 5"
  },
  {
    "objectID": "index.html#collateral-consequences",
    "href": "index.html#collateral-consequences",
    "title": "Network fairness experiments",
    "section": "Collateral Consequences",
    "text": "Collateral Consequences\n\ncollateral consequences experiments."
  },
  {
    "objectID": "exp1+2.html#collateral-consequences-functions",
    "href": "exp1+2.html#collateral-consequences-functions",
    "title": "",
    "section": "Collateral consequences functions",
    "text": "Collateral consequences functions\nNote, we’ll have to fix the community calculate to create the right communities when using the different graphs. Right now we’re using a specific network for which we know the community configuration.\nNo transformation:\n\n\nCode\ncommunities = [list(range(1000)), list(range(1000, 2000))]\nnetwork = \"../data/reference_communities/Isolated_communities/SBM/Run_1/twocommunities_edgelist.txt\"\nplot_curve(\n    network,\n    communities,\n    id, \"prob\")\n\n\n\n\n\nSquare:\n\n\nCode\nplot_curve(\n    network,\n    communities,\n    square, \"squared prob\")\n\n\n\n\n\nMean of neighbors:\n\n\nCode\nplot_curve(\n    network,\n    communities,\n    f_mean, \"mean of neighbors' prob\")\n\n\n\n\n\nMin of neighbors:\n\n\nCode\nplot_curve(\n    network,\n    communities,\n    f_min, \"min of neighbors' prob\")\n\n\n\n\n\n\n\n\nSource Code\n---\nTitle: \"Experiment 1+2\"\nformat:\n  html:\n    code-tools: true\n    code-fold: true\n---\n\n#\n\n```{python}\nfrom exps import *\nimport numpy\nimport matplotlib.pyplot as plt\nimport networkx as nx\nimport random\n\ndef graph_to_edge_list(network):\n    result = []\n    for (node_id, neighbors) in enumerate(network):\n        for neighbor in neighbors:\n            result.append([node_id, neighbor])\n    return result\n    \ndef write_output(G, filename):\n    with open(filename, 'w') as txt_file:\n        num_of_nodes = len(G.nodes)\n        directed = 0\n        txt_file.write(\"{}\\t{}\\n\".format(num_of_nodes, directed))\n        for edge in G.edges:\n            txt_file.write(\"{}\\t{}\\n\".format(edge[0], edge[1]))\n    \ndef delete_nodes_from_network(network):\n    network = read_graph(network)\n    edge_list = graph_to_edge_list(network)\n    nodes_to_delete = set() # solve_this_later()\n    # NB we're deleting all edges instead of the nodes so that\n    # the communities stay the same\n    #for i in range(1000):\n    #    r = random.random()\n    #    if r < 0.1:\n    #        nodes_to_delete.add(i)\n    #for i in range(1000, 2000):\n    #    r = random.random()\n    #    if r < 0.3:\n    #        nodes_to_delete.add(i)\n    edge_list = list(\n        edge for edge in edge_list\n        if (edge[0] not in nodes_to_delete and\n            edge[1] not in nodes_to_delete))\n    g = nx.Graph(edge_list)\n    write_output(g, \"output.txt\")\n    return \"output.txt\"\n    \ndef make_params(shrink_factor):\n    return dict(\n        # seeding params\n        seed1 = 0.3,\n        seed2 = 0.3,\n        # IC params\n        alpha = 0.1,\n        reprs = 100)\n\ndef run_experiment_range(network, communities, factors, f):\n    c1s = []\n    c2s = []\n    for factor in factors:\n        params = make_params(factor)\n        params[\"n\"] = 1000\n        params[\"n1\"] = 1000\n        params[\"n2\"] = 1000\n        params[\"graph\"] = delete_nodes_from_network(network)\n        params[\"communities\"] = communities\n        params[\"seeds\"] = set_seeds(params)\n        ic_result = run_experiment(params)\n        ic_result = f(ic_result, params)\n        c1, c2 = split_result_by_communities(ic_result, params)\n        c1s.append(numpy.mean(c1))\n        c2s.append(numpy.mean(c2))\n    return c1s, c2s\n\nfactors = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]\ndef plot_curve(network, community, f, label):\n    c1s, c2s = run_experiment_range(network, community, factors, f)\n    plt.figure()\n    plt.plot(factors, c1s)\n    plt.plot(factors, c2s)\n    plt.xlabel(\"Shrinkage factor\")\n    plt.ylabel(label)\n    plt.show()\n\n```\n\n## Collateral consequences functions\n\nNote, we'll have to fix the community calculate to create the right\ncommunities when using the different graphs. Right now we're using\na specific network for which we know the community configuration.\n\nNo transformation:\n\n```{python}\ncommunities = [list(range(1000)), list(range(1000, 2000))]\nnetwork = \"../data/reference_communities/Isolated_communities/SBM/Run_1/twocommunities_edgelist.txt\"\nplot_curve(\n    network,\n    communities,\n    id, \"prob\")\n```\n\nSquare:\n\n```{python}\nplot_curve(\n    network,\n    communities,\n    square, \"squared prob\")\n```\n\nMean of neighbors:\n\n```{python}\nplot_curve(\n    network,\n    communities,\n    f_mean, \"mean of neighbors' prob\")\n```\n\nMin of neighbors:\n\n```{python}\nplot_curve(\n    network,\n    communities,\n    f_min, \"min of neighbors' prob\")\n```"
  },
  {
    "objectID": "exp1.html",
    "href": "exp1.html",
    "title": "Experiment 1",
    "section": "",
    "text": "Two Erdos-Renyi graphs \\(n=1000, p=0.01\\) connected to one another with random edges, \\(p=0.0001\\). We overseed one community and look at the access probabilities.\n(I’m dividing the probability by 2 there so that my results match those of the students. I’m pretty sure this is harmless and coming from different convention on how to interpret the values in symmetric graphs when generating them, etc.)\n\nCode\nfrom exps import *\n\noverseeding_factor = 4\n\nparams = dict(\n    # graph params\n    n = 1000,\n    p1 = 0.01 / 2,\n    p2 = 0.01 / 2,\n    p_inter = 0.0001 / 2,\n    # seeding params\n    seed1 = overseeding_factor * 0.1,\n    seed2 = 0.1,\n    # IC params\n    alpha = 0.1,\n    reprs = 10000,\n    communities = [list(range(0, 1000)), list(range(1000, 2000))]\n    )\n\nWe generate a community graph and seeds:\n\nCode\nparams[\"graph\"] = two_communities(params)\nparams[\"seeds\"] = set_seeds(params)\n\nThen, we run the IC computation:\n\nCode\nic_result = run_experiment(params)\n\nFinally, we plot the distribution of access probabilities across the communities:\n\nBasic\nAccess probs:\n\n\n\n\n\n\\(x^2\\) access probs:\nAccess probs:\n\n\n\n\n\n\n\n\nSource Code\n---\ntitle: \"Experiment 1\"\nformat: \n  html:\n    code-tools: true\n    code-fold: true\n---\n\nTwo Erdos-Renyi graphs $n=1000, p=0.01$ connected to one another with random edges, $p=0.0001$.\nWe overseed one community and look at the access probabilities.\n\n(I'm dividing the probability by 2 there so that my results match\nthose of the students. I'm pretty sure this is harmless and coming\nfrom different convention on how to interpret the values in symmetric\ngraphs when generating them, etc.)\n\n```{python}\n#| code-fold: show\nfrom exps import *\n\noverseeding_factor = 4\n\nparams = dict(\n    # graph params\n    n = 1000,\n    p1 = 0.01 / 2,\n    p2 = 0.01 / 2,\n    p_inter = 0.0001 / 2,\n    # seeding params\n    seed1 = overseeding_factor * 0.1,\n    seed2 = 0.1,\n    # IC params\n    alpha = 0.1,\n    reprs = 10000,\n    communities = [list(range(0, 1000)), list(range(1000, 2000))]\n    )\n    \n```\n\nWe generate a community graph and seeds:\n\n```{python}\nparams[\"graph\"] = two_communities(params)\nparams[\"seeds\"] = set_seeds(params)\n```\n\nThen, we run the IC computation:\n\n```{python}\nic_result = run_experiment(params)\n```\n\nFinally, we plot the distribution of access probabilities across the\ncommunities:\n\n# Basic\n\nAccess probs:\n```{python}\n#| echo: false\nplt.figure()\nplot_community_dists(ic_result, params)\nplt.show()\n```\n\n$x^2$ access probs:\n\nAccess probs:\n```{python}\n#| echo: false\nplt.figure()\nplot_community_dists(list(v ** 2 for v in ic_result), params)\nplt.show()\n```"
  },
  {
    "objectID": "fig-2.html",
    "href": "fig-2.html",
    "title": "Getting Figure 2 from the paper",
    "section": "",
    "text": "Code\nimport glob\nfrom exps import *\nimport matplotlib.pyplot as plt\n\nmodel = [\"SBM\", \"LFR\"]\ndr = { \"SBM\": (0, 40), \"LFR\": (0, 60) }\ncommunities = [\"Isolated_communities\", \"More_connected_communities\"]\n\ndef degrees(network):\n    return list(len(l) for l in network)\n\nfor m in model:\n    for c in communities:\n        files = glob.glob(f'../data/reference_communities/{c}/{m}/Run_*/twocommunities_edgelist.txt')\n        l = []\n        for f in files:\n            n = read_graph(f)\n            degs = degrees(n)\n            l.extend(degs)\n        print(l)\n        plt.figure()\n        hist(l, range=dr[m])\n        plt.title(f'{m}, {c}')\n        plt.xlabel(\"Node degree\")\n        plt.ylabel(\"Frequency\")\n        plt.show()\n\n\n[11, 14, 16, 11, 8, 10, 14, 8, 12, 15, 12, 7, 14, 6, 8, 17, 5, 8, 7, 13, 7, 10, 11, 9, 11, 4, 8, 11, 12, 12, 11, 8, 3, 7, 9, 9, 10, 11, 8, 8, 11, 10, 13, 13, 6, 8, 13, 10, 10, 14, 14, 7, 14, 9, 10, 13, 9, 8, 12, 9, 11, 9, 10, 11, 11, 7, 5, 7, 4, 12, 8, 8, 10, 7, 9, 8, 10, 12, 13, 5, 12, 12, 15, 11, 3, 8, 10, 21, 12, 9, 5, 14, 7, 10, 13, 20, 13, 8, 6, 14, 12, 8, 10, 18, 5, 11, 18, 8, 11, 12, 13, 15, 8, 10, 14, 7, 8, 11, 9, 15, 12, 12, 5, 5, 4, 7, 13, 9, 6, 10, 11, 11, 7, 15, 13, 10, 8, 8, 11, 8, 12, 10, 8, 8, 10, 15, 10, 6, 5, 11, 11, 11, 11, 4, 9, 8, 7, 6, 5, 5, 15, 7, 11, 9, 9, 11, 6, 11, 8, 9, 9, 12, 12, 10, 12, 9, 4, 5, 17, 8, 10, 9, 7, 6, 6, 5, 14, 8, 5, 11, 8, 10, 10, 7, 7, 12, 9, 16, 4, 10, 8, 7, 6, 12, 8, 12, 8, 5, 7, 15, 8, 11, 6, 13, 10, 12, 8, 15, 8, 7, 8, 8, 19, 8, 9, 7, 9, 13, 10, 9, 8, 13, 11, 9, 10, 10, 2, 8, 3, 12, 13, 12, 10, 12, 9, 17, 11, 14, 16, 11, 10, 18, 11, 9, 8, 16, 10, 7, 8, 10, 10, 9, 12, 7, 16, 9, 6, 3, 9, 12, 10, 19, 7, 14, 10, 6, 6, 6, 8, 12, 5, 5, 6, 9, 19, 6, 17, 14, 13, 13, 14, 12, 15, 8, 9, 6, 12, 10, 7, 10, 13, 13, 12, 11, 15, 9, 5, 9, 7, 17, 7, 7, 9, 10, 4, 10, 15, 15, 8, 15, 14, 20, 13, 14, 15, 8, 9, 7, 9, 11, 9, 9, 19, 3, 10, 7, 9, 6, 11, 4, 15, 6, 13, 4, 9, 12, 11, 8, 5, 13, 11, 10, 17, 17, 7, 11, 14, 15, 10, 11, 8, 13, 10, 5, 7, 7, 10, 10, 6, 11, 11, 7, 9, 9, 8, 12, 12, 11, 10, 12, 7, 9, 14, 8, 10, 10, 12, 11, 8, 12, 11, 5, 14, 11, 7, 19, 8, 11, 13, 6, 9, 10, 7, 8, 8, 8, 4, 5, 10, 9, 11, 13, 14, 12, 9, 7, 9, 14, 11, 13, 13, 9, 8, 6, 8, 9, 7, 12, 12, 9, 8, 9, 12, 11, 7, 5, 11, 9, 13, 8, 6, 9, 8, 13, 12, 7, 11, 13, 14, 14, 14, 9, 10, 6, 8, 5, 9, 10, 10, 8, 13, 8, 9, 4, 13, 12, 10, 7, 9, 11, 15, 8, 14, 4, 7, 12, 18, 11, 7, 10, 14, 10, 8, 8, 8, 9, 13, 15, 11, 9, 12, 5, 13, 11, 11, 6, 9, 8, 20, 7, 2, 7, 6, 11, 9, 14, 10, 11, 11, 11, 11, 9, 14, 11, 15, 11, 8, 15, 12, 10, 9, 11, 10, 6, 21, 6, 6, 10, 14, 9, 8, 9, 11, 7, 15, 12, 11, 11, 3, 11, 6, 16, 13, 9, 13, 11, 16, 10, 7, 5, 11, 18, 16, 13, 13, 10, 7, 15, 8, 10, 10, 12, 6, 15, 6, 9, 8, 11, 3, 15, 20, 9, 9, 11, 8, 13, 8, 8, 12, 13, 5, 14, 16, 6, 8, 11, 11, 7, 9, 7, 6, 9, 15, 9, 5, 12, 12, 8, 8, 6, 15, 9, 8, 12, 8, 6, 14, 7, 8, 11, 12, 11, 6, 7, 11, 14, 11, 9, 6, 9, 9, 10, 12, 10, 12, 8, 4, 11, 12, 16, 9, 16, 13, 13, 16, 12, 15, 9, 10, 12, 9, 12, 11, 14, 9, 9, 15, 7, 7, 9, 10, 8, 10, 14, 9, 10, 10, 12, 11, 7, 7, 10, 12, 7, 10, 6, 13, 12, 10, 12, 8, 5, 8, 15, 7, 11, 8, 10, 9, 10, 10, 13, 10, 18, 11, 7, 9, 13, 6, 7, 9, 10, 9, 5, 15, 9, 10, 7, 9, 9, 4, 13, 5, 14, 11, 10, 8, 10, 11, 13, 12, 7, 9, 11, 6, 8, 8, 8, 16, 9, 9, 9, 7, 10, 14, 9, 12, 8, 11, 11, 13, 10, 8, 9, 8, 6, 13, 8, 12, 10, 5, 8, 14, 9, 5, 11, 15, 10, 8, 8, 7, 16, 8, 10, 7, 8, 9, 12, 12, 14, 8, 12, 11, 8, 9, 8, 11, 7, 14, 10, 8, 13, 7, 11, 10, 9, 11, 5, 10, 8, 9, 7, 9, 16, 11, 4, 7, 13, 6, 9, 10, 9, 12, 8, 6, 5, 8, 9, 9, 15, 7, 8, 19, 15, 9, 11, 8, 3, 9, 11, 7, 12, 11, 8, 9, 14, 8, 9, 10, 10, 14, 9, 11, 6, 9, 13, 12, 15, 11, 7, 11, 12, 11, 11, 11, 13, 6, 15, 14, 8, 12, 12, 7, 8, 10, 16, 8, 9, 13, 10, 14, 13, 5, 12, 13, 12, 6, 10, 11, 9, 15, 15, 14, 12, 6, 5, 7, 9, 8, 10, 12, 15, 11, 11, 10, 12, 12, 16, 10, 13, 6, 11, 9, 5, 18, 11, 9, 6, 5, 14, 8, 6, 14, 8, 11, 8, 8, 15, 8, 8, 5, 15, 4, 12, 9, 7, 8, 9, 11, 13, 9, 9, 5, 6, 7, 6, 8, 8, 4, 8, 10, 10, 14, 20, 16, 8, 10, 12, 15, 14, 7, 7, 9, 14, 12, 9, 14, 13, 9, 13, 10, 8, 10, 7, 6, 6, 13, 13, 13, 10, 7, 9, 8, 13, 16, 10, 3, 13, 10, 7, 13, 13, 14, 12, 7, 18, 7, 10, 13, 9, 13, 6, 12, 8, 11, 15, 11, 11, 9, 9, 13, 13, 11, 11, 6, 16, 5, 9, 9, 12, 10, 11, 15, 16, 23, 6, 10, 9, 11, 10, 9, 13, 12, 8, 10, 7, 11, 10, 6, 9, 8, 10, 10, 14, 14, 7, 12, 8, 10, 9, 8, 11, 7, 8, 15, 6, 7, 13, 9, 7, 10, 10, 6, 7, 10, 12, 10, 15, 10, 7, 13, 15, 4, 9, 6, 10, 11, 5, 5, 13, 11, 8, 15, 12, 10, 8, 9, 11, 5, 6, 14, 8, 10, 7, 7, 11, 14, 10, 10, 9, 8, 6, 14, 8, 15, 10, 10, 16, 6, 10, 6, 13, 13, 9, 7, 8, 7, 7, 7, 9, 11, 9, 2, 15, 13, 10, 16, 10, 8, 10, 15, 6, 5, 10, 14, 15, 8, 10, 9, 14, 13, 9, 11, 12, 3, 6, 9, 6, 15, 5, 11, 10, 11, 5, 9, 6, 8, 13, 12, 11, 11, 9, 10, 10, 7, 15, 10, 11, 14, 5, 11, 17, 14, 5, 6, 7, 11, 4, 8, 5, 4, 7, 10, 12, 9, 10, 14, 10, 8, 5, 11, 12, 5, 7, 15, 10, 11, 15, 8, 9, 5, 9, 11, 6, 12, 8, 7, 14, 13, 10, 11, 11, 7, 12, 10, 14, 11, 9, 9, 12, 11, 8, 14, 11, 12, 11, 4, 12, 15, 7, 11, 10, 10, 8, 7, 11, 14, 10, 15, 10, 9, 6, 10, 6, 9, 15, 12, 15, 11, 17, 12, 11, 10, 12, 6, 10, 9, 10, 14, 7, 5, 6, 7, 13, 12, 8, 11, 13, 9, 11, 20, 12, 7, 8, 9, 17, 6, 6, 12, 13, 4, 13, 11, 5, 10, 10, 7, 9, 7, 12, 15, 17, 4, 12, 11, 6, 7, 8, 11, 9, 14, 8, 7, 12, 9, 8, 11, 8, 11, 15, 17, 11, 13, 7, 10, 9, 13, 19, 12, 11, 13, 6, 10, 16, 15, 10, 11, 9, 9, 10, 15, 11, 10, 7, 11, 5, 12, 9, 9, 12, 7, 14, 11, 9, 13, 10, 14, 10, 14, 4, 9, 6, 11, 6, 7, 11, 6, 6, 13, 12, 11, 8, 12, 7, 11, 6, 9, 12, 11, 9, 10, 10, 10, 10, 4, 11, 9, 10, 11, 14, 8, 7, 14, 9, 10, 15, 9, 10, 13, 7, 10, 12, 3, 7, 10, 12, 12, 8, 14, 7, 9, 10, 15, 9, 12, 12, 18, 10, 11, 7, 10, 7, 19, 12, 17, 15, 12, 11, 7, 13, 13, 14, 13, 15, 11, 12, 11, 6, 6, 11, 7, 7, 9, 15, 7, 8, 6, 7, 7, 10, 9, 8, 13, 12, 7, 8, 10, 14, 11, 16, 8, 8, 13, 4, 12, 6, 11, 15, 16, 12, 9, 8, 7, 14, 12, 15, 7, 5, 11, 17, 14, 7, 5, 15, 7, 10, 7, 9, 14, 8, 9, 8, 12, 11, 9, 10, 12, 9, 10, 14, 9, 8, 14, 9, 8, 11, 9, 10, 15, 7, 8, 10, 8, 14, 11, 10, 6, 12, 13, 8, 12, 18, 13, 10, 9, 8, 14, 15, 8, 13, 14, 8, 9, 8, 12, 11, 10, 8, 9, 8, 12, 8, 9, 16, 10, 4, 12, 10, 12, 5, 7, 10, 10, 8, 9, 6, 13, 6, 15, 7, 12, 12, 16, 6, 14, 7, 12, 9, 8, 13, 10, 9, 11, 6, 13, 13, 7, 8, 3, 12, 9, 12, 15, 9, 6, 13, 10, 15, 10, 12, 16, 10, 8, 14, 11, 12, 9, 9, 15, 8, 15, 10, 7, 12, 5, 15, 8, 10, 9, 9, 14, 12, 13, 15, 9, 7, 12, 6, 12, 14, 13, 10, 11, 7, 8, 5, 9, 3, 7, 10, 14, 10, 12, 9, 7, 14, 12, 15, 6, 9, 11, 9, 9, 10, 14, 7, 9, 8, 9, 14, 11, 6, 11, 8, 5, 10, 11, 12, 6, 13, 14, 14, 22, 11, 8, 11, 8, 8, 9, 6, 9, 6, 13, 12, 8, 11, 11, 13, 9, 8, 5, 17, 6, 13, 10, 11, 6, 13, 12, 11, 12, 12, 8, 14, 14, 9, 12, 9, 13, 11, 14, 14, 11, 13, 7, 10, 6, 4, 13, 9, 8, 11, 13, 11, 7, 10, 10, 9, 10, 14, 9, 11, 11, 7, 7, 11, 15, 11, 6, 14, 13, 12, 10, 12, 3, 8, 6, 13, 5, 7, 8, 8, 10, 8, 11, 13, 10, 10, 6, 15, 8, 15, 7, 10, 12, 10, 9, 9, 14, 5, 7, 11, 13, 7, 7, 9, 5, 11, 10, 12, 9, 8, 14, 10, 12, 9, 7, 18, 5, 13, 10, 10, 6, 13, 14, 13, 8, 12, 6, 6, 9, 18, 6, 5, 10, 9, 9, 12, 14, 11, 7, 14, 6, 16, 12, 6, 10, 6, 11, 12, 13, 12, 10, 10, 15, 10, 11, 11, 12, 13, 10, 7, 7, 15, 11, 17, 14, 5, 14, 12, 14, 13, 14, 6, 9, 15, 9, 9, 9, 11, 12, 15, 9, 15, 4, 13, 5, 5, 6, 9, 14, 16, 6, 9, 8, 8, 9, 11, 11, 13, 14, 7, 11, 7, 9, 11, 14, 8, 14, 8, 11, 9, 13, 8, 13, 12, 9, 8, 16, 6, 6, 7, 5, 9, 9, 8, 14, 15, 9, 6, 7, 11, 12, 11, 4, 7, 7, 7, 6, 11, 9, 8, 16, 6, 6, 13, 7, 14, 14, 9, 16, 17, 9, 3, 8, 10, 7, 15, 9, 11, 6, 11, 4, 16, 12, 11, 7, 10, 5, 10, 8, 10, 14, 7, 12, 9, 12, 12, 11, 10, 11, 8, 7, 14, 15, 10, 4, 8, 11, 4, 14, 11, 13, 7, 11, 12, 5, 16, 8, 8, 9, 11, 9, 14, 7, 12, 13, 13, 13, 9, 15, 15, 7, 11, 11, 9, 11, 6, 8, 15, 12, 15, 7, 6, 17, 11, 14, 9, 5, 10, 4, 9, 8, 8, 15, 10, 6, 26, 10, 11, 12, 11, 12, 13, 9, 19, 11, 4, 11, 11, 11, 10, 9, 5, 9, 9, 8, 9, 8, 8, 9, 13, 10, 7, 5, 9, 18, 12, 18, 10, 14, 9, 9, 5, 15, 13, 10, 18, 7, 6, 16, 9, 6, 9, 14, 9, 10, 12, 5, 11, 3, 11, 9, 4, 4, 14, 7, 12, 20, 9, 7, 12, 10, 5, 11, 8, 12, 12, 11, 9, 8, 6, 8, 10, 9, 7, 11, 11, 7, 12, 11, 13, 10, 14, 11, 7, 14, 9, 8, 7, 10, 7, 18, 13, 9, 11, 6, 10, 14, 10, 13, 14, 11, 7, 15, 10, 19, 14, 10, 8, 13, 18, 6, 12, 15, 12, 8, 7, 11, 4, 7, 15, 13, 9, 3, 12, 11, 10, 6, 7, 8, 8, 16, 12, 9, 10, 7, 12, 17, 5, 14, 15, 15, 12, 14, 8, 8, 14, 14, 8, 7, 12, 14, 9, 13, 3, 15, 10, 15, 14, 12, 15, 14, 13, 9, 9, 7, 12, 12, 5, 12, 13, 19, 15, 11, 9, 14, 10, 8, 10, 11, 14, 6, 13, 10, 5, 12, 15, 10, 15, 9, 6, 9, 9, 13, 7, 8, 10, 8, 10, 6, 12, 12, 10, 16, 15, 13, 8, 13, 10, 12, 11, 9, 11, 6, 11, 8, 14, 7, 11, 9, 8, 8, 8, 10, 11, 10, 12, 18, 9, 12, 8, 15, 5, 9, 10, 7, 8, 7, 8, 9, 7, 13, 8, 11, 8, 17, 5, 9, 13, 10, 10, 8, 8, 14, 11, 11, 4, 12, 8, 5, 10, 10, 4, 8, 9, 9, 9, 11, 11, 9, 10, 11, 13, 11, 7, 10, 10, 7, 11, 5, 11, 8, 4, 6, 9, 11, 7, 11, 9, 9, 6, 8, 10, 13, 11, 9, 11, 11, 6, 12, 11, 10, 16, 8, 7, 5, 12, 13, 11, 17, 8, 11, 14, 5, 11, 4, 12, 15, 14, 12, 7, 7, 9, 14, 10, 9, 13, 11, 12, 12, 10, 13, 8, 7, 7, 12, 8, 10, 12, 6, 8, 15, 16, 9, 12, 9, 6, 6, 15, 15, 7, 9, 9, 7, 12, 7, 13, 10, 11, 15, 12, 11, 10, 11, 8, 16, 5, 10, 5, 13, 9, 11, 8, 11, 11, 19, 8, 12, 8, 8, 8, 4, 10, 14, 10, 11, 4, 8, 11, 5, 9, 14, 9, 13, 12, 6, 11, 12, 6, 9, 11, 8, 9, 13, 12, 9, 14, 6, 10, 7, 8, 13, 12, 11, 11, 7, 8, 7, 9, 6, 7, 11, 8, 7, 9, 8, 12, 7, 10, 9, 15, 9, 10, 4, 9, 8, 9, 9, 10, 10, 10, 9, 11, 9, 14, 6, 12, 4, 13, 9, 10, 13, 8, 16, 14, 11, 9, 14, 11, 5, 10, 9, 11, 11, 8, 8, 9, 8, 9, 12, 11, 10, 7, 12, 10, 14, 6, 9, 10, 6, 10, 10, 7, 7, 11, 16, 14, 14, 12, 12, 6, 13, 5, 9, 12, 10, 9, 10, 10, 7, 9, 13, 8, 9, 10, 12, 8, 12, 13, 11, 8, 6, 9, 10, 10, 9, 10, 12, 16, 9, 9, 13, 8, 10, 14, 13, 13, 12, 10, 11, 6, 12, 5, 11, 9, 15, 6, 12, 17, 9, 15, 9, 7, 13, 14, 9, 13, 13, 11, 13, 6, 5, 16, 9, 9, 7, 6, 16, 8, 15, 6, 4, 14, 11, 8, 8, 8, 11, 16, 8, 17, 12, 8, 11, 10, 8, 8, 10, 12, 8, 10, 8, 7, 7, 7, 9, 11, 8, 5, 17, 10, 19, 7, 4, 11, 12, 4, 9, 7, 10, 15, 8, 10, 12, 11, 14, 3, 8, 8, 16, 11, 8, 8, 8, 13, 10, 12, 6, 9, 9, 7, 8, 8, 13, 8, 11, 13, 8, 9, 12, 10, 7, 10, 10, 9, 10, 14, 15, 16, 5, 13, 14, 7, 4, 6, 14, 12, 12, 11, 10, 12, 13, 7, 14, 13, 5, 8, 4, 8, 6, 7, 14, 9, 7, 16, 13, 15, 10, 11, 15, 13, 9, 10, 5, 11, 11, 11, 13, 10, 5, 9, 10, 12, 6, 10, 6, 14, 16, 10, 8, 18, 15, 16, 13, 9, 11, 20, 6, 10, 13, 6, 8, 13, 13, 13, 11, 12, 7, 9, 7, 6, 7, 8, 8, 5, 14, 11, 6, 19, 13, 6, 12, 12, 4, 7, 9, 13, 11, 8, 13, 7, 14, 13, 12, 10, 18, 14, 8, 16, 6, 14, 10, 10, 13, 6, 9, 6, 12, 8, 13, 6, 7, 11, 7, 12, 14, 7, 13, 13, 14, 7, 7, 14, 10, 3, 14, 10, 9, 12, 7, 12, 9, 8, 8, 7, 8, 9, 11, 11, 9, 6, 11, 13, 7, 6, 9, 3, 9, 11, 11, 6, 12, 4, 8, 14, 11, 9, 13, 9, 8, 11, 8, 10, 10, 13, 13, 16, 10, 7, 14, 6, 7, 10, 11, 8, 8, 8, 12, 8, 10, 8, 17, 10, 9, 10, 9, 15, 9, 5, 9, 7, 11, 14, 9, 10, 13, 13, 9, 7, 9, 14, 6, 9, 9, 12, 12, 14, 11, 12, 9, 8, 9, 7, 12, 14, 11, 12, 13, 17, 13, 4, 13, 10, 10, 8, 11, 12, 16, 12, 6, 7, 10, 14, 7, 13, 17, 10, 5, 13, 8, 8, 10, 3, 11, 12, 10, 9, 10, 8, 8, 13, 12, 10, 12, 16, 6, 10, 11, 11, 14, 11, 12, 10, 16, 14, 8, 7, 9, 12, 9, 11, 12, 9, 7, 11, 11, 10, 15, 13, 15, 5, 7, 10, 8, 10, 9, 8, 12, 8, 10, 6, 16, 11, 10, 13, 13, 7, 13, 13, 12, 6, 14, 14, 11, 9, 6, 12, 14, 11, 10, 14, 11, 10, 15, 10, 10, 8, 9, 10, 10, 12, 8, 10, 5, 10, 6, 10, 9, 14, 8, 10, 11, 7, 12, 7, 9, 15, 5, 9, 11, 15, 14, 12, 5, 11, 6, 8, 12, 14, 12, 5, 8, 10, 5, 12, 11, 10, 13, 10, 16, 12, 7, 10, 5, 10, 12, 6, 11, 18, 13, 9, 15, 11, 14, 12, 4, 8, 10, 9, 15, 11, 5, 8, 9, 8, 5, 10, 13, 17, 13, 14, 8, 11, 14, 15, 12, 10, 12, 11, 7, 11, 5, 13, 15, 9, 6, 9, 10, 12, 14, 7, 6, 11, 9, 15, 9, 13, 14, 4, 9, 11, 4, 12, 12, 13, 10, 11, 12, 9, 9, 8, 8, 15, 5, 11, 12, 11, 6, 8, 14, 8, 12, 7, 9, 9, 11, 12, 12, 7, 6, 15, 10, 11, 5, 16, 13, 10, 5, 8, 10, 5, 10, 5, 10, 8, 9, 16, 7, 6, 7, 9, 13, 10, 5, 6, 10, 11, 14, 15, 5, 11, 7, 12, 23, 9, 13, 8, 14, 9, 14, 9, 9, 8, 4, 11, 9, 13, 14, 15, 6, 6, 11, 16, 6, 19, 6, 14, 7, 13, 15, 9, 12, 9, 11, 7, 9, 11, 8, 10, 6, 9, 14, 9, 13, 12, 9, 10, 11, 6, 10, 8, 12, 15, 10, 15, 8, 10, 10, 11, 11, 10, 15, 11, 7, 12, 14, 16, 10, 6, 12, 12, 11, 12, 11, 12, 9, 8, 9, 11, 16, 12, 10, 16, 5, 7, 10, 15, 11, 6, 12, 9, 5, 6, 8, 9, 7, 9, 14, 10, 13, 7, 13, 11, 13, 10, 7, 10, 14, 10, 12, 13, 10, 8, 10, 8, 10, 12, 9, 17, 10, 6, 10, 12, 10, 7, 9, 9, 13, 14, 6, 12, 16, 11, 10, 10, 12, 8, 7, 10, 13, 9, 6, 12, 5, 8, 14, 6, 10, 13, 16, 11, 6, 8, 9, 10, 13, 9, 4, 7, 14, 10, 8, 10, 4, 17, 12, 8, 10, 9, 8, 9, 6, 19, 11, 11, 10, 10, 11, 10, 8, 13, 9, 12, 9, 10, 15, 17, 8, 6, 12, 11, 12, 5, 7, 12, 5, 11, 9, 8, 8, 12, 10, 11, 10, 12, 7, 11, 7, 8, 9, 11, 13, 15, 13, 9, 11, 8, 19, 15, 13, 8, 12, 9, 14, 6, 17, 9, 9, 16, 15, 14, 15, 14, 14, 8, 12, 12, 7, 13, 8, 13, 9, 11, 7, 10, 11, 11, 7, 10, 8, 9, 12, 6, 7, 8, 4, 9, 16, 17, 10, 7, 13, 13, 7, 11, 15, 3, 12, 10, 12, 16, 14, 9, 6, 13, 9, 14, 12, 10, 9, 14, 14, 7, 7, 3, 15, 10, 8, 10, 10, 15, 14, 18, 7, 9, 12, 9, 8, 9, 7, 6, 10, 10, 14, 12, 8, 13, 5, 8, 11, 7, 8, 10, 13, 2, 8, 9, 7, 7, 7, 12, 12, 6, 12, 5, 6, 3, 7, 12, 10, 11, 7, 10, 11, 12, 9, 12, 9, 10, 10, 11, 9, 13, 9, 8, 12, 12, 9, 18, 10, 15, 10, 13, 8, 10, 12, 10, 7, 8, 11, 12, 10, 14, 13, 7, 9, 7, 12, 9, 12, 12, 12, 6, 14, 10, 13, 6, 8, 9, 10, 14, 9, 11, 12, 5, 19, 7, 9, 11, 10, 14, 15, 11, 13, 16, 9, 14, 9, 11, 11, 7, 10, 9, 6, 7, 11, 10, 8, 8, 7, 8, 12, 13, 13, 11, 16, 10, 11, 17, 9, 8, 13, 9, 8, 13, 16, 13, 6, 9, 8, 10, 11, 12, 8, 7, 8, 7, 10, 11, 6, 11, 8, 8, 14, 8, 12, 14, 11, 11, 10, 9, 10, 11, 10, 15, 10, 11, 3, 7, 11, 6, 14, 15, 15, 9, 10, 11, 6, 11, 15, 9, 8, 11, 10, 10, 14, 8, 11, 4, 7, 6, 12, 13, 12, 12, 8, 13, 12, 10, 8, 11, 10, 5, 12, 6, 13, 12, 11, 8, 8, 8, 8, 14, 9, 6, 16, 10, 10, 9, 8, 14, 9, 8, 11, 14, 12, 18, 11, 14, 9, 15, 8, 10, 13, 12, 14, 5, 4, 14, 9, 14, 5, 5, 7, 8, 10, 9, 11, 14, 10, 12, 12, 13, 12, 6, 5, 9, 9, 6, 10, 6, 7, 19, 18, 16, 11, 8, 9, 11, 10, 6, 9, 12, 9, 9, 10, 8, 11, 14, 15, 11, 12, 12, 7, 4, 14, 9, 14, 6, 13, 3, 11, 9, 6, 13, 8, 13, 6, 10, 13, 8, 15, 10, 12, 19, 13, 4, 2, 13, 11, 8, 12, 9, 9, 12, 12, 11, 14, 17, 16, 11, 11, 9, 5, 9, 10, 16, 4, 12, 8, 13, 11, 7, 9, 16, 11, 19, 9, 6, 13, 13, 8, 13, 9, 8, 12, 8, 14, 9, 12, 9, 17, 9, 10, 3, 11, 16, 8, 3, 10, 8, 11, 6, 9, 8, 8, 11, 11, 8, 9, 12, 12, 8, 10, 12, 11, 5, 9, 7, 6, 7, 10, 11, 12, 13, 9, 7, 9, 7, 9, 8, 9, 6, 15, 10, 9, 5, 5, 9, 8, 9, 11, 8, 6, 11, 4, 9, 15, 14, 5, 13, 13, 18, 14, 7, 8, 13, 6, 7, 16, 13, 9, 15, 6, 12, 11, 11, 6, 15, 10, 14, 9, 10, 14, 10, 9, 11, 8, 6, 4, 10, 6, 10, 13, 5, 10, 14, 9, 10, 8, 6, 9, 14, 14, 12, 10, 7, 7, 7, 7, 12, 11, 6, 14, 7, 11, 13, 15, 5, 12, 10, 13, 12, 12, 10, 10, 12, 13, 5, 7, 11, 12, 10, 5, 14, 14, 12, 10, 11, 11, 8, 13, 14, 6, 6, 6, 4, 7, 16, 8, 10, 6, 10, 8, 10, 13, 9, 8, 10, 11, 15, 9, 11, 11, 9, 9, 12, 10, 12, 8, 13, 19, 10, 3, 7, 12, 7, 9, 16, 2, 9, 10, 5, 7, 8, 10, 16, 15, 11, 10, 18, 7, 12, 8, 8, 10, 8, 9, 17, 8, 11, 10, 10, 10, 6, 11, 4, 9, 8, 17, 10, 8, 8, 9, 8, 9, 10, 8, 9, 8, 10, 6, 12, 7, 7, 8, 13, 8, 10, 6, 8, 9, 10, 18, 16, 8, 8, 11, 13, 10, 13, 7, 8, 10, 14, 8, 9, 14, 8, 5, 14, 10, 11, 11, 10, 10, 14, 12, 9, 12, 10, 13, 15, 14, 15, 11, 10, 10, 9, 11, 19, 12, 16, 12, 10, 6, 15, 13, 20, 14, 11, 15, 15, 7, 10, 16, 17, 8, 9, 4, 6, 7, 8, 7, 8, 7, 13, 5, 18, 12, 15, 4, 10, 9, 3, 10, 11, 11, 15, 7, 9, 7, 16, 9, 5, 10, 11, 12, 8, 10, 9, 11, 8, 10, 8, 7, 10, 11, 12, 7, 12, 11, 9, 11, 8, 10, 11, 11, 8, 6, 9, 10, 11, 15, 15, 9, 8, 10, 6, 6, 11, 5, 18, 14, 6, 17, 12, 14, 12, 12, 5, 17, 6, 13, 8, 8, 7, 12, 8, 10, 6, 9, 7, 10, 11, 8, 14, 12, 17, 16, 12, 9, 13, 11, 11, 9, 11, 10, 19, 8, 11, 6, 10, 7, 13, 14, 7, 12, 9, 11, 14, 5, 18, 11, 12, 10, 10, 11, 10, 8, 8, 12, 11, 11, 11, 8, 9, 10, 7, 12, 11, 8, 14, 9, 16, 10, 8, 13, 11, 11, 9, 7, 11, 10, 12, 7, 11, 10, 9, 6, 6, 10, 3, 7, 9, 8, 13, 12, 7, 8, 7, 12, 11, 15, 3, 14, 13, 7, 8, 9, 15, 12, 5, 14, 10, 8, 5, 6, 12, 13, 9, 15, 9, 12, 7, 11, 8, 11, 9, 8, 8, 14, 7, 7, 10, 9, 11, 9, 10, 10, 4, 11, 11, 5, 4, 11, 12, 15, 6, 4, 11, 10, 9, 14, 12, 17, 6, 12, 12, 8, 9, 16, 8, 10, 10, 10, 12, 6, 11, 14, 13, 8, 13, 13, 12, 8, 6, 6, 7, 8, 11, 8, 8, 5, 8, 15, 18, 9, 11, 5, 11, 7, 12, 7, 8, 6, 11, 10, 10, 15, 10, 5, 10, 11, 9, 12, 7, 14, 9, 12, 13, 12, 15, 10, 14, 6, 7, 17, 10, 8, 5, 10, 9, 13, 7, 15, 12, 9, 10, 6, 14, 10, 8, 5, 9, 3, 12, 7, 9, 12, 8, 11, 15, 8, 9, 5, 12, 9, 10, 11, 16, 12, 9, 11, 14, 16, 6, 9, 17, 8, 6, 10, 10, 5, 9, 10, 14, 11, 10, 4, 7, 13, 10, 17, 12, 15, 7, 10, 13, 7, 11, 4, 12, 12, 8, 15, 10, 12, 9, 9, 13, 5, 7, 8, 17, 3, 10, 13, 13, 15, 12, 9, 4, 8, 9, 9, 13, 9, 7, 5, 7, 11, 7, 10, 16, 6, 11, 15, 8, 7, 13, 11, 10, 7, 5, 10, 14, 19, 8, 7, 5, 15, 16, 10, 7, 9, 6, 10, 12, 10, 9, 13, 16, 10, 7, 9, 6, 13, 12, 17, 8, 7, 13, 8, 17, 14, 10, 11, 11, 12, 7, 10, 11, 11, 3, 13, 5, 6, 13, 11, 8, 5, 9, 11, 10, 7, 6, 6, 12, 3, 11, 6, 10, 13, 7, 8, 10, 9, 14, 15, 7, 11, 9, 10, 7, 14, 14, 13, 11, 6, 7, 7, 12, 6, 10, 11, 10, 13, 12, 7, 11, 11, 8, 12, 11, 10, 14, 4, 11, 5, 8, 7, 16, 9, 5, 10, 14, 7, 6, 8, 15, 9, 9, 12, 7, 11, 14, 9, 8, 17, 6, 11, 13, 11, 8, 10, 14, 10, 9, 8, 9, 9, 9, 11, 17, 10, 8, 16, 10, 7, 16, 13, 13, 13, 5, 8, 6, 10, 15, 11, 11, 8, 11, 9, 10, 10, 10, 7, 13, 12, 12, 5, 10, 16, 12, 9, 10, 8, 8, 9, 14, 11, 11, 14, 8, 12, 11, 11, 19, 8, 9, 5, 8, 13, 11, 9, 9, 9, 10, 11, 8, 15, 12, 15, 9, 9, 5, 8, 7, 8, 15, 13, 6, 17, 8, 11, 9, 12, 14, 9, 8, 16, 9, 12, 9, 11, 9, 17, 11, 16, 6, 7, 13, 6, 13, 16, 7, 9, 12, 11, 7, 8, 13, 13, 13, 9, 11, 17, 7, 11, 8, 9, 11, 17, 5, 7, 8, 12, 12, 14, 6, 9, 12, 11, 9, 10, 13, 14, 13, 13, 6, 9, 10, 14, 8, 7, 5, 9, 11, 5, 6, 10, 7, 15, 9, 13, 9, 11, 11, 10, 13, 8, 7, 15, 9, 10, 5, 12, 18, 8, 14, 13, 11, 14, 4, 10, 8, 11, 9, 8, 5, 10, 12, 7, 9, 7, 7, 10, 8, 13, 17, 10, 13, 5, 6, 9, 12, 11, 10, 10, 18, 10, 9, 9, 5, 7, 12, 10, 11, 8, 6, 13, 11, 11, 11, 6, 11, 5, 10, 12, 17, 3, 12, 5, 4, 8, 8, 11, 11, 13, 9, 10, 7, 15, 7, 8, 8, 10, 17, 13, 8, 8, 12, 6, 6, 13, 4, 7, 6, 14, 9, 10, 12, 14, 16, 8, 16, 8, 13, 9, 9, 7, 12, 10, 8, 12, 11, 12, 12, 14, 14, 6, 9, 8, 7, 9, 11, 12, 16, 17, 18, 9, 8, 8, 17, 11, 10, 6, 9, 8, 9, 6, 15, 12, 10, 10, 9, 10, 10, 9, 4, 11, 7, 7, 11, 8, 14, 5, 8, 13, 10, 7, 8, 13, 16, 15, 7, 16, 12, 13, 8, 10, 9, 4, 10, 7, 6, 7, 8, 9, 12, 8, 10, 3, 5, 6, 15, 10, 13, 10, 11, 11, 13, 14, 8, 8, 8, 13, 12, 11, 9, 8, 7, 10, 8, 11, 6, 18, 8, 7, 6, 10, 6, 5, 12, 8, 14, 6, 10, 14, 13, 12, 7, 7, 7, 8, 7, 9, 6, 8, 17, 11, 14, 11, 8, 10, 10, 9, 11, 10, 9, 12, 10, 13, 6, 9, 9, 8, 10, 20, 7, 8, 12, 16, 8, 2, 8, 16, 10, 7, 6, 4, 7, 18, 6, 8, 11, 6, 4, 12, 15, 5, 12, 7, 10, 9, 8, 9, 10, 8, 10, 10, 10, 6, 10, 10, 9, 7, 7, 11, 19, 7, 4, 11, 10, 8, 6, 7, 12, 8, 11, 13, 8, 3, 5, 3, 7, 7, 10, 10, 10, 12, 8, 11, 13, 9, 9, 7, 5, 13, 12, 6, 12, 11, 10, 9, 12, 11, 15, 14, 14, 9, 14, 6, 12, 13, 12, 9, 9, 14, 10, 7, 10, 10, 10, 15, 9, 14, 13, 7, 6, 11, 16, 8, 8, 10, 9, 8, 17, 5, 15, 13, 10, 9, 16, 12, 8, 11, 9, 15, 10, 11, 13, 11, 5, 12, 12, 11, 11, 11, 16, 11, 10, 13, 11, 10, 13, 12, 5, 9, 9, 11, 9, 7, 14, 9, 8, 7, 18, 12, 8, 8, 9, 8, 7, 14, 13, 10, 10, 13, 11, 7, 10, 10, 11, 16, 14, 14, 9, 10, 8, 8, 10, 10, 15, 11, 15, 7, 10, 10, 10, 9, 13, 8, 12, 8, 9, 11, 10, 9, 8, 10, 4, 14, 8, 11, 9, 9, 9, 7, 14, 9, 14, 9, 9, 13, 12, 14, 5, 8, 14, 10, 12, 3, 6, 12, 10, 9, 10, 17, 9, 7, 8, 12, 6, 3, 9, 11, 15, 11, 9, 11, 12, 16, 9, 8, 9, 10, 11, 5, 7, 12, 9, 7, 10, 13, 9, 15, 11, 14, 17, 12, 10, 9, 7, 8, 10, 10, 8, 8, 8, 14, 12, 11, 9, 7, 9, 10, 10, 15, 14, 13, 10, 10, 14, 5, 11, 7, 12, 7, 14, 12, 11, 12, 5, 9, 12, 9, 9, 5, 9, 12, 8, 14, 12, 11, 12, 6, 8, 7, 7, 15, 11, 10, 7, 11, 14, 11, 13, 7, 14, 13, 10, 9, 11, 11, 12, 9, 12, 8, 16, 18, 11, 7, 8, 17, 9, 10, 15, 12, 12, 12, 10, 14, 6, 4, 14, 11, 7, 10, 8, 10, 11, 10, 9, 12, 7, 14, 12, 12, 15, 7, 11, 13, 9, 9, 11, 8, 10, 10, 11, 10, 12, 6, 9, 9, 9, 8, 7, 8, 13, 14, 19, 5, 6, 7, 3, 12, 6, 6, 16, 8, 19, 16, 12, 13, 6, 13, 11, 6, 12, 16, 11, 9, 7, 12, 9, 11, 11, 8, 7, 11, 10, 9, 9, 9, 10, 8, 11, 18, 11, 8, 11, 19, 9, 8, 4, 16, 9, 14, 9, 9, 11, 7, 8, 13, 9, 6, 9, 7, 14, 13, 10, 9, 10, 11, 12, 8, 11, 14, 13, 12, 6, 2, 17, 7, 7, 7, 11, 18, 10, 12, 10, 5, 9, 7, 10, 13, 14, 6, 9, 6, 11, 6, 10, 8, 12, 5, 10, 17, 11, 9, 12, 7, 10, 9, 9, 9, 10, 11, 5, 11, 21, 10, 14, 9, 13, 9, 10, 11, 6, 10, 9, 10, 7, 9, 18, 7, 9, 8, 14, 7, 9, 15, 9, 9, 10, 9, 14, 4, 11, 7, 6, 4, 8, 17, 10, 11, 10, 12, 11, 12, 6, 8, 12, 11, 14, 12, 15, 10, 15, 10, 11, 7, 10, 9, 7, 14, 15, 9, 16, 12, 10, 9, 15, 8, 7, 11, 8, 6, 10, 14, 13, 11, 9, 15, 9, 6, 23, 8, 6, 7, 13, 11, 9, 12, 22, 14, 10, 15, 16, 13, 6, 9, 15, 13, 13, 11, 6, 10, 10, 11, 14, 8, 12, 6, 6, 3, 7, 8, 12, 12, 10, 8, 8, 9, 10, 12, 10, 6, 10, 10, 12, 11, 10, 9, 10, 17, 5, 7, 5, 10, 10, 13, 10, 11, 6, 5, 11, 9, 9, 8, 12, 6, 6, 11, 7, 14, 9, 12, 9, 12, 7, 4, 6, 5, 9, 6, 8, 12, 11, 13, 12, 5, 13, 7, 10, 12, 13, 11, 14, 8, 8, 12, 9, 12, 10, 14, 6, 10, 19, 13, 11, 11, 14, 4, 8, 13, 9, 10, 11, 13, 11, 11, 10, 5, 11, 11, 7, 7, 6, 12, 14, 7, 18, 7, 15, 9, 10, 8, 12, 13, 6, 11, 6, 12, 11, 10, 15, 10, 8, 11, 7, 9, 7, 11, 14, 13, 10, 9, 15, 9, 8, 14, 10, 6, 8, 11, 11, 9, 6, 6, 8, 7, 10, 13, 10, 4, 10, 13, 13, 10, 8, 14, 13, 17, 15, 16, 15, 10, 11, 7, 10, 10, 15, 13, 8, 7, 11, 4, 6, 7, 11, 12, 7, 10, 16, 11, 6, 10, 13, 10, 6, 12, 13, 10, 11, 9, 9, 9, 10, 13, 8, 4, 13, 11, 10, 8, 9, 13, 17, 9, 9, 4, 9, 5, 7, 7, 8, 11, 7, 13, 6, 7, 8, 8, 15, 15, 9, 9, 13, 3, 12, 9, 10, 13, 7, 14, 17, 11, 7, 8, 12, 5, 17, 11, 13, 16, 12, 11, 15, 8, 12, 16, 11, 5, 10, 8, 14, 13, 9, 11, 9, 9, 11, 11, 9, 10, 5, 9, 11, 9, 18, 7, 10, 9, 9, 14, 9, 11, 6, 11, 5, 11, 10, 10, 10, 14, 6, 16, 8, 5, 9, 7, 9, 12, 13, 13, 10, 7, 10, 10, 14, 14, 10, 11, 11, 12, 7, 6, 7, 8, 10, 11, 4, 9, 11, 8, 9, 15, 9, 5, 14, 12, 10, 8, 7, 12, 5, 9, 16, 10, 12, 9, 9, 10, 9, 5, 9, 12, 17, 8, 8, 6, 12, 7, 8, 10, 13, 9, 12, 11, 13, 12, 12, 5, 14, 3, 6, 8, 13, 7, 13, 9, 9, 10, 10, 6, 9, 14, 8, 10, 12, 8, 14, 12, 9, 4, 9, 11, 6, 5, 8, 11, 12, 14, 8, 14, 10, 9, 11, 14, 8, 6, 15, 9, 6, 26, 13, 7, 9, 6, 10, 8, 9, 11, 13, 6, 10, 11, 9, 10, 8, 8, 12, 9, 6, 10, 3, 16, 7, 9, 10, 14, 9, 8, 13, 16, 11, 13, 7, 7, 12, 11, 7, 13, 7, 12, 11, 5, 12, 7, 14, 9, 6, 10, 14, 11, 11, 13, 8, 12, 9, 8, 10, 9, 9, 10, 12, 11, 13, 12, 11, 16, 12, 9, 8, 11, 6, 11, 10, 16, 14, 3, 8, 10, 11, 7, 6, 8, 15, 8, 4, 9, 15, 8, 16, 12, 12, 12, 12, 5, 8, 11, 12, 6, 7, 12, 14, 16, 13, 13, 14, 15, 4, 12, 10, 5, 12, 9, 8, 11, 14, 9, 7, 12, 11, 11, 13, 13, 7, 18, 8, 6, 13, 14, 10, 7, 7, 6, 11, 8, 12, 4, 9, 8, 12, 10, 10, 9, 13, 11, 11, 9, 12, 8, 5, 11, 7, 8, 8, 12, 7, 10, 6, 9, 11, 11, 12, 11, 12, 3, 15, 7, 17, 13, 7, 7, 7, 7, 12, 12, 9, 6, 6, 14, 7, 15, 9, 11, 15, 9, 18, 9, 12, 16, 12, 7, 11, 12, 7, 16, 10, 5, 10, 8, 6, 18, 13, 13, 5, 11, 10, 9, 12, 8, 12, 9, 7, 12, 7, 8, 14, 11, 13, 5, 5, 11, 12, 10, 12, 7, 8, 3, 4, 6, 10, 11, 12, 12, 12, 11, 11, 13, 7, 10, 13, 7, 9, 16, 8, 13, 9, 9, 8, 15, 10, 12, 8, 6, 12, 5, 9, 13, 6, 13, 11, 4, 13, 6, 14, 6, 14, 10, 13, 9, 18, 11, 12, 6, 8, 14, 12, 12, 8, 9, 5, 9, 9, 7, 15, 10, 13, 13, 11, 9, 10, 13, 9, 14, 6, 13, 6, 5, 12, 7, 6, 9, 6, 7, 14, 17, 9, 13, 12, 11, 9, 4, 9, 10, 13, 10, 11, 10, 11, 12, 9, 8, 8, 9, 19, 10, 13, 5, 9, 16, 10, 8, 12, 9, 16, 11, 3, 8, 9, 11, 9, 8, 6, 9, 13, 8, 11, 15, 10, 11, 9, 9, 8, 10, 10, 9, 10, 6, 6, 12, 7, 10, 9, 8, 9, 11, 7, 9, 9, 8, 7, 11, 14, 7, 8, 12, 11, 5, 11, 12, 12, 8, 8, 13, 15, 11, 15, 11, 15, 11, 10, 12, 14, 13, 9, 10, 12, 5, 5, 7, 8, 14, 12, 13, 17, 17, 16, 4, 9, 11, 9, 9, 9, 12, 7, 9, 11, 12, 9, 11, 8, 8, 10, 9, 13, 9, 12, 8, 12, 14, 11, 10, 7, 16, 12, 5, 10, 12, 7, 6, 10, 11, 15, 12, 8, 8, 10, 5, 12, 6, 10, 9, 10, 16, 9, 9, 9, 11, 8, 8, 10, 7, 10, 11, 7, 13, 9, 9, 8, 3, 7, 10, 6, 10, 13, 10, 7, 13, 12, 10, 12, 14, 8, 7, 7, 7, 9, 4, 16, 16, 9, 5, 15, 7, 12, 7, 12, 16, 13, 13, 15, 13, 10, 13, 8, 11, 11, 9, 12, 6, 8, 6, 11, 11, 8, 10, 14, 13, 13, 16, 10, 11, 14, 20, 11, 11, 13, 8, 13, 8, 5, 8, 12, 11, 13, 16, 11, 10, 14, 6, 10, 7, 16, 7, 13, 4, 16, 12, 14, 11, 12, 6, 9, 8, 5, 13, 14, 8, 9, 16, 13, 12, 12, 11, 10, 5, 8, 11, 4, 10, 13, 21, 9, 6, 8, 5, 15, 10, 14, 14, 9, 7, 11, 12, 12, 13, 10, 8, 9, 6, 6, 12, 10, 12, 7, 9, 11, 8, 6, 8, 5, 8, 9, 14, 15, 9, 10, 11, 11, 10, 6, 7, 9, 13, 12, 11, 18, 10, 6, 13, 4, 10, 12, 9, 7, 8, 10, 6, 10, 16, 10, 4, 11, 7, 14, 8, 16, 8, 8, 11, 15, 5, 6, 9, 8, 10, 9, 12, 18, 9, 9, 10, 7, 10, 13, 11, 13, 8, 10, 12, 7, 12, 13, 10, 11, 9, 17, 5, 9, 11, 8, 9, 11, 11, 7, 9, 10, 11, 16, 9, 8, 9, 11, 5, 6, 12, 13, 7, 15, 11, 10, 12, 16, 14, 12, 10, 10, 9, 8, 9, 8, 5, 9, 12, 9, 6, 9, 8, 15, 9, 8, 18, 10, 13, 4, 16, 9, 10, 10, 12, 9, 7, 4, 9, 11, 13, 5, 10, 10, 10, 9, 12, 8, 7, 11, 9, 11, 16, 5, 7, 11, 5, 8, 9, 5, 11, 7, 10, 16, 9, 5, 11, 11, 11, 10, 18, 12, 16, 10, 10, 13, 7, 8, 17, 11, 6, 11, 11, 12, 11, 10, 10, 16, 7, 12, 13, 11, 7, 6, 6, 18, 10, 11, 14, 7, 13, 11, 10, 8, 12, 11, 9, 12, 11, 6, 8, 8, 10, 9, 13, 17, 12, 17, 7, 4, 15, 11, 14, 11, 11, 9, 8, 14, 15, 13, 10, 12, 10, 8, 7, 7, 8, 9, 10, 11, 14, 7, 13, 11, 10, 13, 13, 10, 16, 6, 12, 10, 9, 14, 9, 6, 10, 16, 11, 15, 12, 12, 14, 11, 12, 10, 9, 8, 9, 10, 10, 11, 9, 15, 12, 9, 11, 9, 15, 12, 20, 8, 11, 13, 9, 9, 11, 10, 7, 12, 9, 8, 11, 12, 10, 8, 11, 14, 14, 7, 15, 10, 18, 8, 13, 10, 9, 10, 9, 10, 7, 10, 11, 8, 5, 15, 6, 12, 8, 11, 10, 11, 6, 9, 10, 6, 21, 14, 10, 8, 9, 9, 9, 11, 12, 7, 9, 10, 15, 12, 10, 11, 15, 11, 11, 10, 10, 10, 7, 7, 12, 8, 8, 9, 9, 9, 5, 5, 8, 5, 9, 13, 15, 14, 12, 13, 5, 10, 10, 13, 13, 13, 9, 7, 10, 10, 6, 10, 11, 11, 10, 11, 9, 7, 11, 13, 12, 12, 11, 6, 8, 11, 14, 7, 10, 10, 9, 9, 14, 6, 14, 14, 3, 12, 8, 10, 7, 6, 9, 10, 9, 6, 16, 8, 5, 12, 7, 9, 8, 11, 11, 12, 10, 6, 7, 17, 12, 8, 10, 8, 4, 8, 8, 18, 11, 9, 14, 11, 8, 14, 9, 6, 7, 8, 9, 8, 10, 10, 9, 13, 12, 8, 12, 10, 4, 5, 6, 7, 14, 10, 10, 12, 10, 7, 13, 9, 10, 7, 12, 15, 8, 11, 10, 7, 12, 5, 5, 10, 15, 13, 6, 11, 5, 8, 11, 13, 3, 14, 13, 5, 12, 11, 6, 17, 9, 5, 18, 6, 15, 12, 5, 7, 9, 15, 18, 15, 9, 16, 9, 14, 8, 15, 11, 16, 5, 14, 10, 16, 9, 9, 7, 13, 10, 11, 12, 8, 9, 9, 11, 6, 9, 12, 7, 10, 12, 11, 12, 13, 6, 10, 8, 8, 11, 8, 7, 5, 10, 13, 11, 7, 14, 12, 10, 21, 14, 2, 9, 10, 11, 9, 8, 9, 10, 8, 8, 7, 12, 11, 14, 13, 10, 9, 7, 9, 9, 14, 10, 3, 9, 12, 10, 10, 12, 10, 4, 12, 11, 9, 9, 17, 9, 6, 10, 16, 10, 16, 11, 8, 13, 12, 10, 14, 13, 7, 11, 17, 11, 7, 15, 10, 13, 14, 10, 8, 13, 9, 14, 12, 7, 12, 8, 9, 10, 12, 13, 6, 8, 9, 8, 7, 11, 11, 6, 8, 8, 10, 9, 11, 14, 14, 10, 11, 9, 13, 11, 12, 6, 4, 17, 9, 8, 13, 12, 15, 8, 14, 9, 7, 10, 3, 7, 16, 9, 8, 4, 11, 9, 12, 4, 14, 7, 6, 11, 16, 8, 9, 8, 7, 7, 11, 16, 8, 8, 10, 4, 20, 6, 13, 7, 5, 9, 8, 6, 5, 5, 8, 12, 7, 7, 13, 13, 11, 12, 8, 13, 12, 14, 9, 10, 6, 9, 15, 10, 8, 10, 7, 9, 6, 12, 7, 17, 3, 8, 15, 12, 14, 9, 9, 5, 8, 8, 14, 8, 9, 13, 12, 10, 10, 11, 15, 8, 11, 16, 16, 13, 5, 10, 11, 9, 5, 7, 9, 13, 12, 11, 6, 13, 15, 8, 15, 10, 14, 9, 11, 13, 12, 10, 5, 8, 7, 5, 11, 13, 9, 10, 10, 7, 12, 9, 13, 9, 15, 10, 7, 11, 11, 5, 13, 4, 7, 13, 8, 11, 12, 14, 16, 11, 8, 11, 11, 12, 9, 9, 8, 6, 4, 14, 6, 7, 11, 11, 12, 12, 10, 18, 12, 11, 10, 8, 10, 9, 12, 11, 12, 12, 6, 9, 7, 14, 14, 10, 14, 6, 17, 13, 10, 8, 9, 8, 13, 13, 8, 13, 7, 10, 8, 10, 8, 10, 9, 10, 8, 8, 10, 10, 12, 10, 3, 7, 13, 10, 10, 8, 15, 5, 10, 11, 11, 12, 12, 11, 13, 20, 9, 11, 5, 5, 12, 10, 10, 12, 5, 10, 6, 7, 5, 12, 9, 8, 8, 9, 14, 7, 5, 8, 9, 14, 13, 15, 10, 10, 13, 10, 7, 7, 6, 14, 12, 12, 7, 13, 7, 16, 6, 9, 14, 11, 5, 12, 10, 7, 9, 6, 20, 14, 15, 7, 13, 7, 7, 12, 9, 11, 11, 13, 10, 12, 13, 17, 16, 9, 11, 9, 9, 11, 6, 10, 8, 9, 8, 8, 9, 11, 17, 13, 10, 12, 10, 13, 6, 2, 14, 10, 11, 8, 9, 12, 8, 9, 6, 8, 10, 10, 12, 12, 12, 10, 10, 8, 8, 12, 9, 3, 9, 2, 15, 14, 12, 11, 10, 11, 10, 11, 11, 9, 6, 15, 6, 11, 10, 12, 12, 14, 11, 6, 11, 12, 9, 13, 6, 14, 5, 6, 6, 8, 4, 12, 9, 8, 9, 10, 8, 9, 5, 9, 5, 10, 10, 10, 11, 10, 9, 8, 8, 12, 14, 11, 10, 4, 11, 15, 11, 7, 14, 9, 18, 11, 9, 12, 15, 11, 10, 9, 7, 8, 8, 9, 8, 7, 12, 12, 10, 12, 10, 12, 10, 13, 11, 13, 18, 9, 17, 17, 10, 10, 12, 9, 7, 5, 6, 13, 12, 11, 12, 15, 5, 10, 9, 10, 4, 12, 6, 12, 10, 11, 10, 11, 11, 12, 5, 12, 10, 8, 4, 4, 5, 14, 12, 11, 10, 13, 4, 9, 14, 13, 12, 15, 13, 11, 10, 13, 10, 12, 11, 6, 19, 9, 10, 6, 9, 8, 9, 4, 13, 7, 12, 6, 11, 12, 15, 14, 10, 8, 5, 10, 10, 7, 10, 7, 6, 9, 16, 10, 15, 13, 16, 12, 10, 9, 10, 8, 11, 11, 11, 6, 5, 13, 10, 10, 7, 14, 12, 7, 12, 12, 7, 13, 9, 8, 5, 11, 10, 10, 9, 7, 10, 15, 10, 15, 14, 4, 7, 10, 9, 13, 13, 7, 5, 11, 5, 8, 18, 9, 6, 10, 10, 12, 7, 8, 16, 11, 9, 9, 10, 11, 8, 9, 6, 8, 9, 5, 5, 10, 13, 9, 11, 7, 14, 10, 13, 7, 3, 11, 12, 9, 8, 9, 7, 13, 10, 9, 11, 8, 13, 12, 11, 12, 6, 10, 7, 10, 8, 11, 9, 12, 12, 10, 7, 13, 7, 13, 9, 8, 10, 14, 14, 7, 21, 8, 4, 9, 10, 5, 10, 10, 9, 10, 18, 5, 5, 11, 7, 7, 7, 9, 12, 9, 12, 11, 11, 15, 8, 11, 5, 15, 12, 8, 8, 9, 11, 11, 6, 15, 11, 10, 15, 7, 10, 9, 3, 12, 8, 13, 10, 8, 11, 9, 10, 5, 8, 10, 15, 7, 8, 9, 9, 12, 4, 8, 6, 10, 7, 11, 13, 6, 7, 9, 8, 13, 9, 12, 10, 8, 3, 9, 14, 8, 9, 8, 10, 9, 8, 12, 7, 9, 9, 12, 8, 7, 11, 11, 12, 19, 11, 21, 9, 8, 10, 6, 6, 10, 3, 10, 8, 9, 12, 7, 15, 13, 8, 12, 10, 18, 9, 3, 8, 13, 9, 10, 8, 12, 12, 10, 8, 15, 6, 10, 10, 6, 10, 12, 7, 14, 8, 8, 12, 11, 7, 14, 10, 11, 9, 6, 6, 9, 9, 10, 6, 12, 6, 13, 10, 20, 7, 9, 11, 3, 7, 14, 7, 12, 3, 11, 14, 7, 8, 4, 12, 10, 9, 13, 10, 10, 12, 8, 9, 6, 6, 12, 13, 6, 3, 12, 13, 8, 9, 13, 8, 4, 14, 10, 11, 11, 11, 11, 8, 10, 17, 11, 10, 10, 6, 13, 8, 10, 15, 16, 9, 9, 9, 10, 16, 7, 14, 9, 9, 9, 8, 4, 11, 10, 12, 4, 10, 9, 13, 10, 8, 6, 11, 6, 10, 11, 19, 10, 15, 6, 13, 10, 14, 8, 5, 8, 9, 9, 12, 9, 6, 8, 11, 6, 6, 13, 7, 13, 4, 14, 8, 18, 5, 9, 9, 2, 11, 11, 10, 11, 10, 11, 3, 10, 12, 17, 3, 11, 13, 17, 14, 5, 4, 11, 10, 8, 12, 19, 12, 11, 17, 8, 8, 9, 10, 6, 10, 10, 11, 5, 10, 13, 16, 10, 11, 9, 12, 9, 11, 9, 5, 8, 5, 17, 9, 11, 8, 13, 6, 11, 9, 9, 7, 8, 9, 11, 14, 6, 14, 10, 12, 9, 9, 5, 12, 11, 12, 11, 15, 10, 15, 13, 14, 2, 10, 10, 13, 9, 10, 11, 8, 13, 10, 10, 8, 10, 11, 6, 7, 7, 11, 6, 11, 12, 12, 8, 16, 15, 10, 12, 10, 7, 11, 7, 12, 7, 18, 6, 12, 8, 6, 12, 12, 8, 7, 12, 12, 13, 9, 14, 15, 14, 9, 8, 10, 17, 15, 11, 13, 10, 8, 2, 7, 7, 3, 1, 5, 7, 13, 12, 12, 14, 12, 11, 10, 9, 8, 16, 7, 9, 10, 8, 12, 13, 13, 11, 9, 7, 7, 10, 7, 9, 11, 11, 9, 11, 12, 14, 14, 13, 5, 8, 13, 13, 9, 11, 11, 9, 8, 10, 9, 13, 5, 11, 12, 11, 8, 9, 7, 8, 11, 9, 9, 11, 12, 10, 11, 10, 14, 15, 16, 12, 16, 15, 18, 5, 9, 10, 14, 10, 9, 8, 14, 12, 5, 15, 11, 8, 10, 10, 11, 12, 12, 7, 11, 9, 16, 14, 11, 7, 6, 11, 11, 4, 10, 11, 11, 11, 6, 9, 12, 15, 7, 13, 9, 8, 14, 12, 6, 10, 15, 10, 10, 9, 11, 9, 9, 10, 7, 11, 11, 16, 13, 9, 6, 7, 14, 9, 9, 6, 14, 9, 8, 12, 9, 4, 12, 10, 13, 7, 9, 11, 14, 11, 7, 10, 9, 13, 12, 8, 15, 6, 9, 16, 12, 13, 8, 11, 6, 7, 10, 14, 12, 11, 11, 9, 9, 12, 7, 11, 11, 9, 3, 10, 7, 11, 11, 10, 12, 11, 13, 5, 7, 15, 10, 9, 10, 8, 13, 17, 16, 8, 12, 9, 8, 11, 8, 6, 15, 7, 8, 15, 9, 10, 4, 8, 14, 13, 10, 12, 6, 9, 12, 8, 12, 9, 10, 5, 12, 14, 14, 10, 15, 12, 7, 15, 11, 18, 8, 6, 9, 8, 14, 4, 13, 5, 9, 11, 3, 11, 13, 9, 8, 9, 12, 13, 13, 16, 10, 10, 10, 7, 10, 9, 13, 13, 8, 12, 7, 12, 8, 8, 16, 10, 12, 7, 6, 15, 8, 7, 10, 7, 6, 10, 9, 7, 14, 13, 17, 11, 15, 8, 11, 16, 7, 5, 14, 9, 11, 10, 7, 6, 8, 12, 8, 8, 12, 11, 20, 14, 13, 8, 11, 12, 6, 11, 8, 11, 12, 7, 12, 6, 8, 8, 13, 11, 11, 5, 8, 10, 5, 7, 15, 12, 12, 8, 6, 10, 8, 8, 6, 17, 6, 7, 14, 13, 19, 19, 9, 13, 16, 8, 16, 12, 8, 7, 12, 12, 11, 12, 11, 10, 12, 10, 12, 8, 11, 7, 7, 13, 9, 10, 10, 14, 4, 9, 14, 6, 3, 14, 9, 4, 9, 3, 11, 5, 8, 7, 11, 7, 11, 11, 14, 12, 12, 14, 8, 16, 8, 13, 4, 7, 5, 12, 15, 9, 13, 9, 9, 14, 8, 7, 14, 9, 6, 8, 8, 6, 14, 13, 11, 3, 11, 8, 9, 8, 6, 10, 8, 16, 12, 15, 7, 13, 6, 7, 9, 12, 10, 8, 9, 14, 11, 11, 12, 15, 6, 11, 10, 12, 12, 8, 7, 13, 18, 17, 10, 3, 13, 9, 17, 14, 12, 10, 11, 10, 14, 10, 11, 13, 3, 10, 12, 4, 10, 7, 8, 9, 15, 11, 11, 5, 8, 6, 10, 8, 11, 12, 10, 15, 9, 5, 11, 12, 9, 6, 11, 14, 9, 14, 8, 10, 11, 9, 10, 12, 11, 7, 15, 7, 13, 13, 12, 11, 11, 16, 12, 10, 5, 8, 10, 12, 11, 10, 8, 11, 8, 13, 12, 12, 12, 10, 17, 9, 9, 10, 13, 7, 10, 15, 6, 8, 12, 18, 11, 13, 10, 7, 14, 8, 10, 9, 9, 7, 8, 2, 7, 14, 14, 10, 6, 14, 6, 11, 10, 7, 8, 9, 6, 11, 12, 11, 11, 9, 9, 7, 12, 11, 7, 7, 15, 7, 19, 10, 11, 10, 17, 10, 7, 11, 9, 16, 13, 8, 8, 10, 11, 8, 12, 9, 7, 9, 10, 9, 13, 10, 11, 7, 9, 13, 7, 12, 14, 9, 9, 12, 8, 9, 16, 13, 9, 8, 10, 11, 12, 8, 7, 9, 7, 9, 9, 8, 6, 4, 10, 16, 11, 11, 13, 9, 15, 12, 12, 10, 8, 6, 10, 12, 11, 10, 16, 13, 12, 10, 14, 11, 8, 7, 8, 10, 7, 9, 17, 9, 15, 9, 13, 11, 6, 12, 11, 14, 12, 9, 5, 10, 12, 9, 5, 4, 16, 13, 11, 3, 11, 9, 9, 14, 12, 10, 13, 10, 7, 11, 15, 3, 7, 13, 11, 11, 12, 16, 8, 10, 16, 5, 9, 9, 12, 14, 13, 10, 10, 7, 10, 6, 14, 6, 5, 9, 13, 11, 9, 10, 11, 9, 8, 9, 10, 6, 14, 10, 7, 8, 12, 15, 12, 11, 6, 9, 16, 12, 6, 5, 7, 11, 11, 10, 10, 16, 6, 9, 8, 10, 12, 12, 11, 9, 11, 10, 19, 8, 9, 5, 5, 9, 12, 8, 8, 2, 13, 11, 12, 7, 11, 13, 11, 14, 9, 11, 10, 9, 9, 13, 9, 13, 13, 7, 10, 9, 11, 11, 6, 17, 9, 9, 8, 6, 8, 10, 9, 8, 15, 7, 6, 15, 12, 8, 18, 12, 12, 11, 14, 13, 11, 10, 9, 8, 9, 6, 9, 8, 19, 8, 16, 13, 7, 10, 12, 11, 4, 10, 8, 3, 10, 22, 8, 7, 6, 10, 15, 5, 17, 10, 7, 11, 7, 13, 8, 5, 9, 13, 7, 8, 10, 12, 9, 8, 13, 8, 9, 9, 13, 9, 15, 15, 10, 13, 8, 12, 6, 9, 7, 9, 13, 10, 17, 8, 8, 5, 13, 8, 12, 9, 9, 10, 10, 12, 6, 8, 10, 14, 11, 8, 9, 7, 7, 11, 5, 13, 10, 14, 9, 9, 7, 14, 10, 10, 9, 7, 7, 9, 12, 6, 13, 7, 10, 12, 11, 5, 16, 7, 12, 8, 17, 10, 12, 11, 14, 15, 11, 11, 9, 10, 9, 10, 13, 11, 9, 11, 12, 10, 8, 15, 8, 5, 15, 10, 5, 10, 9, 18, 9, 6, 10, 12, 13, 8, 8, 11, 13, 13, 7, 9, 5, 8, 9, 12, 10, 13, 13, 5, 15, 10, 11, 10, 6, 12, 14, 5, 8, 14, 6, 25, 8, 5, 8, 9, 8, 14, 15, 7, 10, 11, 12, 8, 10, 13, 11, 17, 13, 10, 8, 12, 7, 15, 8, 13, 9, 9, 10, 7, 15, 8, 9, 13, 5, 14, 11, 13, 11, 11, 7, 9, 7, 7, 9, 13, 15, 12, 8, 4, 12, 11, 5, 14, 9, 9, 11, 6, 8, 6, 6, 18, 13, 12, 10, 15, 11, 8, 7, 17, 6, 12, 8, 14, 7, 7, 6, 12, 7, 8, 13, 13, 15, 11, 15, 13, 7, 8, 8, 12, 6, 14, 15, 12, 3, 10, 13, 13, 9, 9, 9, 11, 9, 15, 9, 8, 12, 14, 8, 9, 10, 8, 9, 12, 14, 8, 10, 7, 12, 10, 13, 9, 13, 13, 9, 10, 15, 17, 11, 11, 11, 16, 17, 5, 9, 11, 9, 14, 6, 15, 16, 13, 12, 14, 9, 15, 8, 12, 11, 12, 9, 11, 3, 5, 9, 11, 9, 14, 11, 14, 17, 12, 10, 7, 13, 9, 7, 6, 9, 8, 10, 18, 7, 14, 15, 12, 3, 8, 18, 10, 5, 10, 20, 10, 9, 10, 7, 10, 15, 12, 7, 14, 15, 7, 14, 10, 12, 2, 6, 7, 14, 17, 12, 11, 3, 7, 10, 7, 10, 16, 8, 9, 11, 11, 14, 9, 7, 12, 10, 13, 12, 13, 10, 13, 9, 6, 8, 8, 13, 4, 11, 11, 6, 12, 7, 7, 13, 12, 9, 17, 11, 10, 12, 10, 13, 9, 10, 8, 10, 14, 8, 16, 17, 12, 14, 9, 7, 8, 12, 12, 12, 12, 12, 9, 12, 9, 6, 12, 8, 7, 14, 7, 13, 15, 9, 11, 11, 9, 14, 6, 10, 13, 15, 14, 11, 8, 13, 16, 9, 12, 5, 10, 4, 11, 9, 9, 9, 11, 12, 13, 14, 7, 10, 12, 6, 7, 11, 8, 15, 13, 9, 17, 13, 10, 10, 11, 15, 13, 10, 8, 9, 10, 8, 6, 16, 16, 11, 11, 3, 13, 11, 6, 8, 6, 5, 7, 8, 14, 9, 14, 8, 9, 10, 12, 13, 15, 9, 13, 12, 9, 9, 9, 16, 14, 16, 9, 6, 12, 8, 8, 12, 8, 12, 15, 7, 8, 16, 12, 8, 12, 14, 8, 10, 15, 10, 15, 14, 14, 10, 10, 9, 6, 13, 14, 13, 11, 13, 10, 13, 12, 7, 11, 6, 9, 12, 12, 15, 3, 8, 11, 12, 14, 11, 6, 6, 10, 10, 14, 11, 8, 15, 11, 7, 2, 9, 7, 12, 6, 8, 11, 10, 13, 7, 13, 6, 8, 6, 8, 14, 9, 8, 9, 11, 7, 9, 6, 4, 13, 6, 12, 9, 11, 10, 6, 11, 4, 13, 13, 12, 9, 9, 10, 12, 12, 11, 10, 17, 7, 13, 10, 11, 10, 11, 9, 10, 10, 14, 9, 10, 9, 8, 12, 13, 7, 9, 11, 10, 7, 11, 10, 9, 15, 14, 16, 8, 8, 7, 8, 7, 16, 13, 8, 8, 13, 6, 8, 12, 12, 13, 13, 9, 7, 5, 6, 10, 11, 8, 9, 14, 6, 10, 4, 10, 11, 6, 5, 6, 14, 14, 21, 8, 5, 9, 11, 11, 9, 8, 12, 8, 10, 7, 6, 7, 9, 4, 13, 11, 10, 11, 6, 10, 13, 13, 8, 8, 12, 11, 16, 19, 10, 8, 11, 15, 14, 16, 9, 13, 12, 12, 11, 3, 11, 10, 14, 12, 8, 14, 10, 12, 11, 16, 18, 18, 14, 7, 12, 9, 13, 6, 8, 8, 3, 11, 9, 8, 8, 7, 15, 12, 14, 10, 9, 12, 6, 13, 11, 13, 9, 9, 11, 12, 9, 13, 8, 16, 8, 13, 8, 11, 8, 10, 8, 11, 7, 11, 8, 4, 9, 8, 7, 15, 12, 14, 11, 12, 4, 11, 12, 8, 8, 8, 8, 10, 7, 14, 4, 7, 11, 8, 9, 9, 8, 9, 14, 14, 10, 13, 9, 8, 14, 11, 11, 13, 4, 19, 7, 9, 7, 8, 7, 10, 19, 9, 7, 10, 9, 10, 12, 9, 11, 13, 9, 8, 13, 7, 13, 7, 16, 5, 5, 13, 6, 17, 8, 11, 9, 16, 10, 11, 7, 11, 7, 6, 14, 9, 10, 7, 18, 3, 6, 14, 8, 14, 15, 15, 14, 14, 16, 6, 14, 10, 11, 19, 12, 8, 6, 14, 13, 12, 10, 9, 11, 11, 14, 15, 8, 7, 12, 10, 6, 6, 9, 13, 6, 8, 12, 16, 11, 13, 8, 12, 7, 19, 7, 11, 10, 14, 15, 11, 14, 8, 10, 5, 11, 12, 9, 8, 6, 13, 10, 7, 9, 12, 12, 10, 12, 10, 8, 10, 8, 16, 7, 11, 5, 10, 8, 11, 6, 7, 13, 9, 9, 19, 16, 15, 13, 14, 8, 10, 7, 6, 11, 10, 6, 9, 5, 12, 9, 9, 13, 15, 7, 16, 10, 11, 11, 14, 9, 12, 14, 8, 11, 11, 11, 8, 9, 7, 7, 6, 11, 12, 9, 7, 11, 6, 9, 9, 9, 9, 17, 7, 12, 9, 12, 10, 11, 9, 6, 9, 10, 10, 13, 5, 11, 6, 17, 12, 8, 15, 9, 12, 12, 9, 9, 16, 8, 11, 8, 13, 10, 7, 9, 12, 10, 8, 10, 5, 10, 13, 11, 7, 10, 13, 11, 12, 11, 16, 16, 10, 8, 13, 9, 8, 13, 11, 9, 10, 9, 8, 8, 9, 7, 5, 8, 13, 11, 9, 15, 14, 13, 10, 11, 11, 14, 4, 14, 9, 11, 11, 9, 10, 12, 6, 3, 11, 8, 12, 7, 14, 12, 12, 15, 4, 8, 14, 10, 7, 9, 13, 11, 8, 8, 10, 8, 6, 11, 13, 9, 10, 11, 9, 11, 5, 7, 10, 11, 10, 4, 14, 15, 13, 15, 9, 3, 8, 10, 7, 16, 4, 10, 10, 8, 7, 10, 11, 6, 9, 8, 13, 13, 6, 9, 8, 11, 6, 14, 11, 13, 15, 4, 15, 7, 5, 7, 9, 11, 7, 11, 11, 12, 7, 11, 9, 17, 3, 11, 11, 8, 13, 16, 10, 15, 6, 9, 8, 9, 11, 11, 16, 11, 8, 8, 9, 7, 14, 13, 16, 6, 14, 11, 10, 11, 12, 12, 12, 9, 10, 8, 10, 10, 12, 14, 11, 11, 15, 10, 8, 10, 9, 10, 17, 8, 11, 9, 9, 11, 9, 15, 5, 15, 8, 18, 4, 10, 15, 14, 12, 10, 11, 10, 5, 8, 6, 5, 6, 14, 7, 5, 14, 9, 13, 16, 10, 8, 10, 17, 11, 9, 11, 12, 10, 13, 6, 6, 12, 7, 7, 6, 9, 12, 6, 10, 9, 11, 11, 8, 10, 8, 18, 12, 8, 15, 9, 15, 9, 9, 6, 9, 8, 13, 10, 12, 13, 10, 11, 13, 16, 6, 9, 8, 11, 12, 5, 7, 7, 8, 12, 13, 10, 9, 14, 10, 6, 10, 7, 11, 8, 8, 12, 9, 11, 9, 14, 10, 8, 12, 13, 8, 10, 11, 10, 15, 12, 9, 13, 13, 11, 6, 18, 14, 8, 12, 17, 13, 9, 4, 8, 12, 17, 4, 9, 11, 12, 9, 7, 8, 10, 7, 11, 14, 10, 7, 12, 14, 10, 9, 6, 8, 9, 11, 12, 12, 11, 12, 11, 11, 7, 8, 10, 14, 6, 10, 8, 7, 7, 9, 15, 9, 5, 11, 9, 8, 13, 14, 9, 8, 16, 5, 13, 9, 5, 8, 9, 8, 16, 8, 12, 8, 12, 10, 13, 7, 10, 8, 4, 9, 10, 10, 10, 13, 13, 8, 14, 15, 13, 14, 12, 9, 11, 5, 5, 5, 9, 13, 10, 11, 8, 11, 8, 17, 12, 9, 8, 12, 11, 15, 10, 10, 4, 17, 10, 8, 12, 12, 12, 10, 6, 11, 3, 14, 4, 16, 8, 9, 6, 9, 8, 16, 8, 13, 9, 9, 16, 13, 6, 14, 12, 10, 6, 16, 9, 7, 9, 8, 9, 7, 7, 5, 8, 11, 8, 11, 8, 6, 11, 4, 9, 11, 13, 12, 8, 12, 7, 10, 9, 5, 10, 10, 5, 6, 9, 11, 9, 13, 10, 5, 12, 13, 9, 7, 11, 14, 9, 10, 10, 12, 8, 8, 11, 8, 9, 6, 7, 8, 10, 18, 14, 4, 7, 13, 10, 10, 9, 8, 6, 9, 6, 17, 12, 9, 11, 13, 10, 11, 10, 8, 15, 11, 11, 7, 7, 9, 6, 6, 10, 11, 9, 7, 18, 15, 5, 10, 11, 8, 13, 10, 12, 11, 8, 14, 8, 13, 6, 8, 13, 14, 12, 5, 10, 9, 15, 9, 7, 8, 7, 10, 9, 13, 11, 8, 12, 12, 9, 10, 10, 4, 9, 10, 10, 9, 13, 12, 16, 12, 9, 7, 11, 7, 8, 10, 10, 9, 7, 14, 16, 9, 10, 13, 12, 16, 13, 16, 5, 6, 10, 13, 10, 11, 11, 11, 15, 7, 11, 12, 14, 13, 7, 7, 11, 10, 12, 11, 11, 8, 9, 6, 9, 9, 11, 12, 6, 9, 9, 12, 6, 9, 6, 9, 10, 16, 9, 8, 8, 7, 13, 10, 14, 6, 12, 12, 9, 12, 9, 11, 9, 9, 10, 11, 6, 12, 10, 8, 10, 7, 15, 10, 12, 17, 13, 6, 10, 7, 8, 6, 15, 9, 17, 9, 14, 14, 4, 11, 11, 12, 8, 12, 11, 10, 9, 7, 10, 7, 8, 11, 17, 13, 13, 10, 14, 10, 9, 8, 15, 9, 7, 12, 10, 9, 16, 13, 11, 6, 6, 8, 9, 7, 13, 9, 9, 4, 5, 15, 12, 9, 8, 6, 10, 9, 10, 9, 6, 13, 12, 5, 12, 11, 11, 10, 13, 8, 11, 11, 14, 10, 10, 5, 4, 12, 7, 9, 9, 10, 12, 11, 7, 8, 13, 8, 12, 11, 12, 5, 13, 6, 10, 9, 11, 11, 9, 9, 8, 6, 6, 5, 6, 12, 8, 9, 15, 14, 7, 7, 6, 10, 9, 17, 12, 7, 6, 12, 10, 7, 10, 17, 16, 12, 11, 12, 11, 11, 6, 11, 10, 8, 11, 5, 13, 7, 12, 10, 12, 13, 15, 10, 8, 5, 9, 2, 14, 4, 14, 6, 11, 14, 12, 13, 9, 6, 16, 11, 6, 9, 8, 10, 10, 4, 7, 7, 6, 10, 6, 11, 12, 13, 5, 3, 12, 10, 17, 12, 11, 10, 9, 12, 16, 18, 7, 11, 6, 9, 12, 12, 15, 11, 8, 10, 15, 8, 12, 12, 9, 11, 13, 15, 10, 11, 12, 15, 12, 11, 8, 11, 12, 17, 9, 15, 10, 7, 5, 11, 5, 12, 10, 13, 13, 15, 13, 8, 5, 14, 5, 13, 12, 6, 9, 9, 9, 5, 15, 12, 9, 11, 6, 10, 5, 7, 11, 8, 10, 8, 14, 13, 11, 8, 5, 11, 17, 9, 12, 17, 13, 8, 9, 15, 7, 7, 6, 12, 14, 10, 10, 11, 4, 6, 9, 13, 8, 13, 9, 15, 8, 12, 8, 7, 12, 6, 9, 12, 16, 6, 8, 10, 6, 10, 8, 10, 11, 8, 14, 7, 8, 8, 12, 14, 5, 7, 11, 8, 11, 13, 11, 15, 12, 7, 15, 10, 10, 12, 6, 12, 9, 11, 7, 7, 9, 9, 8, 9, 8, 8, 7, 12, 14, 8, 11, 10, 10, 13, 8, 4, 13, 9, 11, 6, 12, 7, 6, 7, 11, 10, 5, 9, 13, 12, 10, 12, 16, 12, 12, 10, 11, 15, 11, 9, 11, 12, 15, 8, 11, 9, 12, 14, 14, 9, 5, 10, 8, 10, 16, 7, 13, 11, 8, 7, 8, 4, 14, 13, 13, 13, 15, 11, 7, 7, 9, 7, 7, 14, 8, 11, 11, 9, 8, 12, 8, 8, 7, 5, 11, 15, 8, 9, 10, 9, 9, 14, 12, 5, 11, 13, 6, 4, 5, 12, 11, 9, 13, 14, 6, 11, 5, 6, 3, 4, 14, 5, 10, 11, 10, 12, 14, 7, 12, 12, 7, 8, 10, 12, 12, 9, 9, 19, 5, 9, 11, 9, 12, 10, 9, 6, 8, 8, 11, 14, 4, 13, 9, 7, 6, 10, 7, 7, 6, 10, 7, 8, 11, 14, 16, 11, 11, 13, 14, 11, 6, 5, 13, 8, 10, 11, 7, 9, 15, 5, 14, 7, 9, 9, 14, 11, 10, 11, 7, 10, 5, 9, 13, 3, 13, 6, 19, 14, 15, 13, 7, 14, 10, 6, 9, 11, 7, 7, 13, 10, 9, 5, 11, 19, 12, 7, 12, 11, 8, 14, 13, 8, 10, 8, 9, 19, 8, 6, 7, 20, 6, 13, 9, 8, 9, 9, 15, 12, 8, 8, 5, 10, 7, 6, 8, 11, 12, 12, 9, 8, 10, 6, 12, 12, 12, 13, 12, 8, 13, 9, 7, 10, 12, 12, 18, 3, 15, 13, 12, 15, 12, 13, 10, 11, 11, 12, 8, 14, 14, 10, 4, 9, 7, 11, 13, 10, 12, 11, 9, 12, 7, 14, 10, 12, 11, 11, 11, 11, 10, 13, 10, 4, 8, 8, 15, 8, 11, 12, 8, 10, 8, 10, 10, 5, 9, 5, 10, 9, 18, 13, 12, 13, 7, 6, 4, 9, 11, 10, 11, 9, 20, 7, 9, 6, 10, 7, 7, 12, 10, 13, 9, 6, 12, 12, 16, 12, 9, 11, 6, 6, 8, 9, 17, 9, 10, 8, 8, 11, 13, 16, 13, 8, 9, 13, 10, 8, 8, 9, 7, 8, 6, 13, 9, 7, 9, 12, 11, 9, 7, 10, 7, 11, 9, 16, 15, 11, 8, 7, 8, 10, 13, 10, 10, 14, 11, 18, 8, 9, 14, 12, 13, 8, 5, 8, 4, 13, 16, 13, 9, 15, 15, 6, 12, 7, 8, 16, 5, 9, 8, 6, 8, 15, 11, 9, 6, 11, 10, 11, 6, 9, 8, 9, 9, 6, 7, 13, 8, 10, 10, 12, 11, 5, 9, 9, 11, 14, 7, 3, 8, 11, 13, 9, 8, 11, 9, 13, 8, 10, 7, 10, 10, 10, 9, 6, 8, 9, 7, 15, 11, 10, 6, 6, 7, 9, 19, 9, 6, 11, 8, 12, 15, 14, 11, 6, 7, 5, 11, 13, 8, 13, 9, 12, 13, 7, 8, 10, 11, 9, 10, 8, 9, 6, 17, 9, 8, 7, 13, 14, 10, 10, 15, 8, 10, 9, 9, 7, 7, 8, 9, 12, 8, 7, 11, 10, 4, 11, 9, 11, 8, 7, 7, 8, 8, 11, 9, 6, 8, 8, 15, 12, 3, 10, 8, 14, 8, 7, 9, 7, 11, 7, 14, 9, 12, 14, 7, 11, 11, 18, 12, 10, 4, 6, 7, 12, 10, 3, 10, 13, 7, 9, 10, 5, 4, 14, 19, 13, 16, 11, 5, 15, 7, 10, 9, 17, 12, 15, 10, 11, 13, 11, 7, 10, 4, 11, 11, 8, 7, 11, 12, 10, 16, 11, 12, 15, 11, 12, 10, 6, 6, 7, 10, 11, 9, 9, 9, 10, 12, 5, 5, 7, 8, 7, 10, 13, 6, 5, 9, 8, 11, 9, 12, 8, 9, 15, 13, 10, 14, 10, 12, 17, 11, 7, 6, 7, 11, 11, 8, 7, 9, 13, 19, 5, 13, 9, 9, 7, 9, 9, 11, 11, 11, 11, 9, 15, 12, 6, 13, 5, 13, 17, 11, 9, 10, 12, 6, 14, 10, 12, 9, 9, 8, 15, 12, 6, 5, 12, 13, 13, 10, 10, 8, 5, 14, 9, 10, 10, 7, 11, 7, 8, 9, 12, 10, 11, 13, 15, 10, 14, 11, 11, 9, 11, 15, 11, 9, 12, 11, 13, 11, 9, 7, 9, 11, 8, 15, 10, 9, 8, 9, 6, 9, 12, 16, 12, 14, 8, 11, 10, 15, 7, 6, 7, 11, 10, 7, 15, 12, 13, 8, 5, 11, 8, 9, 10, 13, 10, 15, 8, 17, 11, 18, 12, 17, 10, 8, 6, 14, 11, 11, 11, 3, 6, 14, 17, 11, 11, 7, 14, 5, 7, 11, 6, 11, 8, 7, 16, 5, 7, 6, 12, 11, 13, 9, 14, 14, 9, 12, 11, 12, 9, 9, 8, 16, 10, 4, 8, 8, 10, 5, 6, 18, 15, 6, 12, 12, 4, 7, 7, 14, 10, 14, 5, 10, 10, 13, 16, 9, 12, 5, 10, 12, 10, 15, 5, 12, 6, 10, 12, 11, 8, 10, 9, 13, 7, 9, 10, 11, 11, 10, 11, 11, 12, 9, 13, 5, 14, 8, 6, 9, 16, 11, 10, 11, 12, 15, 14, 12, 14, 9, 13, 3, 6, 3, 12, 9, 10, 9, 16, 5, 12, 8, 12, 9, 11, 9, 5, 17, 10, 8, 7, 11, 9, 3, 10, 19, 15, 16, 10, 11, 8, 11, 7, 10, 13, 8, 8, 6, 9, 10, 13, 13, 13, 8, 12, 9, 14, 9, 10, 8, 14, 10, 10, 6, 12, 12, 12, 10, 9, 8, 17, 10, 10, 4, 12, 5, 10, 9, 9, 8, 8, 7, 12, 16, 14, 14, 5, 7, 5, 9, 10, 14, 7, 9, 13, 7, 20, 11, 6, 11, 12, 18, 12, 10, 13, 17, 13, 10, 8, 12, 12, 7, 5, 6, 13, 11, 8, 6, 7, 8, 9, 9, 15, 7, 16, 7, 6, 10, 10, 14, 9, 8, 9, 13, 15, 9, 15, 10, 6, 11, 2, 8, 9, 8, 16, 10, 12, 8, 8, 10, 7, 8, 10, 9, 10, 7, 11, 11, 13, 11, 9, 7, 12, 9, 8, 6, 11, 4, 15, 13, 14, 7, 10, 9, 12, 10, 7, 18, 12, 6, 6, 7, 12, 14, 13, 10, 10, 8, 9, 7, 8, 11, 6, 3, 7, 7, 11, 10, 11, 9, 8, 8, 9, 9, 12, 17, 4, 12, 9, 7, 12, 16, 11, 8, 7, 11, 11, 7, 12, 11, 13, 10, 11, 12, 8, 10, 13, 12, 11, 12, 11, 20, 10, 16, 8, 12, 14, 12, 11, 8, 12, 7, 6, 9, 11, 8, 10, 10, 9, 12, 19, 13, 6, 13, 14, 15, 8, 6, 9, 12, 8, 8, 9, 13, 6, 13, 14, 9, 13, 6, 11, 11, 10, 4, 14, 11, 11, 7, 10, 14, 10, 9, 12, 9, 11, 12, 9, 9, 9, 10, 12, 8, 9, 13, 3, 8, 7, 8, 11, 8, 14, 8, 13, 7, 9, 10, 15, 11, 6, 7, 7, 10, 13, 9, 5, 9, 9, 3, 13, 11, 11, 11, 7, 10, 6, 12, 10, 8, 7, 14, 10, 13, 7, 6, 9, 11, 10, 8, 5, 9, 6, 4, 9, 12, 7, 8, 11, 8, 12, 6, 7, 13, 12, 9, 10, 14, 14, 10, 11, 9, 12, 13, 13, 8, 12, 15, 14, 17, 18, 13, 8, 17, 7, 15, 7, 10, 8, 8, 15, 12, 7, 8, 13, 8, 14, 7, 12, 9, 11, 7, 9, 9, 13, 5, 12, 7, 7, 11, 9, 9, 11, 11, 9, 7, 11, 12, 6, 8, 10, 1, 8, 8, 11, 12, 11, 12, 17, 17, 9, 8, 11, 9, 3, 9, 12, 6, 9, 5, 5, 15, 12, 6, 9, 7, 14, 12, 5, 13, 8, 11, 5, 9, 11, 12, 6, 9, 8, 11, 10, 11, 13, 12, 7, 10, 10, 10, 9, 5, 11, 12, 8, 10, 11, 10, 8, 12, 11, 6, 8, 13, 13, 9, 7, 9, 10, 13, 7, 8, 7, 10, 8, 10, 6, 12, 4, 14, 16, 13, 19, 17, 14, 2, 9, 12, 11, 14, 10, 10, 9, 13, 9, 11, 18, 6, 12, 8, 13, 15, 9, 6, 7, 12, 7, 11, 14, 7, 14, 9, 12, 13, 5, 18, 11, 10, 13, 10, 11, 10, 12, 15, 7, 6, 17, 10, 9, 13, 7, 7, 9, 7, 12, 8, 7, 14, 9, 11, 14, 11, 8, 7, 5, 11, 12, 6, 11, 2, 10, 12, 13, 11, 9, 14, 10, 11, 14, 6, 9, 14, 7, 17, 6, 16, 7, 14, 8, 5, 6, 10, 9, 9, 9, 11, 13, 9, 9, 11, 19, 8, 11, 12, 12, 10, 5, 13, 8, 7, 12, 8, 10, 17, 8, 10, 10, 14, 6, 13, 7, 14, 5, 20, 5, 11, 9, 17, 9, 10, 12, 8, 5, 12, 6, 10, 12, 12, 14, 11, 14, 7, 14, 11, 7, 13, 6, 11, 8, 9, 8, 18, 11, 11, 6, 13, 9, 12, 12, 12, 13, 13, 10, 13, 10, 12, 11, 10, 9, 8, 12, 15, 9, 11, 8, 12, 6, 13, 9, 8, 11, 6, 7, 6, 8, 9, 11, 11, 14, 12, 8, 8, 14, 10, 5, 3, 10, 13, 8, 10, 9, 11, 7, 13, 9, 10, 12, 15, 13, 10, 10, 12, 9, 6, 12, 2, 15, 12, 14, 7, 8, 6, 7, 9, 12, 10, 10, 11, 7, 13, 19, 10, 4, 12, 14, 12, 9, 10, 7, 14, 16, 4, 9, 8, 12, 10, 9, 14, 13, 5, 8, 15, 9, 9, 8, 8, 6, 18, 12, 17, 12, 14, 15, 14, 13, 11, 9, 9, 6, 9, 9, 13, 7, 3, 9, 15, 11, 14, 5, 9, 8, 11, 8, 15, 10, 6, 15, 15, 9, 12, 10, 9, 7, 12, 8, 11, 10, 10, 17, 12, 6, 6, 5, 11, 13, 6, 9, 3, 13, 7, 7, 15, 12, 9, 13, 11, 9, 9, 12, 9, 14, 14, 8, 9, 16, 12, 12, 13, 6, 14, 8, 9, 10, 10, 10, 14, 16, 10, 9, 13, 10, 12, 8, 8, 11, 9, 7, 13, 10, 5, 9, 10, 7, 6, 16, 8, 12, 10, 9, 6, 10, 9, 8, 7, 17, 14, 10, 12, 7, 12, 13, 9, 8, 12, 9, 12, 13, 7, 9, 7, 11, 9, 14, 10, 10, 8, 8, 15, 12, 14, 9, 15, 14, 12, 8, 11, 14, 7, 8, 13, 9, 12, 6, 5, 13, 11, 7, 14, 10, 11, 9, 11, 4, 9, 8, 6, 12, 14, 9, 11, 5, 11, 8, 10, 9, 8, 15, 6, 17, 13, 8, 15, 9, 16, 11, 12, 10, 14, 10, 8, 7, 6, 7, 12, 18, 7, 9, 9, 14, 14, 13, 13, 19, 8, 16, 10, 7, 13, 10, 6, 5, 12, 8, 8, 12, 9, 8, 10, 19, 10, 9, 10, 7, 10, 6, 10, 14, 8, 10, 11, 6, 13, 8, 10, 11, 10, 9, 13, 6, 7, 12, 12, 11, 7, 17, 8, 10, 9, 11, 12, 12, 9, 11, 11, 8, 14, 15, 6, 13, 12, 6, 7, 9, 8, 8, 12, 14, 11, 9, 15, 11, 7, 14, 7, 9, 6, 7, 11, 8, 11, 8, 8, 12, 10, 15, 5, 16, 12, 10, 12, 9, 10, 13, 8, 5, 7, 7, 15, 8, 7, 8, 10, 11, 6, 19, 7, 8, 10, 10, 10, 14, 10, 7, 9, 12, 12, 11, 10, 8, 14, 7, 7, 10, 5, 6, 9, 14, 9, 11, 12, 8, 17, 10, 11, 12, 13, 10, 15, 9, 8, 14, 10, 11, 7, 7, 10, 9, 10, 8, 12, 10, 8, 14, 8, 6, 12, 10, 8, 11, 13, 8, 13, 11, 11, 8, 12, 9, 12, 7, 10, 12, 7, 18, 10, 8, 6, 10, 11, 15, 9, 9, 12, 8, 13, 10, 13, 8, 12, 16, 10, 11, 19, 11, 17, 8, 11, 12, 13, 10, 12, 9, 14, 6, 8, 15, 8, 13, 9, 16, 9, 10, 8, 5, 20, 3, 11, 14, 9, 3, 11, 10, 12, 17, 17, 7, 6, 17, 10, 12, 8, 14, 13, 9, 17, 7, 11, 9, 8, 10, 10, 3, 14, 12, 11, 7, 8, 16, 10, 7, 7, 8, 13, 12, 10, 6, 14, 11, 12, 7, 10, 8, 12, 7, 9, 13, 11, 14, 9, 9, 10, 10, 11, 10, 9, 11, 10, 5, 8, 13, 8, 12, 12, 10, 13, 6, 8, 11, 18, 9, 10, 7, 6, 14, 8, 3, 11, 10, 19, 7, 12, 8, 6, 9, 14, 7, 15, 11, 10, 11, 8, 8, 10, 6, 5, 15, 8, 8, 13, 12, 9, 10, 9, 17, 13, 13, 12, 3, 10, 14, 12, 12, 13, 7, 19, 19, 12, 9, 12, 13, 11, 10, 6, 6, 10, 5, 11, 12, 3, 14, 11, 12, 7, 11, 8, 9, 12, 15, 6, 10, 9, 4, 6, 11, 12, 8, 12, 12, 11, 9, 13, 9, 7, 19, 6, 12, 5, 8, 11, 22, 15, 14, 13, 8, 10, 14, 11, 11, 14, 11, 16, 9, 6, 13, 11, 19, 6, 8, 9, 16, 5, 6, 10, 15, 12, 12, 11, 12, 11, 11, 11, 16, 10, 9, 12, 20, 13, 15, 6, 10, 12, 12, 8, 4, 12, 2, 8, 8, 14, 6, 5, 9, 7, 10, 12, 8, 4, 11, 15, 15, 14, 18, 12, 14, 13, 16, 7, 9, 9, 9, 4, 10, 14, 8, 11, 12, 13, 11, 13, 15, 4, 9, 16, 22, 8, 6, 11, 9, 13, 15, 3, 9, 6, 8, 12, 11, 9, 6, 8, 8, 9, 14, 7, 8, 8, 14, 8, 10, 16, 13, 12, 9, 16, 9, 7, 6, 18, 10, 8, 12, 5, 15, 8, 12, 15, 7, 7, 12, 13, 7, 9, 5, 17, 13, 5, 12, 12, 8, 10, 12, 10, 10, 11, 17, 8, 10, 7, 8, 13, 10, 11, 8, 14, 16, 7, 3, 17, 12, 21, 18, 7, 9, 9, 12, 15, 10, 11, 11, 14, 16, 8, 11, 10, 12, 19, 11, 11, 13, 7, 10, 12, 14, 9, 10, 15, 8, 13, 17, 12, 12, 17, 10, 10, 12, 9, 13, 7, 8, 8, 6, 2, 7, 6, 13, 7, 4, 7, 13, 9, 8, 10, 6, 9, 7, 10, 9, 8, 13, 8, 18, 9, 8, 9, 9, 9, 9, 8, 12, 7, 8, 9, 9, 8, 14, 10, 12, 17, 11, 16, 16, 11, 16, 6, 11, 11, 10, 8, 12, 12, 12, 7, 9, 10, 7, 8, 11, 6, 13, 16, 13, 13, 6, 5, 10, 5, 5, 11, 12, 12, 10, 8, 9, 11, 7, 9, 16, 15, 10, 14, 9, 5, 11, 12, 10, 12, 14, 11, 10, 13, 11, 8, 8, 7, 3, 7, 14, 10, 2, 8, 15, 12, 6, 10, 11, 8, 10, 8, 8, 8, 9, 12, 5, 11, 6, 8, 6, 10, 9, 8, 13, 11, 8, 6, 15, 8, 13, 12, 10, 13, 6, 9, 9, 12, 8, 9, 12, 19, 11, 7, 8, 11, 9, 9, 14, 13, 12, 10, 13, 8, 13, 5, 7, 17, 11, 17, 11, 4, 12, 12, 13, 12, 11, 11, 13, 13, 11, 14, 9, 9, 10, 9, 18, 17, 10, 19, 12, 13, 14, 10, 7, 10, 3, 16, 7, 14, 16, 9, 11, 8, 11, 9, 7, 12, 15, 14, 9, 18, 14, 18, 6, 11, 11, 9, 16, 9, 12, 16, 10, 10, 11, 15, 5, 12, 8, 11, 6, 10, 10, 13, 1, 14, 9, 11, 11, 13, 11, 9, 11, 9, 12, 8, 6, 6, 17, 10, 11, 12, 9, 6, 5, 7, 12, 11, 9, 10, 16, 5, 6, 10, 11, 15, 8, 11, 4, 15, 7, 13, 9, 16, 9, 4, 5, 6, 13, 9, 8, 9, 7, 10, 9, 19, 5, 9, 8, 13, 15, 12, 9, 13, 7, 12, 19, 9, 11, 11, 12, 12, 11, 9, 10, 8, 11, 14, 9, 14, 11, 5, 7, 7, 10, 7, 13, 17, 5, 9, 11, 6, 12, 11, 7, 12, 7, 11, 7, 9, 11, 9, 11, 11, 11, 8, 10, 8, 13, 9, 9, 7, 10, 10, 9, 7, 14, 6, 12, 9, 14, 11, 7, 7, 8, 6, 8, 8, 7, 14, 16, 10, 10, 12, 14, 10, 6, 11, 13, 14, 4, 4, 10, 10, 14, 8, 12, 10, 9, 8, 9, 8, 15, 11, 7, 5, 5, 11, 13, 6, 8, 15, 7, 6, 10, 8, 4, 8, 9, 13, 13, 10, 10, 7, 12, 7, 11, 6, 16, 15, 11, 10, 9, 13, 14, 14, 6, 10, 7, 10, 8, 13, 14, 10, 8, 7, 16, 17, 11, 15, 6, 12, 10, 11, 12, 7, 2, 15, 11, 5, 13, 14, 11, 6, 11, 13, 11, 8, 10, 11, 12, 12, 10, 7, 8, 10, 8, 6, 13, 10, 8, 11, 9, 8, 15, 7, 9, 8, 14, 10, 9, 7, 10, 6, 14, 6, 9, 14, 9, 7, 10, 9, 11, 12, 7, 15, 10, 9, 19, 10, 8, 8, 9, 10, 11, 12, 7, 15, 11, 9, 12, 16, 9, 15, 7, 12, 9, 15, 8, 9, 11, 9, 8, 12, 11, 9, 9, 11, 10, 10, 9, 18, 7, 10, 10, 11, 12, 8, 13, 8, 10, 8, 8, 7, 9, 9, 10, 10, 11, 15, 12, 8, 13, 6, 11, 9, 13, 10, 10, 13, 3, 10, 6, 9, 5, 9, 10, 12, 13, 15, 7, 11, 9, 12, 12, 11, 5, 12, 12, 8, 11, 11, 14, 21, 8, 16, 5, 13, 10, 13, 14, 14, 11, 5, 19, 13, 10, 15, 9, 15, 13, 14, 10, 10, 16, 14, 7, 10, 11, 7, 9, 13, 4, 13, 10, 10, 8, 17, 8, 9, 12, 12, 7, 15, 6, 15, 12, 8, 5, 9, 15, 14, 15, 4, 16, 9, 10, 10, 8, 13, 7, 6, 5, 10, 8, 8, 7, 7, 10, 13, 11, 11, 12, 13, 5, 9, 14, 17, 7, 15, 15, 11, 12, 9, 10, 10, 9, 7, 12, 12, 10, 10, 9, 8, 9, 4, 12, 6, 6, 8, 14, 5, 13, 9, 6, 8, 15, 8, 7, 8, 6, 4, 4, 4, 7, 11, 8, 4, 11, 9, 8, 9, 12, 14, 11, 9, 15, 11, 8, 8, 16, 14, 17, 12, 8, 10, 9, 5, 11, 13, 10, 18, 8, 16, 17, 14, 9, 14, 8, 9, 8, 2, 7, 13, 11, 8, 11, 3, 7, 10, 8, 13, 9, 11, 7, 4, 12, 11, 10, 6, 9, 5, 9, 13, 7, 10, 7, 12, 10, 13, 7, 8, 6, 9, 8, 7, 12, 12, 13, 8, 8, 8, 8, 13, 15, 11, 15, 9, 11, 13, 12, 10, 9, 4, 9, 7, 12, 6, 12, 7, 7, 14, 12, 8, 14, 10, 8, 13, 8, 11, 10, 8, 14, 5, 11, 11, 10, 8, 9, 7, 5, 16, 10, 9, 9, 11, 10, 7, 9, 13, 14, 9, 7, 8, 6, 11, 9, 8, 11, 13, 14, 14, 9, 14, 12, 9, 11, 5, 11, 6, 10, 10, 11, 12, 14, 5, 10, 9, 6, 10, 5, 15, 9, 11, 9, 7, 9, 9, 14, 10, 8, 14, 9, 10, 10, 12, 6, 6, 12, 11, 8, 13, 8, 15, 9, 9, 10, 17, 6, 11, 6, 7, 5, 9, 8, 8, 8, 13, 7, 9, 8, 12, 6, 12, 9, 12, 15, 16, 9, 9, 12, 18, 5, 6, 11, 11, 11, 13, 8, 7, 11, 8, 11, 10, 15, 10, 7, 11, 9, 14, 8, 6, 5, 11, 11, 13, 8, 15, 10, 5, 10, 8, 12, 6, 8, 12, 10, 4, 5, 9, 16, 12, 12, 11, 9, 8, 12, 7, 7, 11, 8, 7, 9, 10, 10, 11, 11, 11, 12, 12, 8, 14, 10, 6, 8, 8, 11, 15, 9, 13, 12, 10, 16, 17, 9, 7, 4, 9, 9, 6, 8, 13, 5, 9, 7, 8, 6, 12, 8, 8, 11, 9, 11, 8, 4, 13, 12, 12, 11, 12, 14, 6, 7, 17, 13, 10, 10, 17, 14, 10, 12, 10, 8, 8, 6, 12, 8, 9, 10, 11, 22, 12, 11, 3, 6, 8, 12, 15, 6, 12, 11, 8, 5, 9, 11, 9, 13, 12, 7, 7, 9, 11, 12, 10, 13, 12, 5, 9, 14, 9, 11, 13, 10, 13, 14, 11, 10, 12, 12, 14, 12, 10, 7, 9, 16, 3, 5, 14, 10, 9, 10, 8, 10, 9, 6, 6, 8, 13, 4, 9, 11, 14, 7, 8, 8, 9, 10, 10, 17, 4, 9, 7, 12, 12, 10, 10, 5, 10, 9, 13, 4, 7, 15, 8, 5, 17, 11, 9, 9, 8, 12, 8, 12, 10, 7, 11, 17, 8, 9, 13, 11, 11, 8, 9, 10, 4, 16, 10, 14, 15, 11, 5, 11, 14, 10, 9, 8, 19, 8, 14, 5, 4, 18, 14, 6, 11, 12, 8, 10, 13, 12, 10, 11, 9, 7, 10, 9, 12, 14, 7, 8, 14, 12, 9, 9, 10, 9, 10, 10, 8, 15, 12, 10, 17, 8, 11, 7, 11, 9, 12, 7, 7, 12, 10, 5, 14, 7, 6, 11, 6, 11, 14, 11, 7, 5, 7, 16, 8, 3, 10, 11, 15, 9, 12, 15, 15, 12, 18, 9, 13, 8, 9, 12, 12, 17, 14, 17, 5, 10, 14, 14, 12, 15, 11, 12, 8, 12, 8, 8, 3, 7, 9, 8, 21, 6, 5, 8, 8, 8, 13, 7, 14, 13, 15, 8, 11, 11, 6, 9, 8, 11, 12, 10, 7, 12, 13, 3, 10, 11, 13, 12, 11, 12, 10, 11, 5, 10, 15, 12, 17, 10, 14, 5, 10, 18, 9, 9, 10, 12, 10, 3, 12, 9, 7, 10, 10, 13, 12, 11, 13, 9, 10, 9, 9, 12, 6, 9, 10, 13, 12, 12, 6, 12, 10, 15, 10, 8, 9, 10, 12, 12, 11, 8, 13, 8, 12, 12, 15, 13, 10, 7, 8, 11, 13, 12, 13, 12, 15, 11, 9, 12, 12, 7, 15, 13, 9, 11, 9, 10, 11, 8, 6, 12, 13, 10, 9, 9, 16, 12, 7, 9, 9, 14, 7, 8, 14, 11, 13, 15, 9, 9, 8, 11, 12, 12, 10, 14, 12, 6, 10, 9, 13, 7, 2, 6, 7, 14, 10, 7, 7, 11, 7, 10, 9, 13, 13, 14, 11, 8, 7, 7, 8, 12, 6, 14, 15, 10, 15, 11, 18, 11, 10, 8, 8, 14, 12, 11, 5, 12, 16, 13, 14, 12, 7, 13, 10, 17, 18, 13, 13, 13, 13, 13, 12, 12, 14, 1, 8, 7, 9, 9, 15, 8, 7, 9, 9, 10, 13, 12, 15, 14, 6, 8, 6, 11, 10, 7, 6, 15, 14, 15, 12, 13, 7, 14, 5, 14, 7, 7, 10, 12, 11, 10, 8, 11, 12, 11, 7, 12, 12, 12, 13, 12, 11, 5, 7, 10, 10, 10, 13, 11, 9, 8, 8, 12, 8, 11, 7, 14, 11, 11, 4, 9, 8, 7, 6, 13, 7, 13, 6, 9, 9, 8, 11, 6, 8, 5, 12, 7, 7, 12, 7, 8, 10, 8, 10, 8, 7, 16, 10, 15, 17, 8, 10, 10, 11, 8, 9, 8, 11, 6, 10, 9, 14, 12, 8, 11, 5, 6, 7, 22, 12, 13, 8, 10, 15, 11, 12, 7, 9, 7, 15, 16, 7, 11, 14, 12, 17, 9, 7, 9, 8, 7, 14, 9, 9, 9, 9, 9, 9, 7, 11, 12, 9, 11, 10, 10, 12, 18, 6, 9, 5, 9, 10, 10, 13, 13, 9, 9, 13, 8, 13, 6, 14, 13, 15, 4, 13, 12, 7, 10, 3, 7, 7, 14, 6, 13, 5, 13, 19, 9, 16, 8, 4, 13, 13, 8, 11, 7, 16, 11, 9, 11, 14, 10, 8, 12, 9, 10, 10, 8, 6, 13, 9, 15, 11, 12, 8, 8, 10, 12, 11, 13, 11, 5, 13, 10, 9, 17, 6, 8, 19, 10, 11, 6, 10, 9, 16, 11, 13, 10, 9, 7, 8, 5, 7, 8, 6, 14, 13, 7, 8, 19, 13, 12, 11, 10, 9, 9, 11, 7, 6, 12, 10, 15, 10, 7, 11, 10, 7, 11, 4, 9, 6, 10, 10, 7, 10, 11, 13, 10, 10, 12, 10, 10, 9, 9, 11, 16, 13, 9, 14, 8, 10, 15, 14, 9, 7, 8, 10, 14, 11, 13, 9, 13, 6, 8, 16, 14, 11, 12, 10, 6, 16, 7, 11, 13, 10, 13, 10, 7, 13, 16, 12, 5, 17, 6, 11, 7, 12, 7, 11, 11, 13, 5, 13, 10, 9, 14, 9, 13, 7, 8, 7, 10, 14, 14, 7, 13, 4, 6, 9, 11, 4, 12, 8, 17, 9, 6, 8, 7, 8, 5, 5, 7, 6, 15, 9, 12, 8, 10, 10, 10, 8, 15, 10, 9, 10, 9, 10, 10, 8, 8, 10, 12, 11, 12, 7, 10, 6, 7, 11, 11, 9, 8, 9, 8, 8, 10, 15, 12, 12, 13, 8, 11, 9, 13, 12, 11, 13, 11, 13, 8, 8, 8, 12, 10, 7, 5, 8, 11, 12, 6, 11, 7, 9, 7, 21, 12, 8, 12, 10, 5, 13, 7, 10, 5, 9, 9, 10, 8, 10, 9, 14, 12, 6, 11, 9, 12, 7, 9, 13, 6, 11, 9, 13, 5, 14, 9, 8, 5, 15, 17, 13, 12, 8, 13, 5, 11, 13, 15, 5, 9, 9, 17, 13, 12, 13, 8, 10, 14, 10, 13, 13, 6, 13, 9, 9, 10, 12, 12, 9, 10, 4, 9, 11, 6, 5, 15, 8, 18, 12, 9, 12, 8, 8, 12, 8, 13, 14, 16, 13, 10, 12, 8, 10, 12, 7, 15, 14, 10, 7, 5, 9, 7, 8, 18, 11, 4, 13, 10, 13, 15, 8, 8, 10, 9, 9, 13, 10, 9, 8, 13, 10, 10, 4, 13, 13, 12, 6, 9, 13, 9, 6, 12, 13, 6, 8, 12, 13, 8, 13, 11, 12, 10, 7, 17, 7, 13, 11, 10, 5, 7, 9, 9, 8, 10, 12, 16, 7, 14, 9, 8, 11, 11, 15, 19, 10, 13, 8, 12, 11, 6, 6, 7, 9, 11, 8, 13, 7, 5, 11, 9, 8, 9, 8, 10, 9, 8, 10, 12, 10, 7, 8, 16, 8, 10, 14, 6, 7, 12, 14, 11, 3, 11, 17, 7, 10, 13, 9, 14, 11, 8, 10, 10, 10, 7, 17, 13, 5, 6, 11, 13, 6, 6, 12, 16, 7, 10, 12, 9, 6, 15, 10, 12, 7, 12, 9, 14, 13, 6, 7, 4, 12, 10, 10, 12, 9, 8, 12, 10, 11, 10, 12, 11, 9, 6, 9, 12, 14, 12, 6, 7, 9, 4, 5, 10, 9, 6, 10, 11, 8, 13, 15, 11, 11, 7, 10, 7, 2, 10, 11, 10, 7, 7, 8, 10, 16, 6, 9, 10, 12, 15, 13, 11, 8, 15, 8, 10, 7, 14, 11, 9, 7, 10, 11, 11, 12, 11, 11, 11, 11, 15, 15, 6, 9, 10, 8, 9, 7, 7, 12, 8, 9, 11, 6, 7, 11, 11, 5, 8, 9, 11, 6, 9, 11, 7, 5, 9, 11, 5, 13, 9, 9, 10, 9, 10, 14, 7, 8, 6, 17, 7, 15, 8, 12, 10, 7, 9, 13, 12, 12, 10, 8, 16, 10, 8, 6, 11, 9, 6, 11, 7, 5, 6, 9, 6, 13, 10, 8, 6, 7, 11, 10, 17, 11, 7, 10, 10, 9, 7, 13, 20, 8, 12, 12, 8, 8, 9, 9, 6, 12, 10, 10, 17, 17, 6, 10, 10, 19, 12, 12, 11, 9, 11, 7, 14, 5, 6, 9, 17, 8, 11, 8, 9, 11, 15, 12, 7, 9, 9, 4, 14, 8, 10, 11, 10, 12, 8, 8, 9, 9, 15, 7, 11, 7, 6, 13, 21, 10, 8, 7, 8, 6, 12, 12, 12, 13, 10, 5, 3, 5, 15, 12, 13, 9, 9, 11, 10, 20, 7, 12, 8, 9, 6, 8, 9, 9, 12, 13, 14, 9, 13, 9, 9, 12, 14, 10, 12, 12, 14, 8, 5, 13, 13, 7, 5, 11, 9, 8, 10, 14, 9, 11, 12, 13, 6, 13, 12, 11, 12, 8, 20, 14, 13, 7, 14, 14, 6, 8, 9, 9, 8, 12, 9, 13, 8, 6, 6, 12, 7, 7, 6, 6, 11, 7, 10, 11, 8, 13, 12, 7, 16, 10, 6, 14, 10, 5, 6, 14, 12, 11, 14, 16, 14, 8, 9, 12, 11, 12, 12, 6, 13, 7, 12, 9, 11, 9, 9, 8, 12, 12, 6, 8, 12, 14, 11, 11, 9, 8, 7, 11, 11, 11, 9, 10, 10, 9, 5, 7, 11, 17, 9, 8, 11, 14, 12, 12, 9, 6, 10, 14, 8, 13, 6, 7, 10, 11, 9, 8, 10, 10, 7, 13, 6, 12, 14, 14, 11, 9, 4, 10, 11, 11, 10, 6, 9, 10, 13, 10, 13, 12, 4, 5, 11, 12, 9, 13, 16, 10, 10, 6, 9, 10, 8, 8, 8, 14, 10, 7, 7, 9, 13, 15, 8, 10, 12, 8, 9, 7, 12, 9, 10, 14, 9, 6, 8, 8, 10, 12, 10, 11, 9, 12, 7, 11, 15, 9, 8, 9, 9, 7, 9, 8, 10, 16, 10, 9, 9, 8, 10, 15, 4, 12, 8, 8, 9, 10, 11, 11, 8, 12, 8, 5, 11, 12, 10, 8, 13, 10, 6, 11, 6, 8, 9, 9, 15, 12, 5, 5, 12, 10, 10, 8, 9, 12, 8, 13, 8, 9, 6, 9, 7, 10, 11, 11, 10, 12, 7, 9, 10, 9, 9, 22, 8, 7, 8, 7, 17, 10, 10, 8, 10, 10, 9, 8, 8, 8, 16, 9, 13, 11, 15, 12, 16, 7, 9, 8, 12, 9, 10, 8, 8, 7, 4, 8, 15, 8, 14, 4, 19, 12, 6, 4, 9, 9, 10, 8, 10, 10, 12, 12, 11, 9, 18, 10, 10, 13, 12, 10, 14, 12, 11, 14, 6, 10, 6, 9, 13, 10, 7, 12, 6, 12, 10, 12, 7, 15, 10, 6, 13, 6, 12, 12, 9, 5, 12, 7, 12, 9, 10, 12, 11, 12, 13, 7, 8, 8, 10, 6, 6, 12, 9, 10, 10, 12, 12, 13, 6, 12, 14, 13, 8, 9, 13, 8, 10, 11, 17, 11, 13, 10, 12, 11, 11, 12, 8, 8, 10, 9, 12, 15, 10, 7, 10, 6, 9, 5, 8, 17, 9, 7, 3, 8, 9, 9, 11, 13, 3, 4, 9, 11, 14, 8, 12, 7, 5, 10, 9, 11, 8, 14, 6, 14, 10, 14, 14, 15, 11, 6, 10, 13, 10, 11, 9, 7, 6, 8, 15, 9, 5, 14, 6, 4, 10, 13, 7, 14, 12, 13, 13, 13, 9, 4, 7, 9, 4, 7, 15, 11, 6, 16, 10, 14, 9, 7, 16, 13, 9, 6, 9, 14, 9, 5, 7, 13, 13, 8, 5, 13, 11, 11, 10, 14, 3, 13, 13, 6, 9, 8, 10, 15, 8, 12, 15, 10, 4, 11, 9, 10, 10, 5, 9, 4, 15, 11, 12, 11, 7, 12, 11, 6, 14, 14, 9, 11, 8, 10, 9, 11, 12, 11, 12, 9, 6, 8, 6, 13, 15, 9, 9, 10, 8, 8, 17, 13, 13, 8, 11, 8, 9, 16, 12, 9, 15, 9, 12, 16, 11, 14, 13, 10, 8, 9, 11, 7, 19, 6, 6, 10, 13, 7, 6, 19, 11, 12, 1, 7, 12, 8, 11, 14, 14, 4, 11, 14, 8, 12, 10, 7, 8, 12, 13, 11, 11, 9, 9, 11, 10, 5, 10, 13, 15, 7, 5, 11, 10, 7, 17, 6, 9, 10, 8, 7, 10, 10, 11, 8, 6, 14, 11, 7, 11, 13, 2, 12, 4, 11, 15, 10, 9, 9, 15, 9, 11, 7, 12, 15, 9, 9, 8, 15, 18, 5, 7, 11, 7, 5, 10, 10, 8, 11, 7, 13, 9, 8, 6, 15, 9, 9, 7, 11, 9, 10, 10, 15, 6, 10, 10, 15, 10, 8, 4, 10, 10, 7, 9, 5, 6, 14, 9, 7, 15, 10, 7, 6, 4, 9, 9, 9, 10, 5, 21, 11, 6, 9, 9, 8, 5, 9, 7, 9, 11, 14, 15, 6, 6, 11, 14, 8, 11, 12, 7, 13, 11, 7, 14, 8, 11, 12, 10, 9, 8, 12, 14, 7, 15, 9, 6, 10, 12, 12, 17, 6, 7, 12, 5, 11, 9, 9, 9, 14, 8, 7, 11, 15, 12, 21, 9, 13, 14, 8, 12, 10, 10, 16, 15, 11, 13, 7, 17, 7, 13, 9, 9, 12, 9, 3, 11, 12, 6, 11, 9, 10, 4, 9, 5, 12, 9, 11, 9, 14, 8, 4, 8, 4, 12, 3, 8, 11, 11, 7, 13, 8, 12, 14, 10, 8, 6, 7, 7, 8, 4, 6, 9, 13, 9, 19, 9, 7, 8, 7, 9, 9, 6, 13, 8, 7, 8, 9, 11, 10, 15, 10, 7, 13, 8, 9, 11, 10, 17, 9, 14, 12, 10, 8, 7, 15, 12, 13, 6, 6, 11, 10, 12, 4, 7, 9, 9, 13, 6, 10, 10, 15, 13, 9, 8, 14, 10, 8, 12, 9, 10, 5, 11, 13, 12, 6, 5, 4, 10, 13, 9, 5, 17, 11, 12, 10, 8, 8, 15, 11, 8, 9, 10, 9, 8, 6, 12, 13, 10, 7, 7, 8, 8, 4, 12, 12, 9, 14, 5, 9, 8, 10, 4, 20, 13, 9, 14, 11, 3, 7, 13, 7, 9, 11, 12, 17, 15, 7, 9, 10, 8, 12, 11, 11, 13, 12, 7, 5, 10, 14, 10, 5, 9, 4, 11, 12, 12, 4, 3, 9, 11, 12, 6, 6, 10, 11, 4, 12, 10, 7, 7, 9, 13, 12, 6, 13, 8, 11, 8, 9, 11, 12, 5, 8, 15, 10, 9, 10, 8, 6, 10, 8, 16, 12, 11, 9, 11, 15, 15, 9, 5, 13, 6, 13, 5, 11, 7, 10, 7, 15, 9, 5, 8, 13, 11, 11, 8, 11, 8, 11, 8, 10, 18, 16, 7, 5, 11, 8, 14, 8, 16, 8, 16, 9, 16, 11, 13, 9, 9, 8, 7, 10, 6, 8, 11, 1, 12, 9, 15, 10, 9, 13, 10, 7, 9, 13, 7, 23, 8, 6, 6, 8, 12, 6, 11, 5, 9, 12, 8, 17, 18, 17, 13, 8, 9, 7, 4, 12, 7, 11, 12, 5, 10, 9, 11, 15, 10, 14, 14, 7, 12, 5, 9, 6, 11, 13, 15, 6, 8, 8, 10, 9, 12, 7, 13, 10, 11, 5, 8, 8, 8, 9, 8, 6, 10, 12, 13, 8, 8, 8, 6, 5, 11, 13, 7, 8, 11, 10, 15, 7, 12, 11, 7, 6, 17, 11, 6, 10, 15, 12, 9, 6, 10, 5, 9, 13, 13, 11, 7, 9, 14, 9, 8, 10, 10, 12, 6, 5, 8, 14, 9, 10, 10, 6, 12, 11, 11, 9, 7, 10, 10, 10, 12, 7, 6, 11, 11, 11, 17, 14, 9, 7, 11, 5, 3, 13, 16, 9, 5, 6, 11, 5, 9, 8, 6, 10, 9, 14, 15, 8, 10, 12, 6, 8, 9, 7, 10, 12, 10, 8, 15, 11, 11, 11, 5, 10, 10, 10, 8, 6, 14, 17, 7, 13, 9, 16, 11, 13, 11, 11, 15, 9, 11, 12, 7, 9, 9, 8, 14, 9, 12, 13, 8, 7, 6, 13, 12, 11, 8, 5, 8, 11, 18, 9, 12, 7, 11, 6, 15, 10, 13, 9, 9, 7, 10, 7, 11, 4, 10, 9, 13, 8, 6, 7, 11, 11, 16, 7, 11, 9, 5, 15, 11, 7, 12, 8, 5, 12, 15, 9, 7, 12, 7, 11, 12, 15, 5, 5, 10, 10, 15, 10, 14, 12, 14, 11, 8, 6, 11, 6, 14, 6, 10, 12, 15, 9, 12, 7, 4, 9, 12, 16, 7, 9, 10, 9, 21, 12, 4, 8, 12, 10, 14, 8, 8, 9, 13, 14, 15, 11, 12, 6, 10, 10, 5, 11, 12, 14, 7, 11, 4, 5, 9, 11, 14, 4, 10, 17, 8, 11, 8, 10, 9, 11, 15, 14, 9, 13, 11, 9, 7, 10, 9, 14, 9, 8, 7, 13, 15, 9, 9, 9, 13, 11, 11, 9, 5, 9, 5, 5, 9, 7, 11, 12, 14, 8, 11, 11, 6, 3, 12, 15, 8, 10, 6, 12, 11, 10, 7, 10, 9, 6, 7, 10, 6, 12, 18, 12, 5, 14, 12, 11, 12, 12, 6, 12, 12, 9, 14, 12, 11, 9, 16, 7, 9, 12, 10, 8, 9, 10, 17, 11, 13, 13, 11, 4, 8, 12, 10, 8, 12, 13, 11, 12, 7, 15, 19, 5, 17, 10, 4, 12, 8, 11, 8, 11, 13, 9, 11, 7, 13, 7, 15, 10, 14, 8, 6, 7, 9, 8, 8, 9, 9, 12, 8, 14, 11, 10, 14, 14, 15, 9, 7, 6, 12, 10, 8, 7, 10, 14, 12, 10, 7, 7, 15, 5, 8, 8, 9, 4, 14, 5, 3, 7, 11, 11, 14, 11, 6, 8, 8, 12, 13, 7, 8, 11, 12, 5, 5, 12, 14, 17, 13, 10, 9, 10, 6, 8, 7, 10, 11, 11, 4, 10, 8, 5, 9, 7, 16, 13, 10, 6, 8, 10, 12, 6, 11, 11, 6, 3, 5, 14, 9, 5, 11, 13, 11, 8, 9, 11, 10, 11, 6, 10, 9, 8, 13, 9, 9, 11, 11, 8, 14, 10, 20, 2, 10, 13, 9, 16, 11, 8, 9, 6, 8, 11, 12, 8, 7, 12, 10, 15, 11, 12, 11, 13, 12, 10, 12, 15, 8, 15, 22, 6, 7, 13, 11, 11, 6, 8, 9, 8, 7, 9, 9, 16, 3, 6, 12, 16, 12, 9, 10, 9, 8, 5, 13, 14, 13, 9, 13, 12, 11, 14, 8, 9, 10, 5, 7, 12, 8, 10, 12, 11, 13, 11, 10, 5, 10, 6, 6, 19, 8, 5, 6, 14, 13, 7, 12, 18, 15, 7, 8, 10, 7, 14, 10, 11, 6, 11, 11, 7, 13, 13, 12, 12, 19, 12, 9, 12, 8, 13, 13, 10, 9, 10, 4, 15, 14, 13, 8, 9, 4, 9, 3, 9, 11, 12, 12, 15, 12, 7, 7, 14, 11, 9, 12, 12, 11, 10, 12, 11, 11, 15, 7, 8, 8, 15, 4, 7, 9, 6, 11, 5, 8, 11, 8, 8, 12, 10, 6, 13, 14, 6, 13, 8, 16, 6, 8, 6, 12, 12, 11, 7, 4, 12, 8, 8, 10, 12, 8, 6, 10, 10, 14, 7, 12, 7, 7, 9, 6, 10, 9, 9, 7, 14, 13, 11, 11, 13, 10, 8, 7, 5, 5, 8, 13, 5, 7, 13, 12, 5, 13, 12, 9, 5, 7, 7, 16, 9, 15, 14, 14, 9, 9, 11, 7, 10, 10, 11, 10, 11, 6, 9, 8, 4, 7, 11, 8, 14, 12, 10, 10, 6, 10, 14, 10, 4, 7, 7, 10, 6, 20, 7, 8, 11, 11, 17, 6, 9, 9, 9, 28, 12, 8, 9, 8, 8, 11, 11, 10, 10, 7, 11, 8, 16, 13, 10, 8, 12, 12, 13, 9, 7, 10, 10, 10, 7, 8, 11, 14, 4, 10, 9, 13, 9, 11, 18, 15, 10, 13, 10, 13, 9, 11, 13, 5, 16, 7, 13, 10, 9, 9, 10, 10, 8, 12, 11, 10, 14, 11, 12, 15, 9, 13, 14, 15, 3, 13, 12, 11, 16, 13, 13, 13, 13, 8, 9, 5, 8, 18, 3, 12, 12, 12, 12, 8, 12, 11, 13, 9, 12, 7, 8, 8, 15, 11, 11, 13, 12, 8, 9, 8, 10, 10, 11, 12, 12, 17, 13, 6, 7, 14, 10, 12, 5, 6, 9, 7, 9, 15, 11, 9, 9, 20, 11, 10, 17, 9, 14, 12, 8, 11, 5, 10, 8, 5, 9, 11, 8, 14, 10, 13, 9, 9, 5, 11, 15, 11, 7, 5, 9, 11, 9, 11, 13, 11, 6, 10, 4, 6, 4, 16, 12, 12, 12, 12, 6, 9, 13, 9, 14, 13, 5, 8, 9, 12, 8, 8, 10, 4, 5, 14, 11, 13, 9, 13, 11, 3, 9, 9, 9, 15, 9, 13, 13, 13, 10, 7, 10, 14, 8, 11, 13, 14, 4, 12, 6, 6, 8, 11, 9, 11, 13, 13, 12, 10, 9, 15, 16, 15, 16, 4, 6, 10, 8, 9, 10, 8, 12, 13, 6, 8, 13, 12, 8, 13, 13, 6, 7, 7, 6, 11, 7, 11, 10, 11, 5, 9, 12, 7, 10, 8, 10, 10, 7, 18, 13, 8, 9, 10, 9, 15, 5, 10, 12, 10, 6, 8, 10, 4, 11, 7, 12, 16, 10, 13, 11, 4, 6, 10, 8, 11, 7, 8, 12, 13, 9, 7, 12, 8, 8, 8, 14, 10, 10, 8, 8, 8, 9, 8, 17, 14, 12, 15, 3, 9, 10, 12, 6, 9, 9, 10, 5, 11, 7, 11, 7, 9, 8, 18, 10, 8, 13, 8, 11, 8, 11, 10, 13, 8, 10, 6, 10, 8, 12, 4, 16, 10, 13, 10, 15, 11, 9, 8, 6, 9, 10, 2, 17, 18, 7, 13, 8, 11, 7, 7, 15, 10, 4, 13, 12, 7, 8, 12, 14, 13, 13, 15, 13, 16, 6, 16, 6, 11, 16, 12, 11, 15, 12, 9, 11, 10, 7, 8, 17, 9, 7, 7, 5, 10, 5, 17, 14, 9, 12, 11, 7, 7, 11, 7, 10, 11, 17, 2, 12, 17, 11, 11, 7, 9, 12, 10, 12, 8, 8, 8, 9, 13, 10, 10, 7, 9, 11, 8, 13, 15, 11, 13, 13, 14, 11, 10, 4, 11, 11, 11, 8, 12, 9, 7, 10, 11, 15, 11, 10, 7, 18, 15, 12, 10, 8, 9, 14, 5, 13, 7, 9, 8, 16, 9, 11, 10, 11, 13, 6, 9, 15, 8, 7, 9, 13, 10, 4, 4, 8, 11, 10, 10, 7, 10, 14, 9, 10, 11, 7, 8, 11, 7, 12, 12, 6, 13, 6, 7, 15, 10, 8, 10, 6, 5, 6, 5, 11, 11, 18, 9, 17, 13, 6, 11, 10, 9, 9, 6, 11, 10, 7, 13, 13, 11, 14, 10, 9, 13, 12, 6, 12, 12, 7, 19, 11, 8, 15, 7, 10, 12, 14, 11, 16, 9, 7, 10, 9, 13, 8, 6, 11, 5, 8, 9, 9, 10, 9, 9, 8, 11, 11, 5, 10, 12, 8, 8, 11, 14, 10, 9, 11, 9, 9, 9, 7, 5, 5, 12, 10, 11, 13, 12, 13, 14, 7, 10, 8, 11, 11, 9, 14, 12, 10, 7, 11, 14, 9, 8, 15, 6, 10, 13, 10, 10, 10, 10, 4, 20, 12, 7, 10, 12, 12, 8, 11, 8, 11, 10, 8, 14, 8, 11, 9, 13, 7, 6, 6, 7, 16, 7, 3, 12, 10, 8, 9, 11, 6, 5, 9, 7, 9, 8, 11, 5, 12, 12, 13, 6, 13, 9, 10, 18, 9, 10, 9, 10, 10, 10, 9, 12, 8, 15, 10, 10, 13, 8, 16, 8, 13, 5, 10, 7, 7, 10, 12, 7, 15, 12, 5, 7, 10, 9, 9, 6, 6, 11, 12, 9, 15, 9, 11, 8, 10, 17, 16, 4, 9, 9, 14, 10, 9, 13, 8, 13, 7, 10, 12, 9, 15, 7, 9, 4, 8, 7, 12, 10, 12, 11, 6, 6, 13, 8, 14, 13, 8, 11, 15, 10, 14, 17, 13, 7, 14, 12, 13, 9, 7, 10, 7, 5, 13, 14, 9, 6, 17, 7, 14, 11, 8, 11, 11, 11, 11, 3, 12, 7, 9, 10, 11, 9, 12, 11, 12, 16, 8, 10, 14, 11, 10, 10, 8, 12, 9, 3, 12, 10, 11, 14, 8, 12, 6, 7, 7, 10, 10, 11, 19, 7, 9, 8, 8, 13, 8, 12, 8, 8, 6, 7, 10, 10, 9, 9, 9, 8, 7, 7, 11, 8, 8, 13, 8, 9, 10, 13, 15, 10, 13, 11, 6, 6, 16, 11, 7, 10, 7, 14, 7, 10, 11, 8, 16, 13, 7, 3, 13, 19, 6, 6, 6, 5, 16, 16, 10, 8, 3, 12, 16, 9, 8, 10, 16, 6, 12, 8, 10, 12, 9, 12, 9, 5, 18, 8, 7, 8, 9, 11, 12, 12, 6, 12, 8, 9, 7, 11, 11, 11, 12, 7, 7, 6, 7, 12, 7, 10, 4, 18, 9, 9, 3, 9, 11, 11, 5, 13, 10, 9, 6, 10, 7, 10, 9, 1, 17, 10, 10, 9, 10, 10, 9, 12, 10, 7, 10, 4, 12, 9, 10, 10, 6, 11, 18, 8, 8, 13, 6, 6, 6, 10, 12, 8, 12, 6, 5, 3, 9, 13, 16, 12, 13, 13, 13, 7, 9, 12, 4, 14, 9, 12, 9, 14, 10, 10, 10, 18, 8, 9, 14, 10, 11, 11, 11, 13, 11, 9, 10, 12, 9, 10, 10, 5, 2, 8, 12, 10, 13, 18, 13, 8, 12, 11, 10, 12, 18, 14, 10, 10, 10, 10, 12, 8, 11, 10, 11, 7, 13, 9, 6, 8, 10, 9, 12, 9, 12, 9, 21, 10, 13, 11, 8, 11, 12, 7, 9, 10, 7, 11, 13, 15, 9, 6, 12, 6, 7, 10, 10, 13, 8, 7, 10, 15, 11, 6, 7, 6, 10, 13, 11, 12, 13, 12, 10, 11, 16, 9, 12, 8, 11, 4, 12, 12, 13, 7, 12, 8, 9, 5, 19, 11, 11, 8, 8, 9, 7, 7, 13, 12, 8, 12, 13, 12, 15, 16, 11, 8, 14, 11, 10, 8, 7, 13, 11, 10, 9, 13, 8, 10, 4, 10, 6, 17, 13, 8, 8, 8, 9, 14, 6, 8, 9, 11, 11, 13, 14, 12, 9, 8, 12, 20, 6, 10, 10, 13, 5, 4, 11, 14, 12, 11, 7, 9, 8, 9, 10, 8, 11, 7, 13, 11, 9, 8, 5, 10, 13, 7, 9, 15, 11, 8, 11, 9, 6, 11, 12, 5, 11, 8, 13, 8, 12, 8, 8, 11, 8, 16, 6, 10, 7, 10, 19, 20, 11, 13, 14, 11, 15, 10, 7, 7, 12, 18, 16, 13, 14, 13, 11, 8, 15, 7, 10, 6, 13, 15, 16, 9, 13, 7, 6, 6, 9, 5, 11, 3, 9, 10, 9, 13, 10, 12, 10, 8, 6, 13, 12, 12, 12, 11, 9, 10, 13, 10, 11, 16, 7, 9, 5, 9, 6, 10, 7, 8, 13, 15, 8, 8, 11, 10, 11, 15, 10, 7, 11, 9, 10, 11, 10, 11, 11, 6, 10, 11, 13, 8, 13, 11, 7, 10, 8, 8, 14, 6, 9, 6, 10, 10, 11, 11, 9, 17, 13, 9, 14, 13, 15, 7, 12, 11, 10, 9, 9, 10, 9, 10, 10, 6, 6, 12, 6, 10, 11, 4, 11, 7, 13, 13, 8, 8, 8, 2, 8, 4, 8, 10, 7, 12, 16, 10, 9, 12, 7, 6, 12, 7, 12, 10, 6, 11, 18, 14, 10, 11, 9, 15, 2, 10, 11, 14, 14, 10, 9, 10, 9, 13, 10, 15, 9, 5, 7, 4, 13, 12, 8, 11, 9, 7, 9, 8, 7, 18, 11, 4, 12, 8, 9, 9, 7, 11, 11, 14, 15, 7, 8, 10, 15, 14, 10, 5, 9, 15, 16, 8, 9, 8, 8, 7, 6, 11, 18, 11, 9, 8, 7, 14, 8, 12, 8, 13, 8, 15, 15, 13, 7, 16, 12, 15, 15, 9, 7, 10, 12, 6, 9, 8, 13, 12, 7, 4, 8, 7, 6, 8, 11, 9, 12, 5, 6, 17, 10, 22, 14, 11, 9, 12, 13, 7, 12, 15, 6, 8, 12, 12, 13, 11, 7, 8, 11, 11, 17, 10, 14, 11, 10, 12, 8, 6, 10, 12, 11, 9, 9, 13, 10, 15, 6, 10, 6, 13, 11, 12, 3, 14, 11, 9, 10, 10, 7, 9, 18, 17, 10, 4, 6, 14, 13, 17, 11, 6, 8, 9, 11, 9, 11, 8, 11, 8, 12, 9, 14, 10, 14, 11, 9, 8, 13, 4, 11, 12, 7, 18, 13, 9, 5, 14, 8, 6, 9, 6, 14, 11, 17, 9, 6, 11, 11, 10, 12, 9, 6, 10, 8, 15, 16, 11, 5, 5, 14, 6, 9, 7, 10, 11, 6, 7, 11, 8, 10, 14, 8, 7, 12, 8, 11, 16, 7, 14, 12, 12, 13, 5, 13, 15, 12, 5, 6, 9, 7, 5, 11, 11, 10, 9, 6, 11, 7, 10, 8, 8, 7, 11, 10, 12, 15, 12, 13, 7, 10, 9, 14, 12, 9, 8, 7, 9, 14, 7, 4, 10, 10, 7, 10, 10, 17, 15, 13, 6, 8, 10, 9, 8, 9, 8, 13, 9, 7, 8, 5, 7, 10, 11, 10, 8, 10, 9, 7, 12, 15, 7, 9, 13, 9, 5, 16, 7, 12, 12, 12, 10, 6, 9, 9, 11, 10, 12, 10, 7, 2, 12, 13, 9, 11, 8, 8, 4, 11, 11, 5, 9, 15, 13, 6, 14, 12, 16, 10, 7, 3, 8, 8, 8, 14, 9, 6, 12, 3, 12, 3, 12, 7, 10, 12, 11, 9, 8, 11, 14, 7, 9, 16, 10, 11, 18, 10, 8, 12, 12, 5, 11, 5, 9, 7, 13, 11, 8, 11, 5, 18, 9, 13, 10, 7, 6, 10, 6, 8, 9, 6, 9, 9, 12, 10, 5, 11, 7, 11, 11, 8, 9, 9, 9, 11, 13, 9, 5, 7, 19, 10, 10, 13, 9, 6, 5, 10, 5, 6, 10, 8, 13, 6, 12, 15, 8, 10, 9, 10, 11, 7, 11, 8, 8, 11, 10, 9, 8, 6, 14, 15, 12, 16, 10, 15, 13, 10, 10, 12, 11, 10, 7, 11, 13, 9, 9, 6, 7, 9, 16, 2, 12, 9, 6, 9, 6, 10, 13, 13, 6, 9, 17, 9, 11, 9, 10, 3, 14, 6, 9, 7, 9, 5, 8, 10, 8, 6, 14, 8, 15, 5, 5, 11, 12, 13, 10, 11, 13, 20, 7, 9, 6, 7, 10, 12, 9, 10, 11, 2, 8, 8, 8, 8, 13, 11, 15, 14, 5, 11, 13, 8, 10, 5, 8, 13, 11, 9, 17, 10, 5, 8, 11, 9, 12, 4, 14, 15, 8, 7, 6, 10, 16, 7, 10, 6, 13, 11, 10, 4, 3, 11, 13, 7, 15, 12, 13, 8, 12, 10, 16, 8, 6, 3, 11, 9, 13, 8, 9, 11, 8, 8, 6, 10, 5, 13, 10, 14, 11, 13, 11, 10, 7, 7, 8, 9, 9, 15, 7, 13, 4, 16, 7, 3, 11, 10, 10, 9, 17, 12, 12, 14, 14, 11, 10, 7, 14, 10, 8, 9, 14, 14, 9, 11, 7, 6, 14, 10, 7, 18, 7, 10, 10, 11, 11, 7, 13, 12, 9, 9, 10, 8, 11, 5, 12, 13, 10, 8, 6, 9, 16, 8, 9, 9, 10, 8, 7, 14, 14, 5, 11, 6, 9, 12, 10, 14, 6, 13, 11, 8, 15, 14, 8, 10, 18, 12, 15, 15, 9, 9, 9, 14, 8, 17, 12, 18, 9, 7, 9, 13, 9, 13, 12, 5, 13, 10, 14, 10, 12, 12, 8, 6, 7, 10, 13, 9, 5, 9, 9, 11, 12, 17, 5, 7, 9, 14, 9, 7, 9, 8, 12, 10, 10, 8, 8, 11, 16, 6, 11, 13, 10, 9, 11, 10, 4, 16, 12, 8, 12, 17, 14, 12, 15, 6, 8, 10, 4, 10, 6, 10, 13, 7, 15, 8, 9, 12, 7, 11, 14, 11, 9, 11, 11, 11, 6, 15, 8, 12, 12, 9, 11, 9, 6, 12, 7, 11, 8, 7, 6, 8, 11, 8, 11, 12, 12, 11, 13, 7, 11, 12, 13, 10, 10, 14, 8, 8, 12, 10, 9, 10, 12, 16, 5, 11, 11, 11, 8, 9, 10, 7, 7, 7, 9, 12, 8, 11, 5, 8, 8, 7, 12, 10, 4, 9, 10, 11, 5, 13, 9, 15, 11, 6, 7, 10, 7, 8, 12, 9, 10, 3, 9, 7, 12, 11, 8, 6, 7, 11, 6, 9, 13, 10, 4, 15, 8, 11, 15, 13, 13, 6, 8, 13, 8, 7, 9, 8, 10, 4, 6, 5, 11, 15, 5, 8, 9, 10, 5, 6, 5, 14, 10, 8, 12, 14, 17, 13, 9, 8, 12, 8, 7, 12, 13, 11, 9, 13, 11, 10, 9, 10, 13, 13, 9, 10, 10, 11, 10, 8, 7, 15, 6, 10, 6, 7, 8, 6, 10, 13, 9, 11, 10, 6, 14, 9, 7, 11, 8, 9, 7, 12, 12, 8, 8, 14, 12, 9, 9, 6, 9, 7, 9, 5, 5, 10, 6, 9, 9, 5, 11, 13, 8, 11, 7, 11, 11, 12, 9, 10, 11, 8, 5, 12, 9, 9, 3, 14, 13, 13, 9, 7, 12, 10, 5, 13, 13, 10, 11, 16, 12, 10, 8, 15, 8, 15, 9, 7, 7, 16, 8, 11, 18, 16, 10, 10, 10, 8, 11, 8, 7, 11, 13, 10, 19, 4, 8, 6, 7, 9, 8, 13, 7, 14, 9, 7, 9, 10, 10, 10, 9, 10, 11, 11, 10, 7, 5, 5, 9, 11, 11, 13, 14, 15, 10, 11, 14, 9, 13, 10, 9, 6, 4, 5, 6, 10, 11, 6, 7, 8, 12, 12, 8, 16, 6, 10, 5, 5, 13, 11, 11, 12, 10, 11, 10, 8, 11, 3, 7, 17, 10, 12, 6, 13, 15, 6, 11, 15, 9, 8, 12, 5, 8, 5, 8, 10, 13, 10, 8, 14, 5, 7, 11, 12, 12, 8, 11, 13, 8, 10, 13, 8, 10, 11, 16, 12, 9, 11, 12, 13, 11, 10, 8, 15, 10, 11, 5, 13, 17, 14, 8, 10, 11, 13, 9, 14, 6, 11, 8, 9, 13, 7, 16, 9, 8, 12, 14, 11, 13, 9, 8, 10, 7, 11, 20, 9, 9, 15, 14, 5, 15, 7, 15, 15, 12, 11, 7, 6, 11, 10, 6, 10, 6, 11, 16, 4, 13, 16, 14, 5, 15, 13, 6, 12, 11, 10, 7, 15, 10, 11, 15, 4, 10, 10, 11, 10, 9, 10, 10, 13, 9, 8, 7, 6, 10, 9, 10, 11, 12, 9, 8, 5, 11, 13, 10, 8, 9, 11, 5, 14, 11, 12, 5, 13, 11, 8, 9, 13, 13, 12, 10, 11, 9, 9, 9, 6, 6, 8, 20, 4, 8, 10, 9, 12, 12, 11, 9, 9, 6, 10, 8, 9, 9, 11, 12, 11, 12, 12, 8, 9, 18, 11, 10, 10, 14, 10, 6, 11, 9, 6, 15, 10, 12, 14, 12, 11, 8, 15, 9, 5, 6, 9, 10, 10, 10, 16, 12, 9, 10, 7, 10, 12, 10, 10, 14, 9]\n\n\n\n\n\n[22, 13, 20, 24, 15, 20, 20, 20, 18, 16, 18, 26, 30, 22, 25, 33, 28, 22, 14, 16, 20, 20, 21, 18, 15, 18, 24, 14, 22, 24, 19, 21, 22, 14, 23, 22, 17, 19, 24, 22, 13, 22, 9, 17, 19, 21, 13, 19, 21, 17, 17, 22, 25, 25, 21, 17, 28, 16, 25, 17, 16, 19, 21, 20, 16, 24, 14, 19, 17, 20, 15, 25, 21, 15, 21, 22, 12, 27, 18, 23, 21, 24, 23, 19, 20, 14, 14, 23, 23, 20, 27, 15, 17, 18, 23, 9, 21, 17, 22, 17, 26, 21, 20, 16, 22, 21, 20, 16, 19, 13, 17, 18, 20, 14, 16, 16, 25, 21, 14, 20, 21, 32, 31, 19, 18, 26, 19, 20, 22, 20, 14, 18, 25, 19, 24, 20, 16, 18, 22, 24, 22, 15, 15, 18, 14, 17, 20, 30, 23, 18, 27, 18, 24, 21, 20, 24, 26, 19, 16, 29, 23, 16, 22, 18, 23, 10, 23, 20, 17, 16, 26, 19, 16, 20, 21, 11, 20, 21, 23, 15, 19, 22, 20, 21, 17, 11, 15, 22, 24, 19, 21, 29, 18, 20, 18, 20, 19, 24, 14, 19, 17, 16, 19, 18, 18, 16, 16, 24, 22, 19, 12, 29, 18, 16, 19, 17, 19, 16, 20, 24, 28, 24, 19, 14, 19, 24, 16, 15, 23, 17, 17, 31, 23, 28, 25, 24, 17, 20, 12, 16, 14, 19, 14, 22, 28, 25, 20, 16, 16, 20, 19, 12, 18, 21, 18, 21, 16, 23, 21, 15, 10, 15, 27, 15, 18, 8, 14, 16, 15, 25, 26, 19, 16, 19, 20, 16, 23, 23, 22, 21, 22, 24, 22, 19, 18, 18, 30, 17, 25, 22, 15, 18, 10, 23, 31, 19, 22, 29, 24, 22, 22, 23, 15, 15, 13, 19, 20, 20, 21, 21, 25, 16, 19, 27, 21, 23, 19, 19, 15, 18, 28, 17, 14, 20, 22, 22, 25, 17, 19, 26, 16, 19, 21, 21, 15, 17, 26, 28, 24, 16, 27, 21, 17, 21, 22, 21, 28, 17, 23, 23, 27, 13, 19, 18, 20, 28, 14, 26, 20, 22, 14, 13, 34, 25, 21, 26, 21, 11, 25, 20, 14, 20, 16, 24, 26, 20, 13, 19, 19, 18, 13, 18, 24, 18, 20, 22, 19, 20, 15, 19, 30, 20, 15, 18, 26, 25, 20, 21, 26, 25, 23, 20, 18, 24, 15, 20, 24, 15, 21, 26, 23, 16, 23, 23, 22, 21, 23, 27, 16, 19, 13, 15, 23, 24, 16, 19, 18, 19, 23, 26, 25, 29, 22, 19, 18, 21, 23, 28, 27, 24, 15, 21, 25, 18, 19, 13, 14, 23, 26, 16, 13, 22, 17, 25, 14, 24, 15, 29, 20, 18, 12, 19, 18, 21, 19, 30, 24, 28, 22, 15, 11, 7, 26, 16, 13, 19, 28, 20, 13, 26, 19, 19, 19, 24, 22, 13, 16, 17, 26, 21, 18, 17, 25, 21, 15, 24, 18, 19, 14, 17, 20, 21, 17, 21, 19, 26, 24, 22, 18, 17, 17, 19, 18, 35, 19, 17, 19, 17, 20, 16, 20, 29, 22, 17, 15, 16, 18, 22, 24, 18, 18, 18, 19, 19, 20, 21, 22, 20, 17, 25, 16, 17, 19, 14, 13, 23, 19, 15, 20, 20, 22, 22, 25, 12, 23, 16, 24, 21, 22, 18, 12, 18, 20, 31, 25, 20, 24, 20, 14, 18, 22, 21, 26, 14, 24, 21, 26, 28, 19, 20, 20, 18, 19, 18, 18, 21, 19, 21, 21, 17, 16, 18, 17, 15, 21, 17, 38, 20, 26, 25, 23, 24, 20, 24, 25, 15, 18, 19, 20, 24, 19, 24, 15, 23, 17, 23, 16, 14, 16, 17, 19, 22, 14, 14, 21, 31, 23, 22, 24, 15, 23, 18, 27, 12, 27, 25, 26, 15, 25, 23, 21, 12, 22, 23, 15, 26, 18, 9, 24, 20, 21, 17, 15, 19, 14, 28, 20, 19, 25, 22, 16, 14, 21, 11, 16, 14, 24, 22, 25, 21, 20, 18, 24, 26, 18, 18, 23, 16, 22, 24, 23, 18, 15, 19, 14, 16, 20, 30, 14, 17, 24, 17, 30, 34, 21, 10, 23, 17, 22, 17, 18, 22, 23, 21, 21, 19, 15, 23, 22, 18, 25, 31, 17, 17, 21, 22, 28, 22, 30, 16, 21, 20, 22, 17, 27, 25, 16, 30, 18, 25, 19, 18, 21, 16, 19, 15, 21, 17, 21, 16, 18, 12, 18, 21, 25, 15, 25, 18, 21, 17, 24, 16, 24, 18, 21, 24, 12, 20, 19, 23, 23, 26, 18, 18, 14, 16, 14, 18, 19, 18, 23, 23, 17, 15, 21, 19, 25, 16, 24, 19, 18, 15, 21, 19, 22, 24, 27, 26, 16, 25, 17, 18, 12, 18, 19, 19, 21, 19, 17, 25, 16, 24, 27, 25, 12, 22, 21, 23, 18, 22, 14, 20, 24, 25, 18, 16, 25, 22, 24, 19, 19, 12, 20, 14, 23, 27, 21, 21, 24, 29, 13, 24, 17, 19, 15, 16, 21, 20, 22, 18, 19, 20, 22, 18, 18, 17, 17, 20, 22, 19, 21, 23, 20, 27, 16, 21, 19, 21, 20, 28, 16, 22, 23, 17, 17, 17, 15, 19, 12, 12, 17, 25, 15, 23, 20, 22, 16, 19, 21, 13, 13, 24, 18, 23, 17, 27, 19, 15, 20, 22, 21, 16, 18, 27, 22, 22, 23, 20, 14, 22, 21, 18, 23, 14, 17, 25, 17, 20, 19, 15, 16, 16, 16, 14, 19, 25, 24, 19, 27, 23, 21, 20, 18, 13, 15, 23, 17, 19, 26, 13, 18, 17, 19, 20, 22, 24, 14, 15, 21, 16, 22, 20, 22, 16, 15, 19, 19, 16, 22, 22, 22, 32, 19, 14, 14, 23, 28, 22, 19, 21, 21, 26, 16, 18, 18, 14, 19, 13, 20, 21, 12, 19, 18, 22, 21, 22, 13, 15, 19, 17, 18, 18, 12, 14, 16, 17, 15, 19, 16, 14, 26, 28, 13, 20, 23, 25, 23, 21, 21, 19, 18, 15, 23, 18, 20, 21, 18, 27, 25, 19, 23, 21, 30, 18, 29, 21, 25, 25, 21, 13, 19, 19, 17, 25, 25, 17, 23, 26, 19, 19, 19, 24, 18, 26, 12, 21, 23, 19, 13, 26, 15, 28, 16, 19, 15, 17, 21, 13, 20, 17, 19, 26, 29, 25, 26, 23, 26, 18, 13, 20, 25, 10, 16, 26, 30, 14, 19, 21, 18, 16, 18, 23, 24, 29, 12, 19, 11, 21, 22, 28, 28, 27, 30, 23, 23, 19, 12, 18, 21, 22, 24, 24, 24, 24, 22, 19, 26, 12, 19, 17, 21, 18, 14, 27, 24, 22, 29, 19, 23, 14, 20, 16, 8, 13, 22, 25, 19, 30, 19, 17, 14, 24, 24, 8, 29, 19, 24, 25, 17, 22, 17, 20, 15, 23, 16, 23, 26, 12, 23, 15, 25, 17, 14, 23, 16, 21, 21, 13, 21, 18, 14, 27, 15, 19, 24, 20, 14, 21, 21, 15, 23, 23, 26, 28, 20, 22, 19, 22, 18, 24, 19, 22, 26, 18, 22, 26, 21, 18, 17, 19, 23, 24, 20, 17, 29, 16, 23, 12, 16, 23, 18, 24, 16, 16, 22, 22, 27, 22, 21, 20, 24, 22, 12, 22, 24, 20, 19, 17, 18, 23, 24, 18, 16, 26, 18, 19, 18, 17, 17, 16, 29, 21, 17, 21, 15, 21, 31, 15, 17, 27, 19, 15, 17, 28, 25, 24, 20, 23, 27, 19, 14, 19, 22, 15, 27, 24, 21, 11, 17, 20, 9, 14, 17, 25, 15, 22, 23, 26, 19, 23, 15, 17, 14, 24, 17, 16, 22, 18, 14, 28, 18, 21, 23, 15, 16, 17, 24, 23, 22, 19, 17, 22, 24, 20, 24, 18, 19, 24, 20, 21, 23, 18, 21, 21, 14, 26, 26, 16, 16, 9, 26, 22, 24, 22, 21, 19, 20, 24, 27, 21, 26, 22, 27, 16, 16, 29, 17, 30, 16, 14, 17, 23, 17, 29, 24, 16, 20, 24, 25, 22, 18, 20, 30, 17, 19, 17, 23, 18, 19, 19, 18, 24, 16, 26, 16, 15, 24, 17, 14, 17, 22, 20, 16, 22, 21, 24, 18, 19, 16, 21, 18, 14, 16, 18, 27, 16, 17, 20, 23, 17, 20, 22, 29, 28, 31, 14, 14, 21, 12, 25, 19, 12, 27, 17, 21, 13, 21, 19, 18, 26, 17, 11, 17, 26, 20, 23, 20, 19, 20, 17, 23, 23, 22, 23, 17, 34, 34, 20, 17, 14, 18, 18, 21, 11, 23, 16, 22, 18, 17, 25, 22, 23, 23, 22, 21, 21, 20, 14, 25, 28, 19, 21, 26, 14, 24, 13, 25, 12, 25, 14, 20, 21, 15, 11, 15, 30, 23, 19, 26, 10, 17, 29, 18, 13, 21, 19, 20, 13, 21, 19, 15, 22, 27, 21, 18, 16, 21, 20, 20, 25, 20, 15, 26, 22, 22, 18, 15, 19, 25, 19, 21, 16, 30, 23, 23, 18, 18, 22, 14, 17, 10, 14, 22, 16, 14, 21, 21, 20, 29, 26, 24, 20, 19, 24, 14, 19, 19, 16, 30, 20, 16, 21, 11, 20, 19, 16, 20, 23, 26, 18, 19, 14, 30, 15, 17, 13, 22, 26, 16, 27, 15, 16, 16, 18, 21, 16, 14, 21, 25, 17, 18, 10, 17, 20, 21, 11, 13, 26, 15, 28, 18, 14, 19, 24, 23, 21, 21, 27, 11, 19, 29, 16, 24, 19, 17, 26, 21, 15, 17, 22, 25, 16, 21, 22, 22, 17, 18, 16, 11, 20, 18, 21, 25, 26, 18, 25, 17, 20, 18, 25, 24, 16, 17, 26, 22, 23, 28, 16, 12, 19, 26, 16, 22, 27, 14, 23, 18, 24, 20, 22, 23, 22, 13, 23, 23, 25, 11, 17, 20, 28, 16, 16, 24, 18, 19, 19, 20, 22, 21, 20, 18, 21, 24, 17, 13, 27, 15, 19, 12, 18, 24, 11, 29, 18, 22, 15, 23, 17, 13, 16, 24, 22, 20, 22, 18, 14, 18, 19, 25, 15, 24, 15, 22, 11, 21, 18, 15, 24, 21, 29, 15, 17, 15, 15, 13, 25, 16, 19, 19, 29, 19, 25, 19, 22, 17, 22, 15, 22, 20, 24, 26, 21, 25, 25, 24, 21, 20, 23, 25, 16, 21, 19, 20, 18, 34, 24, 14, 15, 27, 22, 31, 28, 22, 28, 16, 21, 17, 18, 16, 18, 22, 15, 21, 19, 20, 18, 12, 22, 18, 27, 20, 18, 20, 17, 21, 18, 19, 26, 18, 14, 18, 19, 19, 9, 21, 20, 28, 27, 20, 14, 19, 34, 17, 14, 27, 12, 13, 18, 18, 24, 23, 14, 21, 15, 27, 21, 13, 12, 20, 22, 22, 19, 14, 27, 17, 15, 26, 14, 15, 10, 20, 20, 20, 17, 25, 21, 12, 18, 12, 22, 27, 14, 24, 15, 17, 13, 23, 18, 24, 18, 14, 26, 21, 23, 24, 26, 20, 21, 20, 22, 18, 26, 31, 18, 15, 23, 20, 21, 15, 16, 22, 16, 18, 18, 20, 17, 14, 13, 25, 18, 18, 20, 16, 24, 27, 33, 17, 21, 21, 24, 24, 26, 16, 24, 13, 18, 23, 24, 30, 25, 26, 19, 20, 25, 18, 23, 28, 16, 22, 16, 20, 26, 22, 18, 25, 18, 21, 22, 15, 12, 21, 24, 22, 19, 23, 28, 21, 20, 22, 10, 23, 15, 11, 19, 10, 18, 23, 12, 23, 18, 25, 21, 19, 19, 21, 21, 20, 13, 27, 21, 23, 15, 15, 11, 25, 10, 22, 21, 21, 21, 17, 20, 14, 25, 22, 13, 22, 22, 17, 15, 17, 24, 23, 15, 21, 19, 20, 25, 28, 15, 14, 21, 16, 16, 16, 16, 12, 26, 12, 20, 12, 29, 18, 25, 24, 23, 21, 23, 28, 25, 13, 19, 30, 20, 28, 18, 18, 27, 20, 21, 18, 17, 18, 19, 27, 22, 14, 23, 19, 25, 16, 25, 40, 17, 20, 20, 14, 18, 26, 23, 13, 16, 21, 18, 22, 21, 21, 15, 20, 14, 20, 19, 17, 21, 19, 15, 30, 13, 15, 24, 27, 26, 20, 15, 22, 20, 13, 26, 25, 23, 21, 23, 32, 23, 19, 18, 18, 25, 19, 24, 24, 25, 20, 23, 25, 29, 20, 13, 26, 25, 22, 17, 15, 13, 17, 16, 26, 20, 21, 16, 19, 17, 13, 26, 28, 23, 14, 17, 15, 20, 22, 21, 23, 13, 23, 24, 18, 22, 19, 25, 30, 29, 21, 23, 15, 19, 22, 23, 20, 24, 19, 26, 14, 21, 14, 22, 19, 29, 22, 23, 18, 16, 23, 25, 16, 15, 19, 16, 13, 20, 22, 22, 14, 24, 20, 18, 22, 12, 20, 20, 23, 18, 19, 27, 16, 19, 23, 20, 16, 21, 26, 25, 29, 17, 13, 23, 23, 20, 14, 18, 18, 13, 24, 19, 17, 21, 16, 23, 23, 24, 20, 25, 24, 18, 16, 24, 18, 17, 10, 15, 23, 15, 13, 21, 24, 21, 21, 23, 17, 18, 22, 26, 25, 23, 20, 20, 25, 21, 14, 21, 12, 21, 24, 21, 19, 23, 13, 25, 24, 14, 20, 13, 16, 17, 22, 19, 24, 26, 18, 12, 12, 13, 16, 16, 19, 19, 18, 23, 22, 21, 23, 22, 14, 20, 26, 31, 22, 16, 20, 18, 16, 15, 16, 12, 15, 24, 23, 19, 16, 18, 21, 21, 18, 20, 22, 17, 23, 16, 15, 21, 24, 19, 20, 18, 13, 19, 18, 29, 15, 28, 17, 15, 17, 16, 17, 25, 20, 18, 19, 13, 24, 17, 17, 19, 19, 20, 21, 25, 20, 9, 23, 17, 23, 25, 23, 20, 27, 20, 23, 28, 23, 15, 28, 19, 19, 19, 20, 21, 23, 12, 19, 21, 32, 23, 21, 15, 26, 19, 15, 22, 28, 30, 22, 13, 19, 20, 14, 19, 25, 22, 21, 18, 22, 26, 21, 25, 19, 22, 28, 17, 19, 27, 19, 26, 12, 16, 8, 21, 23, 19, 21, 11, 23, 18, 13, 18, 18, 15, 19, 20, 18, 24, 19, 18, 16, 21, 21, 19, 18, 16, 24, 21, 16, 17, 23, 18, 21, 14, 23, 26, 25, 22, 20, 18, 21, 20, 22, 22, 21, 27, 17, 20, 23, 20, 23, 23, 22, 16, 12, 13, 25, 23, 27, 22, 20, 22, 23, 20, 22, 21, 25, 11, 22, 23, 26, 23, 22, 21, 22, 9, 18, 25, 13, 25, 21, 24, 23, 18, 21, 25, 14, 24, 19, 19, 24, 17, 19, 12, 17, 17, 17, 25, 18, 17, 23, 23, 21, 21, 19, 18, 21, 23, 27, 17, 20, 15, 22, 19, 25, 19, 18, 16, 18, 17, 17, 20, 19, 25, 17, 29, 20, 14, 23, 15, 20, 24, 14, 13, 13, 19, 18, 16, 16, 22, 22, 20, 21, 14, 15, 15, 20, 19, 26, 19, 19, 17, 20, 18, 23, 14, 12, 19, 20, 17, 22, 29, 21, 19, 15, 14, 21, 19, 23, 25, 18, 14, 24, 16, 22, 26, 23, 23, 23, 27, 21, 16, 25, 12, 19, 21, 28, 24, 17, 21, 18, 18, 19, 19, 19, 18, 20, 21, 23, 22, 11, 19, 21, 20, 22, 26, 24, 26, 18, 14, 15, 22, 25, 22, 29, 19, 22, 25, 33, 18, 23, 19, 25, 15, 21, 21, 22, 23, 19, 27, 23, 22, 28, 21, 13, 20, 15, 21, 17, 30, 22, 14, 20, 26, 21, 23, 17, 21, 20, 13, 16, 21, 14, 27, 22, 18, 22, 19, 24, 20, 11, 23, 19, 27, 14, 19, 27, 23, 22, 24, 19, 17, 20, 20, 8, 24, 23, 26, 18, 17, 21, 26, 23, 19, 22, 22, 24, 15, 27, 15, 24, 13, 22, 20, 23, 31, 22, 17, 12, 21, 15, 10, 24, 18, 19, 17, 23, 16, 20, 21, 19, 14, 18, 22, 25, 15, 27, 15, 25, 27, 19, 18, 24, 19, 22, 22, 22, 15, 17, 19, 19, 21, 22, 15, 21, 18, 23, 23, 21, 19, 20, 31, 21, 16, 18, 13, 22, 19, 22, 20, 20, 28, 18, 23, 19, 24, 16, 24, 19, 13, 19, 21, 24, 26, 22, 21, 19, 18, 22, 21, 15, 21, 17, 19, 16, 22, 8, 23, 17, 20, 21, 19, 11, 22, 17, 21, 15, 23, 18, 16, 24, 21, 19, 26, 16, 22, 16, 17, 26, 16, 19, 19, 21, 24, 19, 16, 25, 16, 13, 20, 26, 22, 27, 19, 14, 18, 18, 25, 24, 18, 19, 7, 21, 26, 19, 22, 16, 17, 22, 21, 18, 21, 19, 22, 24, 25, 19, 28, 27, 19, 21, 13, 24, 25, 31, 19, 13, 22, 16, 20, 18, 28, 16, 27, 13, 14, 20, 25, 25, 20, 17, 20, 15, 21, 25, 26, 15, 17, 15, 19, 25, 22, 27, 25, 16, 14, 23, 16, 24, 20, 17, 22, 23, 22, 24, 18, 17, 23, 21, 25, 19, 17, 16, 21, 25, 22, 22, 24, 20, 15, 27, 26, 21, 20, 22, 24, 25, 20, 17, 15, 21, 17, 22, 12, 21, 24, 23, 24, 15, 14, 25, 20, 18, 24, 29, 21, 18, 22, 15, 17, 20, 16, 18, 20, 19, 25, 26, 20, 24, 18, 23, 15, 18, 29, 18, 24, 22, 19, 14, 15, 12, 16, 18, 23, 23, 21, 19, 20, 20, 11, 19, 20, 20, 19, 20, 17, 17, 25, 19, 21, 15, 15, 15, 27, 14, 21, 19, 16, 17, 19, 13, 24, 19, 21, 20, 21, 23, 13, 17, 20, 23, 15, 18, 14, 16, 27, 18, 19, 26, 19, 25, 26, 17, 24, 15, 13, 20, 21, 14, 24, 23, 17, 17, 14, 14, 18, 15, 20, 20, 17, 19, 22, 28, 13, 26, 12, 22, 17, 27, 16, 15, 17, 26, 18, 25, 23, 17, 25, 29, 14, 18, 18, 26, 25, 15, 17, 24, 27, 15, 15, 23, 27, 16, 15, 20, 24, 14, 30, 19, 28, 26, 19, 19, 18, 28, 18, 21, 22, 15, 20, 17, 19, 20, 25, 20, 18, 20, 24, 19, 10, 20, 27, 24, 22, 22, 15, 28, 29, 15, 20, 15, 23, 23, 16, 23, 10, 28, 21, 26, 14, 26, 12, 24, 19, 22, 25, 14, 16, 18, 20, 28, 15, 17, 25, 22, 24, 20, 19, 14, 17, 26, 28, 22, 17, 11, 17, 15, 8, 17, 20, 16, 18, 19, 12, 16, 28, 24, 20, 16, 23, 15, 20, 17, 33, 23, 17, 22, 30, 21, 29, 21, 23, 25, 17, 18, 25, 16, 14, 19, 21, 20, 22, 19, 22, 22, 12, 18, 21, 27, 22, 17, 23, 15, 17, 25, 20, 17, 16, 19, 16, 23, 22, 25, 19, 25, 10, 20, 11, 15, 24, 24, 19, 17, 21, 24, 23, 19, 22, 19, 16, 20, 19, 18, 23, 15, 17, 18, 28, 23, 16, 16, 19, 17, 19, 30, 18, 21, 21, 28, 21, 19, 19, 19, 12, 15, 11, 16, 24, 22, 24, 18, 14, 20, 20, 12, 27, 17, 14, 15, 18, 24, 19, 19, 23, 18, 23, 30, 27, 22, 24, 19, 23, 18, 18, 21, 18, 22, 19, 19, 20, 23, 13, 15, 15, 20, 25, 23, 24, 17, 23, 30, 17, 21, 21, 18, 25, 19, 17, 16, 28, 25, 16, 15, 18, 23, 17, 21, 18, 17, 11, 24, 17, 20, 16, 18, 19, 13, 27, 21, 13, 16, 21, 16, 17, 16, 19, 21, 25, 28, 20, 18, 21, 13, 15, 22, 13, 18, 26, 20, 11, 9, 22, 19, 18, 27, 6, 25, 25, 21, 17, 14, 25, 17, 19, 14, 20, 14, 19, 14, 25, 21, 27, 27, 17, 19, 16, 16, 15, 19, 16, 21, 20, 19, 16, 19, 17, 17, 15, 20, 26, 23, 24, 19, 34, 16, 17, 20, 15, 25, 14, 16, 17, 18, 18, 22, 19, 17, 21, 24, 26, 21, 22, 23, 19, 22, 18, 30, 17, 20, 20, 21, 24, 26, 24, 23, 22, 14, 22, 34, 17, 16, 19, 25, 15, 12, 26, 13, 25, 20, 13, 19, 21, 24, 17, 19, 15, 24, 25, 27, 23, 16, 13, 19, 21, 24, 24, 15, 16, 26, 22, 27, 27, 19, 16, 15, 18, 13, 21, 23, 18, 16, 17, 20, 15, 23, 18, 19, 28, 15, 18, 28, 21, 13, 30, 17, 17, 22, 26, 23, 28, 18, 14, 22, 10, 18, 17, 20, 29, 17, 19, 21, 18, 21, 18, 16, 21, 25, 20, 15, 23, 17, 20, 18, 22, 20, 19, 25, 22, 18, 18, 24, 21, 23, 24, 14, 18, 13, 16, 15, 19, 20, 15, 19, 15, 22, 24, 23, 16, 20, 24, 19, 16, 13, 19, 22, 24, 18, 29, 21, 20, 17, 15, 17, 20, 18, 22, 15, 32, 14, 16, 17, 13, 24, 13, 22, 19, 14, 21, 23, 18, 14, 19, 26, 21, 23, 15, 19, 15, 22, 26, 10, 14, 22, 21, 26, 21, 16, 17, 25, 10, 21, 20, 19, 15, 27, 21, 21, 19, 23, 21, 14, 19, 17, 20, 18, 24, 21, 23, 20, 18, 24, 12, 24, 21, 20, 24, 33, 20, 22, 16, 14, 14, 17, 17, 25, 31, 20, 21, 17, 18, 17, 23, 27, 18, 20, 16, 23, 30, 16, 11, 18, 10, 17, 19, 17, 16, 24, 17, 16, 27, 17, 23, 22, 15, 13, 30, 26, 20, 24, 24, 23, 28, 18, 24, 16, 15, 19, 17, 13, 13, 22, 25, 27, 22, 21, 23, 22, 21, 19, 22, 29, 16, 13, 22, 24, 20, 23, 21, 12, 17, 15, 21, 22, 12, 31, 31, 24, 16, 23, 23, 19, 16, 21, 23, 22, 13, 23, 26, 21, 24, 20, 24, 16, 20, 20, 22, 19, 23, 22, 20, 18, 19, 17, 13, 24, 17, 20, 20, 19, 19, 20, 20, 20, 16, 19, 17, 16, 21, 18, 15, 22, 25, 26, 20, 19, 24, 14, 16, 18, 16, 26, 17, 18, 23, 14, 14, 19, 16, 23, 20, 25, 23, 11, 20, 19, 18, 13, 14, 22, 23, 20, 22, 15, 29, 24, 25, 19, 18, 16, 20, 23, 18, 22, 18, 18, 22, 27, 15, 21, 16, 18, 17, 16, 17, 20, 30, 26, 20, 22, 16, 15, 15, 30, 15, 16, 18, 15, 18, 13, 16, 26, 18, 21, 13, 14, 17, 16, 18, 23, 19, 12, 21, 19, 17, 29, 27, 18, 24, 12, 17, 17, 24, 27, 15, 19, 20, 16, 12, 17, 17, 28, 12, 23, 25, 16, 30, 12, 25, 16, 12, 21, 25, 25, 17, 16, 17, 17, 18, 15, 17, 22, 21, 17, 21, 25, 16, 19, 11, 17, 16, 25, 17, 19, 16, 18, 21, 24, 17, 17, 13, 17, 28, 27, 12, 21, 18, 16, 20, 23, 27, 20, 15, 22, 18, 18, 26, 27, 21, 20, 27, 27, 20, 20, 12, 27, 23, 27, 14, 20, 18, 19, 18, 25, 15, 18, 24, 17, 21, 17, 13, 20, 21, 27, 17, 21, 18, 17, 21, 17, 13, 27, 21, 21, 17, 17, 23, 24, 24, 18, 18, 20, 21, 19, 13, 17, 21, 16, 26, 12, 15, 17, 16, 15, 29, 17, 21, 20, 20, 20, 15, 21, 20, 15, 24, 26, 29, 22, 26, 16, 23, 19, 28, 17, 18, 24, 29, 19, 25, 16, 14, 23, 28, 27, 15, 24, 19, 15, 29, 20, 22, 20, 23, 14, 19, 17, 16, 22, 17, 14, 22, 26, 18, 25, 26, 22, 17, 15, 13, 15, 20, 19, 21, 27, 24, 16, 19, 27, 27, 18, 17, 18, 22, 12, 23, 15, 19, 13, 18, 17, 22, 17, 22, 22, 15, 17, 17, 25, 17, 21, 18, 24, 18, 28, 16, 15, 17, 19, 20, 20, 20, 12, 17, 18, 14, 22, 21, 18, 17, 15, 21, 22, 20, 23, 15, 21, 22, 17, 20, 20, 15, 18, 9, 25, 8, 10, 13, 17, 19, 13, 15, 16, 12, 18, 22, 21, 26, 27, 27, 23, 11, 20, 21, 27, 23, 13, 15, 22, 14, 16, 16, 23, 16, 28, 16, 26, 24, 20, 15, 18, 18, 26, 25, 22, 23, 25, 21, 20, 18, 20, 20, 32, 16, 27, 20, 26, 23, 22, 16, 16, 16, 17, 24, 14, 17, 24, 14, 23, 19, 14, 17, 21, 27, 18, 14, 23, 19, 21, 14, 25, 22, 18, 22, 18, 25, 14, 16, 19, 18, 13, 12, 19, 24, 28, 19, 17, 26, 19, 19, 21, 14, 24, 23, 13, 15, 19, 27, 23, 18, 20, 15, 29, 21, 13, 22, 13, 22, 17, 21, 25, 19, 24, 18, 22, 26, 26, 20, 20, 18, 16, 17, 20, 24, 23, 27, 21, 13, 17, 22, 26, 23, 22, 16, 20, 21, 27, 18, 17, 16, 22, 23, 19, 30, 17, 21, 18, 17, 19, 20, 19, 18, 15, 13, 26, 18, 16, 29, 22, 20, 19, 17, 17, 25, 20, 18, 17, 27, 17, 19, 25, 17, 19, 24, 22, 19, 18, 20, 23, 20, 24, 21, 21, 20, 14, 17, 17, 21, 24, 20, 23, 14, 22, 16, 24, 22, 14, 18, 18, 14, 17, 17, 26, 12, 19, 27, 25, 28, 19, 14, 21, 18, 20, 16, 14, 22, 13, 19, 16, 13, 18, 21, 21, 16, 22, 19, 25, 18, 23, 20, 17, 19, 30, 37, 23, 17, 8, 13, 21, 19, 12, 20, 19, 22, 18, 16, 16, 21, 12, 20, 23, 21, 27, 23, 23, 16, 21, 9, 19, 18, 19, 18, 15, 25, 23, 24, 26, 17, 20, 20, 20, 12, 16, 22, 27, 22, 24, 17, 23, 23, 25, 25, 18, 15, 26, 21, 17, 19, 21, 17, 25, 11, 24, 15, 19, 21, 13, 22, 19, 14, 15, 20, 18, 17, 26, 15, 22, 20, 24, 34, 23, 26, 17, 20, 23, 17, 29, 18, 18, 16, 21, 18, 15, 20, 23, 16, 24, 22, 23, 27, 21, 19, 30, 19, 20, 19, 27, 25, 13, 19, 21, 26, 18, 18, 17, 18, 18, 26, 20, 13, 23, 29, 19, 20, 17, 18, 12, 14, 21, 26, 18, 17, 28, 19, 27, 21, 15, 11, 21, 20, 18, 29, 20, 28, 23, 22, 20, 18, 11, 19, 16, 25, 27, 20, 22, 26, 14, 19, 31, 27, 14, 22, 19, 22, 13, 20, 20, 18, 21, 23, 23, 19, 23, 18, 25, 14, 20, 18, 15, 34, 21, 14, 21, 40, 24, 25, 10, 20, 28, 13, 17, 17, 18, 16, 21, 22, 23, 20, 21, 19, 19, 20, 19, 29, 22, 20, 22, 18, 20, 22, 24, 29, 17, 14, 13, 25, 19, 20, 22, 17, 26, 17, 20, 25, 16, 18, 20, 11, 23, 19, 26, 20, 23, 18, 19, 14, 19, 19, 13, 17, 23, 13, 15, 17, 25, 26, 25, 14, 22, 27, 20, 18, 24, 21, 13, 23, 17, 21, 10, 24, 20, 15, 22, 23, 23, 24, 26, 8, 21, 21, 16, 13, 19, 22, 18, 16, 18, 17, 23, 18, 20, 15, 22, 23, 22, 25, 13, 15, 25, 22, 17, 18, 12, 26, 25, 17, 17, 15, 19, 17, 23, 22, 23, 30, 26, 18, 15, 16, 22, 25, 18, 18, 15, 19, 13, 24, 22, 19, 19, 22, 22, 18, 10, 22, 19, 23, 20, 28, 14, 15, 22, 23, 23, 25, 19, 20, 18, 13, 20, 17, 18, 19, 19, 19, 23, 14, 15, 22, 17, 21, 27, 11, 26, 16, 17, 21, 24, 14, 15, 21, 22, 22, 25, 17, 25, 23, 22, 16, 21, 21, 15, 22, 23, 22, 25, 21, 15, 27, 17, 17, 19, 20, 19, 24, 21, 25, 29, 25, 19, 24, 22, 23, 17, 17, 16, 20, 16, 22, 21, 20, 34, 20, 19, 21, 16, 16, 23, 24, 27, 26, 38, 28, 12, 22, 21, 12, 17, 32, 23, 14, 15, 20, 20, 13, 25, 19, 16, 19, 29, 17, 21, 20, 14, 21, 21, 23, 13, 23, 27, 24, 15, 22, 25, 16, 16, 27, 21, 19, 22, 19, 17, 20, 22, 20, 16, 18, 27, 16, 16, 22, 20, 26, 24, 25, 27, 21, 20, 18, 22, 25, 21, 23, 16, 18, 21, 15, 12, 22, 20, 16, 17, 19, 17, 25, 18, 17, 16, 23, 19, 15, 26, 19, 20, 28, 24, 19, 16, 18, 31, 24, 19, 20, 26, 22, 28, 18, 24, 25, 12, 21, 19, 16, 20, 26, 19, 19, 26, 15, 12, 21, 20, 18, 25, 24, 21, 16, 26, 20, 20, 15, 22, 21, 28, 17, 20, 18, 25, 27, 17, 23, 24, 27, 25, 22, 15, 13, 19, 26, 32, 19, 26, 13, 22, 23, 24, 24, 18, 22, 25, 29, 21, 16, 25, 21, 15, 21, 22, 26, 25, 21, 23, 22, 22, 21, 15, 22, 23, 18, 15, 13, 31, 24, 13, 19, 15, 21, 18, 19, 18, 14, 20, 21, 24, 24, 23, 17, 31, 26, 11, 24, 13, 15, 18, 20, 17, 18, 24, 18, 21, 26, 20, 25, 19, 19, 17, 19, 22, 25, 21, 19, 25, 18, 18, 16, 26, 20, 13, 17, 23, 18, 21, 23, 26, 16, 16, 20, 18, 24, 20, 21, 19, 24, 18, 21, 14, 26, 20, 19, 25, 27, 25, 20, 21, 28, 23, 22, 24, 16, 25, 15, 17, 14, 22, 21, 12, 26, 26, 24, 26, 18, 14, 24, 17, 12, 19, 26, 19, 15, 20, 19, 14, 15, 17, 19, 19, 32, 21, 18, 25, 19, 20, 23, 21, 26, 26, 26, 18, 17, 25, 20, 20, 19, 18, 19, 19, 18, 13, 27, 13, 23, 27, 18, 19, 21, 18, 23, 29, 18, 16, 23, 22, 16, 21, 14, 19, 17, 20, 28, 23, 22, 17, 16, 16, 19, 21, 15, 22, 15, 11, 21, 30, 13, 24, 26, 26, 17, 21, 13, 26, 20, 19, 19, 14, 27, 21, 23, 26, 19, 17, 26, 13, 22, 17, 22, 22, 26, 19, 23, 14, 24, 22, 23, 27, 27, 21, 27, 23, 26, 14, 13, 18, 27, 16, 18, 23, 19, 28, 21, 16, 19, 25, 11, 28, 17, 24, 23, 23, 20, 17, 19, 27, 17, 14, 14, 25, 19, 16, 24, 19, 21, 18, 16, 17, 16, 18, 22, 20, 15, 17, 15, 18, 21, 18, 28, 27, 24, 16, 17, 22, 17, 28, 22, 18, 13, 28, 19, 17, 13, 15, 20, 23, 17, 12, 25, 28, 16, 27, 13, 21, 33, 11, 13, 29, 21, 20, 13, 21, 20, 18, 19, 17, 21, 25, 19, 24, 17, 19, 18, 22, 35, 25, 18, 28, 16, 21, 14, 24, 19, 19, 20, 18, 18, 14, 18, 18, 17, 20, 19, 15, 13, 29, 24, 20, 21, 20, 12, 11, 19, 16, 27, 28, 27, 22, 15, 11, 16, 18, 22, 18, 19, 22, 20, 16, 21, 24, 23, 22, 21, 20, 24, 15, 27, 18, 16, 31, 21, 20, 21, 10, 21, 22, 19, 23, 21, 26, 24, 23, 17, 17, 29, 21, 21, 18, 23, 17, 20, 22, 19, 16, 20, 16, 17, 22, 23, 15, 14, 21, 13, 20, 17, 22, 23, 27, 27, 25, 17, 21, 23, 15, 18, 15, 15, 15, 14, 21, 11, 22, 11, 18, 22, 31, 21, 15, 22, 28, 17, 19, 19, 22, 19, 23, 20, 18, 17, 20, 26, 18, 23, 15, 23, 23, 30, 23, 14, 19, 14, 25, 12, 25, 22, 20, 22, 20, 26, 19, 27, 18, 18, 17, 18, 18, 26, 22, 17, 24, 28, 22, 15, 14, 14, 13, 17, 15, 17, 18, 21, 21, 26, 19, 16, 22, 26, 25, 25, 22, 14, 21, 18, 15, 13, 16, 25, 26, 16, 20, 20, 18, 19, 18, 15, 20, 11, 14, 20, 17, 23, 18, 21, 24, 17, 26, 19, 13, 32, 14, 20, 18, 17, 26, 12, 32, 16, 16, 31, 22, 9, 23, 22, 25, 19, 18, 19, 25, 20, 19, 20, 17, 21, 19, 25, 18, 21, 15, 16, 18, 16, 21, 19, 17, 15, 23, 22, 10, 19, 15, 16, 24, 19, 26, 27, 21, 22, 18, 23, 23, 23, 27, 21, 26, 15, 30, 29, 21, 17, 22, 15, 14, 23, 12, 16, 20, 15, 11, 17, 20, 16, 18, 23, 19, 20, 20, 31, 13, 17, 22, 21, 15, 18, 16, 18, 19, 20, 15, 23, 14, 28, 25, 20, 16, 20, 11, 21, 19, 12, 18, 22, 16, 25, 27, 24, 21, 28, 19, 20, 19, 19, 16, 21, 11, 22, 23, 21, 13, 18, 17, 14, 23, 22, 15, 23, 11, 30, 16, 20, 15, 20, 19, 15, 16, 19, 27, 23, 29, 21, 20, 19, 29, 25, 27, 15, 28, 23, 20, 21, 27, 16, 21, 16, 20, 14, 17, 17, 14, 18, 18, 22, 21, 15, 18, 18, 17, 16, 21, 29, 19, 12, 22, 20, 26, 19, 18, 18, 18, 16, 21, 14, 25, 26, 23, 16, 16, 22, 19, 13, 28, 22, 38, 17, 17, 20, 27, 26, 25, 13, 17, 15, 26, 27, 18, 22, 22, 14, 15, 28, 23, 20, 20, 15, 11, 16, 28, 21, 18, 20, 17, 15, 30, 18, 20, 19, 11, 21, 26, 34, 18, 9, 18, 9, 24, 24, 20, 30, 20, 23, 26, 14, 25, 14, 11, 21, 19, 14, 18, 12, 24, 18, 28, 19, 20, 18, 18, 16, 11, 9, 15, 21, 19, 12, 10, 12, 15, 23, 23, 19, 21, 15, 19, 26, 17, 24, 28, 24, 16, 20, 28, 22, 25, 17, 23, 28, 19, 24, 21, 19, 17, 22, 23, 17, 22, 25, 23, 17, 21, 24, 27, 17, 23, 12, 22, 23, 16, 20, 23, 25, 22, 21, 25, 16, 21, 9, 22, 14, 23, 16, 23, 23, 21, 20, 17, 26, 18, 20, 17, 18, 17, 23, 30, 20, 21, 27, 15, 12, 12, 21, 21, 18, 21, 24, 16, 15, 22, 21, 16, 17, 27, 19, 19, 20, 25, 21, 21, 21, 17, 13, 24, 23, 21, 20, 27, 19, 23, 19, 22, 22, 21, 15, 25, 22, 27, 28, 24, 27, 20, 23, 19, 18, 19, 17, 16, 17, 16, 28, 19, 15, 20, 19, 21, 22, 16, 15, 13, 25, 20, 25, 14, 25, 22, 18, 24, 29, 14, 17, 20, 13, 23, 14, 16, 23, 18, 17, 20, 22, 19, 18, 13, 19, 18, 21, 12, 15, 14, 17, 16, 15, 24, 21, 13, 16, 12, 21, 17, 22, 17, 34, 24, 28, 23, 16, 19, 18, 18, 13, 24, 19, 9, 18, 29, 27, 14, 21, 22, 16, 31, 15, 20, 23, 11, 29, 23, 21, 18, 26, 21, 16, 19, 30, 14, 20, 20, 13, 25, 12, 17, 26, 25, 28, 27, 33, 22, 19, 20, 29, 18, 16, 19, 14, 17, 24, 21, 13, 17, 28, 22, 20, 17, 12, 27, 20, 16, 25, 20, 27, 15, 23, 20, 14, 20, 24, 15, 23, 19, 21, 24, 17, 19, 22, 16, 10, 15, 19, 21, 23, 27, 15, 17, 11, 18, 20, 16, 25, 16, 20, 20, 21, 21, 17, 12, 23, 24, 17, 27, 13, 16, 27, 18, 28, 22, 19, 20, 19, 9, 30, 22, 29, 27, 19, 21, 25, 19, 20, 21, 10, 25, 17, 18, 11, 22, 24, 24, 19, 28, 24, 15, 25, 22, 24, 19, 29, 13, 18, 19, 17, 17, 24, 23, 28, 17, 21, 19, 11, 21, 11, 17, 17, 21, 21, 25, 22, 22, 20, 21, 23, 24, 14, 21, 18, 24, 23, 18, 15, 12, 25, 10, 14, 23, 23, 20, 25, 13, 19, 21, 31, 12, 25, 26, 14, 16, 24, 19, 26, 14, 23, 18, 24, 20, 19, 21, 15, 20, 25, 16, 17, 23, 22, 17, 26, 25, 13, 18, 21, 19, 16, 19, 29, 21, 26, 23, 17, 25, 30, 19, 14, 28, 23, 18, 22, 10, 20, 25, 14, 18, 18, 19, 22, 16, 21, 35, 18, 23, 21, 17, 20, 25, 20, 26, 24, 19, 19, 12, 24, 19, 16, 24, 25, 24, 16, 16, 23, 14, 18, 14, 22, 21, 25, 14, 27, 19, 20, 21, 27, 12, 25, 15, 18, 22, 26, 15, 22, 28, 17, 21, 8, 26, 15, 24, 28, 22, 18, 20, 31, 20, 15, 14, 14, 17, 27, 26, 15, 19, 13, 18, 16, 26, 20, 23, 25, 27, 24, 21, 19, 24, 23, 22, 21, 20, 19, 27, 15, 21, 22, 15, 26, 26, 18, 14, 25, 19, 20, 23, 21, 15, 16, 21, 16, 20, 19, 24, 25, 18, 21, 29, 16, 16, 14, 22, 17, 21, 21, 23, 27, 15, 14, 13, 21, 19, 29, 20, 17, 23, 20, 22, 15, 25, 10, 16, 12, 34, 24, 22, 15, 13, 16, 20, 16, 16, 23, 19, 22, 17, 23, 13, 20, 17, 16, 20, 19, 22, 17, 27, 19, 27, 17, 23, 21, 19, 17, 17, 22, 21, 21, 25, 14, 18, 24, 20, 23, 21, 28, 21, 17, 19, 16, 17, 21, 24, 23, 26, 17, 16, 21, 19, 24, 28, 21, 17, 17, 20, 24, 17, 23, 14, 23, 18, 17, 21, 28, 16, 19, 15, 24, 31, 24, 23, 23, 13, 21, 17, 13, 22, 16, 20, 27, 18, 12, 16, 23, 16, 16, 35, 17, 30, 29, 21, 19, 27, 16, 18, 17, 15, 10, 20, 19, 16, 15, 24, 20, 16, 15, 19, 17, 24, 21, 8, 25, 16, 18, 22, 24, 19, 17, 13, 21, 27, 18, 24, 23, 25, 17, 13, 18, 28, 18, 20, 21, 16, 21, 18, 18, 23, 19, 15, 19, 23, 29, 29, 22, 17, 13, 21, 25, 15, 29, 24, 22, 15, 17, 18, 15, 19, 26, 21, 20, 26, 13, 19, 18, 22, 26, 18, 13, 13, 15, 22, 17, 24, 21, 21, 30, 16, 25, 17, 15, 19, 20, 17, 24, 16, 16, 17, 22, 21, 23, 22, 21, 22, 18, 20, 18, 19, 20, 16, 26, 22, 16, 18, 12, 21, 23, 18, 17, 11, 21, 17, 24, 16, 20, 23, 19, 25, 19, 22, 17, 27, 23, 21, 22, 10, 22, 22, 14, 18, 18, 16, 18, 15, 23, 28, 24, 30, 14, 24, 23, 21, 16, 21, 20, 20, 18, 18, 24, 21, 21, 19, 22, 15, 24, 22, 13, 18, 22, 16, 18, 23, 18, 28, 17, 15, 21, 17, 20, 19, 17, 19, 25, 14, 19, 22, 14, 17, 22, 19, 23, 19, 28, 15, 23, 23, 21, 17, 18, 18, 20, 22, 23, 24, 20, 12, 27, 19, 23, 19, 17, 22, 21, 23, 24, 20, 19, 27, 23, 16, 28, 20, 24, 28, 18, 20, 20, 22, 15, 26, 23, 18, 21, 21, 15, 18, 18, 11, 24, 18, 18, 19, 11, 21, 11, 24, 17, 21, 18, 30, 19, 14, 19, 35, 12, 26, 22, 18, 22, 19, 19, 21, 17, 14, 20, 19, 23, 17, 23, 13, 22, 18, 18, 17, 16, 22, 18, 21, 18, 22, 27, 15, 16, 24, 20, 29, 23, 21, 25, 15, 23, 22, 15, 23, 22, 22, 23, 25, 22, 13, 24, 26, 22, 22, 15, 16, 20, 18, 15, 14, 21, 16, 19, 19, 28, 20, 29, 14, 21, 22, 15, 21, 21, 19, 15, 21, 17, 24, 9, 21, 20, 14, 19, 22, 17, 15, 19, 16, 15, 14, 15, 26, 26, 24, 31, 20, 28, 26, 18, 22, 8, 18, 21, 16, 22, 28, 18, 24, 23, 25, 25, 17, 19, 19, 23, 17, 22, 26, 11, 23, 20, 21, 15, 20, 22, 16, 25, 20, 20, 26, 23, 23, 17, 26, 26, 19, 25, 20, 21, 14, 22, 16, 24, 26, 22, 20, 23, 25, 14, 23, 26, 31, 19, 15, 14, 19, 13, 21, 19, 17, 25, 18, 18, 22, 28, 14, 25, 19, 23, 15, 26, 16, 18, 21, 16, 17, 16, 21, 26, 13, 22, 18, 29, 29, 21, 17, 19, 28, 20, 19, 18, 18, 12, 19, 17, 20, 19, 26, 19, 21, 22, 24, 17, 16, 14, 21, 29, 15, 23, 16, 14, 22, 16, 15, 22, 13, 21, 23, 18, 15, 19, 32, 23, 17, 13, 15, 29, 12, 18, 18, 12, 18, 18, 16, 22, 14, 21, 22, 18, 23, 19, 19, 18, 15, 17, 16, 20, 13, 20, 13, 21, 17, 23, 15, 25, 21, 17, 14, 19, 19, 19, 19, 12, 22, 20, 10, 22, 16, 23, 17, 25, 20, 19, 23, 22, 21, 20, 16, 22, 22, 24, 19, 20, 24, 23, 13, 23, 16, 15, 20, 26, 16, 19, 15, 17, 20, 18, 27, 26, 16, 18, 17, 24, 24, 23, 22, 24, 23, 25, 23, 17, 17, 31, 19, 22, 21, 21, 27, 18, 20, 20, 28, 20, 16, 16, 25, 24, 19, 17, 20, 20, 24, 24, 22, 23, 18, 21, 9, 13, 24, 24, 19, 20, 16, 24, 27, 23, 11, 23, 12, 27, 19, 21, 17, 15, 17, 20, 22, 24, 25, 24, 21, 27, 18, 22, 20, 22, 21, 18, 25, 19, 18, 18, 23, 16, 23, 21, 23, 23, 21, 24, 20, 18, 24, 19, 19, 21, 16, 23, 14, 16, 18, 26, 18, 29, 11, 29, 17, 23, 24, 27, 20, 22, 16, 21, 21, 26, 16, 18, 20, 15, 14, 22, 23, 22, 17, 21, 18, 16, 17, 19, 21, 16, 23, 35, 23, 30, 16, 28, 21, 17, 21, 20, 12, 25, 12, 28, 12, 20, 20, 22, 16, 17, 19, 13, 19, 23, 17, 18, 17, 13, 21, 24, 20, 23, 24, 24, 25, 22, 21, 24, 20, 15, 25, 25, 18, 20, 23, 23, 21, 19, 26, 13, 22, 20, 24, 19, 22, 20, 24, 16, 24, 15, 24, 21, 22, 26, 20, 27, 20, 20, 21, 20, 16, 26, 22, 25, 27, 23, 18, 22, 24, 23, 24, 17, 24, 24, 18, 16, 23, 23, 12, 23, 20, 14, 9, 14, 16, 22, 11, 10, 14, 19, 24, 21, 24, 13, 17, 28, 11, 18, 26, 17, 16, 17, 22, 19, 22, 13, 20, 19, 20, 22, 27, 16, 19, 22, 17, 22, 18, 17, 27, 14, 15, 24, 21, 27, 17, 22, 17, 25, 20, 25, 14, 22, 21, 22, 23, 26, 17, 16, 21, 17, 19, 22, 13, 16, 18, 19, 18, 22, 21, 19, 16, 21, 18, 27, 22, 28, 18, 15, 22, 18, 14, 19, 21, 21, 20, 22, 27, 12, 11, 20, 13, 16, 15, 16, 16, 20, 17, 21, 18, 23, 12, 17, 18, 20, 14, 18, 22, 14, 16, 23, 16, 10, 24, 22, 17, 28, 17, 20, 13, 16, 17, 17, 20, 19, 12, 18, 25, 21, 21, 22, 22, 17, 24, 18, 25, 18, 17, 23, 25, 22, 15, 18, 17, 20, 18, 20, 26, 24, 19, 19, 20, 29, 13, 15, 15, 15, 23, 15, 22, 28, 21, 21, 27, 22, 15, 26, 15, 14, 16, 23, 18, 20, 14, 22, 16, 17, 24, 32, 17, 17, 11, 28, 25, 14, 18, 11, 21, 21, 21, 16, 17, 17, 16, 28, 24, 21, 19, 14, 14, 29, 27, 18, 16, 28, 21, 19, 26, 23, 20, 24, 16, 16, 14, 27, 19, 20, 25, 20, 15, 25, 14, 26, 13, 22, 16, 13, 13, 25, 27, 28, 19, 15, 12, 22, 14, 22, 15, 21, 18, 25, 23, 17, 17, 18, 22, 18, 14, 23, 22, 16, 18, 20, 21, 25, 18, 23, 24, 19, 26, 19, 13, 18, 21, 24, 25, 21, 19, 22, 23, 19, 27, 21, 16, 18, 24, 24, 26, 18, 24, 22, 22, 19, 19, 24, 17, 22, 18, 17, 14, 16, 18, 22, 19, 18, 17, 13, 26, 15, 18, 15, 18, 15, 22, 18, 22, 18, 20, 20, 15, 29, 14, 23, 21, 24, 25, 22, 16, 16, 20, 17, 9, 10, 16, 25, 16, 20, 20, 17, 24, 20, 21, 23, 16, 23, 11, 24, 18, 22, 15, 15, 22, 16, 15, 19, 17, 18, 23, 21, 27, 24, 20, 17, 22, 26, 18, 14, 23, 13, 17, 24, 21, 24, 19, 14, 18, 25, 21, 22, 22, 23, 27, 18, 27, 13, 19, 22, 31, 17, 15, 23, 22, 12, 28, 18, 17, 16, 19, 20, 18, 24, 20, 15, 19, 26, 24, 16, 16, 20, 23, 22, 20, 19, 34, 25, 24, 20, 20, 20, 19, 16, 20, 19, 29, 19, 19, 19, 21, 15, 22, 13, 14, 25, 14, 21, 16, 23, 9, 19, 20, 17, 21, 32, 23, 25, 19, 23, 24, 22, 20, 24, 20, 21, 10, 20, 22, 22, 19, 28, 18, 20, 16, 12, 20, 13, 26, 17, 12, 18, 24, 21, 22, 24, 18, 26, 25, 13, 17, 24, 15, 21, 32, 17, 14, 26, 22, 22, 25, 15, 32, 26, 14, 26, 18, 19, 15, 25, 11, 12, 15, 19, 15, 20, 18, 23, 28, 19, 18, 16, 18, 19, 20, 18, 22, 22, 19, 21, 21, 20, 20, 26, 21, 16, 22, 21, 16, 21, 15, 26, 22, 29, 18, 26, 25, 23, 19, 18, 18, 15, 19, 23, 21, 18, 20, 23, 21, 22, 18, 16, 15, 16, 12, 18, 15, 21, 18, 20, 27, 19, 25, 19, 27, 17, 21, 17, 20, 25, 19, 17, 24, 17, 23, 16, 25, 19, 22, 22, 15, 12, 15, 22, 19, 21, 22, 18, 19, 20, 16, 26, 26, 16, 25, 17, 25, 19, 24, 18, 13, 33, 29, 27, 16, 28, 27, 15, 18, 16, 20, 26, 20, 20, 23, 29, 17, 12, 15, 13, 19, 18, 14, 16, 21, 16, 21, 23, 23, 18, 9, 16, 23, 14, 17, 14, 15, 23, 23, 20, 24, 30, 24, 21, 18, 21, 19, 19, 27, 29, 23, 17, 12, 27, 24, 14, 19, 21, 21, 15, 16, 13, 23, 28, 19, 18, 24, 24, 20, 19, 16, 18, 13, 12, 15, 17, 19, 18, 16, 24, 20, 19, 16, 26, 16, 25, 14, 16, 22, 22, 21, 25, 23, 20, 23, 18, 20, 22, 18, 25, 24, 16, 23, 21, 22, 17, 24, 27, 26, 18, 14, 19, 24, 17, 25, 21, 28, 22, 18, 24, 19, 18, 23, 22, 21, 20, 29, 19, 20, 18, 21, 31, 18, 14, 22, 24, 25, 20, 16, 20, 22, 17, 17, 17, 18, 17, 20, 22, 21, 20, 18, 21, 19, 25, 18, 23, 31, 22, 17, 14, 15, 15, 22, 13, 23, 18, 21, 20, 19, 24, 27, 23, 20, 16, 16, 21, 12, 12, 25, 21, 20, 20, 18, 17, 26, 20, 29, 24, 22, 21, 24, 16, 21, 21, 21, 19, 20, 27, 15, 24, 19, 21, 11, 13, 16, 17, 14, 19, 21, 21, 28, 20, 17, 20, 20, 14, 22, 19, 14, 13, 17, 16, 24, 20, 19, 18, 12, 20, 20, 21, 20, 23, 17, 22, 26, 21, 19, 27, 14, 19, 18, 21, 14, 16, 21, 22, 21, 19, 18, 19, 20, 19, 14, 18, 17, 14, 19, 19, 14, 17, 23, 20, 17, 15, 19, 12, 22, 21, 18, 15, 17, 21, 20, 29, 18, 23, 21, 18, 20, 20, 16, 15, 19, 19, 16, 21, 20, 12, 17, 15, 21, 17, 26, 25, 22, 13, 12, 22, 10, 22, 20, 15, 15, 24, 22, 18, 22, 23, 20, 18, 19, 26, 18, 19, 18, 11, 20, 20, 23, 23, 23, 16, 18, 22, 29, 22, 21, 20, 19, 25, 21, 17, 18, 16, 25, 23, 16, 15, 15, 20, 19, 15, 20, 18, 25, 18, 19, 28, 15, 13, 12, 19, 10, 17, 11, 17, 22, 18, 18, 22, 22, 25, 21, 14, 28, 14, 18, 17, 17, 17, 25, 14, 26, 15, 18, 18, 17, 18, 24, 15, 18, 30, 16, 19, 20, 16, 21, 20, 24, 17, 11, 20, 29, 18, 17, 24, 14, 23, 18, 15, 29, 24, 20, 26, 15, 21, 13, 17, 16, 23, 20, 20, 23, 24, 26, 19, 17, 14, 20, 19, 25, 19, 11, 11, 21, 20, 16, 20, 19, 18, 19, 19, 27, 24, 20, 23, 19, 17, 23, 22, 28, 22, 25, 16, 22, 17, 26, 25, 10, 23, 28, 20, 21, 22, 15, 17, 23, 20, 28, 20, 26, 22, 26, 18, 14, 23, 19, 13, 18, 25, 25, 13, 17, 21, 15, 23, 21, 27, 27, 21, 14, 20, 26, 10, 27, 17, 18, 16, 31, 22, 17, 21, 13, 23, 21, 17, 17, 23, 16, 27, 22, 21, 25, 20, 26, 20, 24, 24, 21, 23, 24, 25, 23, 21, 16, 10, 25, 16, 20, 25, 22, 23, 21, 21, 21, 15, 12, 18, 22, 19, 27, 21, 26, 12, 26, 18, 18, 21, 16, 25, 27, 23, 13, 16, 19, 18, 19, 17, 12, 21, 23, 22, 19, 17, 27, 20, 21, 26, 19, 25, 20, 19, 21, 22, 22, 21, 21, 22, 25, 28, 18, 27, 16, 21, 16, 29, 16, 20, 24, 22, 20, 14, 22, 26, 23, 21, 13, 20, 20, 12, 21, 14, 18, 13, 23, 19, 28, 21, 20, 22, 23, 26, 22, 13, 24, 16, 17, 19, 21, 16, 20, 19, 22, 27, 13, 19, 26, 20, 20, 24, 16, 23, 14, 15, 20, 21, 28, 20, 20, 24, 15, 15, 14, 24, 21, 22, 20, 21, 16, 18, 18, 17, 23, 16, 17, 23, 17, 17, 20, 16, 22, 24, 19, 9, 22, 20, 19, 13, 25, 9, 13, 18, 17, 23, 19, 20, 23, 23, 25, 20, 20, 19, 16, 16, 26, 25, 17, 23, 17, 22, 28, 12, 19, 20, 19, 31, 17, 14, 23, 18, 24, 22, 18, 17, 19, 24, 16, 21, 17, 25, 18, 28, 24, 21, 25, 6, 17, 15, 25, 24, 21, 19, 24, 21, 21, 16, 20, 22, 20, 18, 28, 25, 16, 26, 21, 18, 17, 19, 20, 18, 22, 16, 22, 26, 16, 21, 22, 16, 24, 21, 17, 24, 15, 18, 21, 14, 18, 20, 24, 9, 29, 16, 19, 22, 23, 19, 17, 17, 16, 32, 24, 27, 17, 18, 10, 17, 20, 21, 18, 21, 25, 14, 19, 18, 20, 20, 19, 21, 26, 22, 22, 26, 26, 25, 28, 12, 15, 23, 20, 23, 25, 29, 22, 11, 22, 22, 21, 21, 15, 15, 22, 18, 25, 25, 30, 23, 19, 19, 23, 26, 18, 25, 29, 18, 23, 14, 13, 28, 12, 19, 16, 18, 26, 15, 26, 17, 16, 20, 25, 22, 15, 13, 20, 13, 22, 20, 19, 18, 22, 16, 23, 15, 14, 10, 22, 20, 27, 27, 20, 14, 25, 15, 20, 18, 20, 18, 24, 22, 17, 28, 20, 19, 18, 24, 23, 15, 18, 21, 26, 12, 27, 19, 18, 24, 15, 20, 20, 14, 19, 21, 16, 22, 19, 9, 17, 20, 23, 14, 19, 15, 17, 21, 16, 24, 16, 32, 17, 18, 21, 19, 29, 20, 17, 29, 25, 20, 17, 23, 19, 19, 18, 25, 17, 19, 18, 26, 22, 18, 20, 10, 22, 16, 24, 22, 23, 15, 18, 23, 16, 17, 28, 15, 19, 20, 12, 25, 13, 24, 24, 18, 21, 17, 26, 26, 22, 24, 20, 17, 11, 16, 19, 15, 16, 28, 21, 19, 27, 18, 18, 19, 26, 19, 19, 19, 20, 24, 20, 18, 15, 28, 17, 16, 22, 27, 18, 28, 13, 21, 17, 21, 20, 21, 14, 22, 19, 25, 25, 20, 22, 31, 24, 16, 22, 22, 15, 23, 14, 21, 12, 15, 13, 21, 15, 20, 14, 17, 20, 27, 22, 17, 18, 19, 25, 13, 24, 20, 17, 14, 15, 16, 13, 17, 22, 11, 16, 19, 19, 25, 16, 17, 19, 27, 23, 20, 20, 32, 20, 18, 20, 16, 16, 28, 19, 24, 19, 22, 28, 22, 27, 18, 23, 19, 14, 19, 21, 24, 12, 19, 15, 22, 17, 18, 17, 13, 22, 28, 24, 19, 13, 20, 21, 18, 19, 17, 15, 25, 16, 18, 18, 25, 13, 20, 24, 13, 22, 24, 18, 24, 12, 24, 13, 20, 14, 16, 15, 16, 19, 21, 23, 16, 21, 18, 18, 17, 18, 18, 23, 15, 16, 14, 16, 22, 14, 18, 15, 19, 16, 20, 28, 15, 19, 19, 13, 17, 23, 19, 19, 17, 28, 24, 22, 11, 17, 24, 21, 25, 27, 13, 14, 17, 24, 20, 23, 23, 9, 18, 27, 15, 20, 22, 21, 21, 22, 18, 26, 18, 20, 19, 21, 19, 20, 16, 22, 31, 21, 18, 21, 23, 15, 16, 20, 17, 16, 21, 8, 18, 22, 23, 16, 18, 14, 20, 16, 18, 22, 13, 26, 15, 21, 24, 26, 20, 24, 17, 17, 23, 19, 17, 20, 13, 18, 23, 16, 21, 13, 21, 21, 14, 24, 21, 18, 20, 23, 22, 14, 21, 23, 14, 24, 24, 21, 24, 16, 18, 19, 23, 18, 16, 20, 23, 18, 23, 16, 18, 13, 17, 21, 20, 19, 23, 21, 34, 27, 22, 18, 22, 19, 28, 18, 19, 22, 25, 20, 15, 22, 14, 18, 18, 15, 21, 20, 18, 16, 24, 22, 20, 26, 11, 20, 28, 15, 19, 17, 20, 22, 18, 21, 14, 20, 15, 15, 16, 20, 29, 27, 32, 26, 27, 19, 20, 19, 19, 16, 14, 17, 18, 24, 24, 19, 16, 26, 22, 18, 19, 14, 25, 22, 18, 22, 22, 29, 14, 19, 15, 19, 24, 19, 24, 14, 23, 16, 21, 16, 19, 21, 24, 15, 15, 25, 15, 22, 18, 24, 27, 21, 24, 10, 13, 18, 14, 20, 17, 15, 16, 20, 23, 19, 20, 17, 24, 14, 21, 22, 22, 18, 21, 14, 23, 22, 16, 17, 23, 17, 15, 17, 21, 14, 20, 18, 16, 26, 26, 21, 18, 22, 17, 22, 21, 21, 23, 24, 22, 15, 16, 18, 25, 22, 20, 22, 21, 18, 19, 27, 18, 26, 17, 27, 16, 19, 15, 24, 17, 23, 12, 25, 29, 24, 18, 26, 22, 29, 16, 24, 19, 19, 14, 26, 15, 29, 19, 23, 20, 20, 17, 19, 18, 22, 22, 26, 17, 23, 18, 12, 25, 21, 26, 18, 22, 24, 22, 26, 21, 20, 27, 21, 24, 18, 21, 23, 18, 17, 24, 15, 23, 21, 21, 22, 16, 21, 23, 24, 17, 26, 12, 21, 23, 24, 16, 14, 32, 28, 17, 21, 25, 22, 24, 22, 26, 22, 18, 21, 24, 24, 16, 25, 19, 26, 17, 16, 29, 25, 13, 22, 22, 23, 19, 21, 15, 22, 19, 14, 26, 21, 21, 17, 19, 18, 15, 29, 23, 21, 22, 22, 10, 18, 25, 16, 20, 22, 28, 24, 26, 15, 13, 20, 14, 21, 19, 20, 20, 23, 16, 17, 19, 17, 26, 26, 29, 14, 21, 16, 17, 19, 16, 18, 32, 15, 16, 18, 20, 18, 13, 21, 18, 20, 20, 15, 19, 20, 27, 18, 20, 21, 22, 19, 16, 20, 18, 15, 21, 20, 34, 25, 18, 27, 22, 20, 25, 26, 20, 18, 26, 21, 19, 20, 29, 21, 21, 12, 18, 14, 15, 23, 14, 22, 19, 24, 16, 22, 18, 18, 12, 17, 14, 24, 19, 21, 15, 18, 14, 21, 18, 18, 23, 24, 22, 17, 15, 15, 16, 20, 21, 20, 16, 20, 17, 24, 23, 15, 26, 16, 21, 18, 20, 19, 18, 20, 22, 18, 12, 24, 19, 16, 16, 23, 22, 24, 13, 23, 27, 12, 19, 18, 19, 17, 12, 24, 24, 30, 19, 25, 22, 18, 21, 20, 16, 12, 19, 19, 27, 18, 27, 19, 23, 23, 23, 13, 14, 16, 22, 16, 16, 20, 16, 11, 24, 17, 17, 12, 25, 18, 22, 25, 14, 18, 24, 16, 16, 25, 24, 20, 20, 23, 20, 19, 29, 23, 18, 33, 18, 25, 24, 20, 16, 24, 22, 21, 21, 26, 18, 17, 19, 19, 23, 25, 18, 25, 17, 14, 29, 26, 18, 23, 10, 26, 15, 20, 21, 21, 21, 17, 19, 29, 15, 32, 13, 22, 22, 28, 19, 23, 15, 15, 20, 18, 21, 23, 14, 20, 25, 12, 20, 21, 27, 18, 26, 22, 30, 14, 18, 20, 21, 17, 22, 30, 21, 23, 24, 20, 13, 28, 17, 16, 25, 24, 15, 17, 10, 13, 18, 20, 26, 11, 15, 19, 22, 15, 20, 18, 16, 19, 19, 19, 16, 28, 17, 16, 26, 19, 18, 24, 21, 16, 21, 26, 23, 30, 18, 25, 23, 23, 21, 20, 19, 17, 21, 20, 15, 26, 21, 22, 22, 24, 21, 27, 14, 18, 13, 24, 19, 22, 18, 15, 25, 17, 17, 14, 19, 14, 20, 25, 14, 21, 18, 18, 24, 24, 16, 17, 23, 23, 18, 10, 26, 20, 15, 22, 16, 19, 18, 20, 23, 11, 19, 20, 23, 22, 14, 15, 20, 22, 16, 21, 23, 16, 22, 19, 22, 18, 19, 20, 27, 21, 15, 19, 19, 18, 24, 14, 26, 19, 24, 17, 17, 10, 16, 26, 22, 16, 28, 17, 24, 16, 21, 18, 23, 15, 28, 15, 16, 24, 25, 19, 23, 17, 22, 10, 17, 26, 28, 18, 19, 21, 17, 25, 15, 19, 34, 23, 16, 16, 22, 19, 21, 17, 16, 14, 20, 15, 25, 21, 21, 17, 12, 24, 23, 24, 17, 18, 20, 26, 15, 21, 23, 21, 22, 20, 21, 25, 24, 16, 18, 12, 34, 14, 17, 16, 25, 18, 24, 14, 23, 26, 19, 21, 17, 17, 16, 26, 14, 18, 14, 12, 24, 19, 23, 22, 24, 15, 23, 22, 17, 26, 24, 24, 14, 18, 15, 24, 13, 19, 15, 20, 17, 28, 21, 26, 18, 17, 13, 15, 17, 21, 24, 22, 15, 19, 18, 21, 28, 9, 17, 17, 19, 23, 25, 17, 22, 12, 12, 27, 18, 14, 17, 20, 29, 19, 11, 21, 18, 16, 18, 17, 17, 11, 19, 23, 21, 17, 17, 21, 16, 19, 21, 17, 21, 24, 28, 19, 16, 26, 17, 18, 18, 22, 23, 21, 18, 28, 28, 23, 19, 24, 19, 16, 27, 20, 18, 22, 18, 19, 30, 20, 15, 24, 16, 15, 16, 20, 13, 20, 9, 17, 17, 19, 24, 15, 13, 23, 17, 15, 27, 26, 17, 18, 26, 20, 21, 24, 25, 20, 19, 17, 19, 16, 16, 20, 20, 20, 20, 18, 18, 20, 16, 21, 13, 20, 16, 15, 22, 23, 18, 19, 20, 17, 17, 19, 29, 24, 14, 12, 15, 13, 11, 19, 20, 19, 11, 14, 21, 17, 17, 12, 21, 23, 20, 18, 18, 17, 20, 23, 17, 25, 11, 20, 18, 22, 13, 13, 17, 25, 24, 16, 28, 17, 18, 14, 18, 19, 16, 12, 16, 18, 16, 21, 28, 15, 18, 29, 20, 21, 19, 16, 24, 23, 13, 18, 16, 20, 21, 21, 18, 15, 18, 22, 15, 24, 19, 24, 16, 15, 14, 21, 19, 19, 22, 17, 21, 29, 17, 23, 11, 24, 16, 27, 18, 22, 18, 11, 15, 25, 27, 21, 19, 19, 24, 21, 17, 17, 24, 20, 25, 16, 20, 17, 17, 21, 16, 19, 22, 19, 17, 35, 14, 21, 30, 18, 19, 17, 17, 26, 20, 19, 18, 16, 25, 9, 23, 21, 24, 24, 23, 20, 16, 20, 20, 25, 20, 16, 20, 23, 15, 19, 25, 13, 28, 13, 25, 18, 15, 12, 22, 14, 20, 20, 14, 16, 13, 24, 15, 19, 13, 18, 20, 19, 27, 25, 14, 19, 18, 13, 16, 11, 14, 16, 25, 18, 24, 17, 26, 28, 20, 16, 25, 22, 21, 19, 24, 15, 15, 29, 25, 18, 23, 20, 28, 17, 13, 21, 21, 29, 21, 16, 20, 22, 30, 14, 17, 19, 17, 18, 25, 20, 20, 20, 18, 23, 24, 19, 26, 20, 18, 23, 27, 15, 15, 19, 12, 11, 22, 13, 30, 14, 18, 26, 19, 19, 21, 27, 27, 23, 17, 25, 20, 19, 23, 21, 24, 18, 17, 19, 19, 27, 21, 25, 15, 18, 20, 18, 25, 24, 20, 19, 26, 20, 30, 13, 26, 20, 20, 16, 17, 23, 15, 18, 16, 29, 23, 16, 21, 14, 18, 20, 13, 22, 16, 16, 16, 31, 25, 19, 17, 15, 15, 17, 26, 15, 20, 14, 17, 19, 20, 21, 25, 14, 17, 22, 22, 15, 22, 16, 16, 19, 19, 19, 22, 19, 21, 30, 21, 19, 14, 17, 23, 21, 24, 24, 22, 24, 24, 30, 29, 19, 17, 25, 16, 21, 19]\n\n\n\n\n\n[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 32, 32, 32, 32, 33, 33, 34, 34, 34, 34, 34, 35, 35, 36, 36, 36, 38, 38, 38, 39, 39, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 25, 25, 25, 25, 26, 26, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 29, 30, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 33, 33, 33, 34, 34, 34, 35, 35, 36, 38, 38, 39, 40, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 27, 27, 27, 27, 27, 28, 28, 29, 29, 29, 29, 30, 30, 30, 30, 31, 32, 32, 32, 32, 32, 33, 33, 34, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 35, 36, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 40, 40, 40, 40, 40, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 34, 35, 35, 35, 36, 36, 36, 36, 37, 37, 37, 38, 38, 38, 39, 39, 39, 40, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 25, 25, 25, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 30, 30, 30, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 38, 38, 38, 38, 38, 39, 39, 40, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 28, 28, 28, 29, 29, 29, 29, 29, 29, 29, 30, 30, 30, 30, 30, 31, 32, 32, 32, 32, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 35, 35, 35, 36, 36, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 40, 40, 40, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 22, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 29, 30, 31, 31, 31, 32, 32, 33, 33, 33, 34, 34, 34, 34, 35, 35, 36, 36, 36, 36, 36, 36, 36, 37, 38, 38, 39, 39, 40, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26, 27, 27, 27, 27, 28, 29, 29, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 36, 36, 36, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39, 39, 40, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 25, 25, 25, 25, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 30, 30, 30, 30, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 35, 35, 35, 36, 36, 37, 37, 39, 39, 39, 39, 39, 40, 40, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 25, 26, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 29, 30, 30, 30, 30, 30, 30, 31, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 34, 35, 35, 36, 36, 36, 36, 36, 37, 37, 37, 37, 37, 37, 38, 39, 39, 39, 39, 40, 40, 40, 40]\n\n\n\n\n\nn\n\n\n\n\n\n\n\nSource Code\n---\ntitle: \"Getting Figure 2 from the paper\"\n---\n\n```{python}\nimport glob\nfrom exps import *\nimport matplotlib.pyplot as plt\n\nmodel = [\"SBM\", \"LFR\"]\ndr = { \"SBM\": (0, 40), \"LFR\": (0, 60) }\ncommunities = [\"Isolated_communities\", \"More_connected_communities\"]\n\ndef degrees(network):\n    return list(len(l) for l in network)\n\nfor m in model:\n    for c in communities:\n        files = glob.glob(f'../data/reference_communities/{c}/{m}/Run_*/twocommunities_edgelist.txt')\n        l = []\n        for f in files:\n            n = read_graph(f)\n            degs = degrees(n)\n            l.extend(degs)\n        print(l)\n        plt.figure()\n        hist(l, range=dr[m])\n        plt.title(f'{m}, {c}')\n        plt.xlabel(\"Node degree\")\n        plt.ylabel(\"Frequency\")\n        plt.show()\n```"
  },
  {
    "objectID": "exp2.html",
    "href": "exp2.html",
    "title": "Experiment 2",
    "section": "",
    "text": "Same graph as experiment 1, but we now measure the “collateral” consequences in a few different ways.\n\nCode\nfrom exps import *\nimport numpy\n\noverseeding_factor = 4\n\nparams = dict(\n    # graph params\n    n = 1000,\n    p1 = 0.01 / 2,\n    p2 = 0.01 / 2,\n    p_inter = 0.0001 / 2,\n    # seeding params\n    seed1 = overseeding_factor * 0.1,\n    seed2 = 0.1,\n    # IC params\n    alpha = 0.1,\n    reprs = 10000,\n    communities = [list(range(0, 1000)), list(range(1000, 2000))])\n\nparams[\"graph\"] = two_communities(params)\nparams[\"seeds\"] = set_seeds(params)\n\nWe generate a community graph, seeds, run the IC computation as before.\n\nCode\nic_result = run_experiment(params)\n\nBut now we collect our neighbor’s information first, and then compute the mean over that:\n\n\nCode\nimport matplotlib.pyplot as plt\n\nic_neighbor_result = collect_neighbor_data(ic_result, params)\nic_neighbor_result = list(numpy.mean(lst) for lst in ic_neighbor_result)\nplt.figure()\nplot_community_dists(ic_neighbor_result, params)\nplt.show()\n\n\n\n\n\nOr the min:\n\n\nCode\nic_neighbor_result = collect_neighbor_data(ic_result, params)\nic_neighbor_result = list(numpy.min(lst) for lst in ic_neighbor_result)\nplt.figure()\nplot_community_dists(ic_neighbor_result, params)\nplt.show()\n\n\n\n\n\n\n\n\nSource Code\n---\ntitle: \"Experiment 2\"\nformat: \n  html:\n    code-tools: true\n    code-fold: true\n---\n\nSame graph as [experiment 1](exp1.html), but we now measure the\n\"collateral\" consequences in a few different ways.\n\n```{python}\n#| code-fold: show\nfrom exps import *\nimport numpy\n\noverseeding_factor = 4\n\nparams = dict(\n    # graph params\n    n = 1000,\n    p1 = 0.01 / 2,\n    p2 = 0.01 / 2,\n    p_inter = 0.0001 / 2,\n    # seeding params\n    seed1 = overseeding_factor * 0.1,\n    seed2 = 0.1,\n    # IC params\n    alpha = 0.1,\n    reprs = 10000,\n    communities = [list(range(0, 1000)), list(range(1000, 2000))])\n\nparams[\"graph\"] = two_communities(params)\nparams[\"seeds\"] = set_seeds(params)\n```\n\nWe generate a community graph, seeds, run the IC computation as before.\n\n```{python}\nic_result = run_experiment(params)\n```\n\nBut now we collect our neighbor's information first, and then compute the mean over that:\n\n```{python}\nimport matplotlib.pyplot as plt\n\nic_neighbor_result = collect_neighbor_data(ic_result, params)\nic_neighbor_result = list(numpy.mean(lst) for lst in ic_neighbor_result)\nplt.figure()\nplot_community_dists(ic_neighbor_result, params)\nplt.show()\n```\n\nOr the min:\n\n```{python}\nic_neighbor_result = collect_neighbor_data(ic_result, params)\nic_neighbor_result = list(numpy.min(lst) for lst in ic_neighbor_result)\nplt.figure()\nplot_community_dists(ic_neighbor_result, params)\nplt.show()\n```"
  },
  {
    "objectID": "exp3.html",
    "href": "exp3.html",
    "title": "Experiment 3",
    "section": "",
    "text": "Two Erdos-Renyi graphs \\(n=1000, p=0.01\\) connected to one another with random edges, \\(p=0.0001\\). Same as before, but now we look at the overall probability conditioned on the community, and vary the overseeding.\n\nCode\nfrom exps import *\nimport numpy\nimport matplotlib.pyplot as plt\nimport json\n\ndef make_params(overseeding_factor):\n    return dict(\n        # graph params\n        n = 1000,\n        p1 = 0.01 / 2,\n        p2 = 0.01 / 2,\n        p_inter = 0.0001 / 2,\n        # seeding params\n        seed1 = overseeding_factor * 0.1,\n        seed2 = 0.1,\n        # IC params\n        alpha = 0.1,\n        reprs = 100,\n        communities = [list(range(0, 1000)), list(range(1000, 2000))]\n        )\n\ndef run_experiment_range(factors, f):\n    c1s = []\n    c2s = []\n    for factor in factors:\n        params = make_params(factor)\n        params[\"graph\"] = two_communities(params)\n        params[\"seeds\"] = set_seeds(params)\n        ic_result = run_experiment(params)\n        ic_result = f(ic_result, params)\n        c1, c2 = split_result_by_communities(ic_result, params)\n        c1s.append(numpy.mean(c1))\n        c2s.append(numpy.mean(c2))\n    return c1s, c2s\n\nfactors = [1,2,3,4,5,6,7,8,9]\n\ndef plot_curve(f, label):\n    c1s, c2s = run_experiment_range(factors, f)\n    plt.figure()\n    plt.plot(factors, c1s)\n    plt.plot(factors, c2s)\n    plt.xlabel(\"Overseeding factor\")\n    plt.ylabel(label)\n    plt.show()\n\nNo transformation:\n\n\nCode\nplot_curve(id, \"prob\")\n\n\n\n\n\nSquare:\n\n\nCode\nplot_curve(square, \"squared prob\")\n\n\n\n\n\nMean of neighbors:\n\n\nCode\nplot_curve(f_mean, \"mean of neighbors' prob\")\n\n\n\n\n\nMin of neighbors:\n\n\nCode\nplot_curve(f_min, \"min of neighbors' prob\")\n\n\n\n\n\n\n\n\nSource Code\n---\ntitle: \"Experiment 3\"\nformat: \n  html:\n    code-tools: true\n    code-fold: true\n---\n\nTwo Erdos-Renyi graphs $n=1000, p=0.01$ connected to one another with random edges, $p=0.0001$.\nSame as before, but now we look at the overall probability conditioned on the community, and\nvary the overseeding.\n\n```{python}\nfrom exps import *\nimport numpy\nimport matplotlib.pyplot as plt\nimport json\n\ndef make_params(overseeding_factor):\n    return dict(\n        # graph params\n        n = 1000,\n        p1 = 0.01 / 2,\n        p2 = 0.01 / 2,\n        p_inter = 0.0001 / 2,\n        # seeding params\n        seed1 = overseeding_factor * 0.1,\n        seed2 = 0.1,\n        # IC params\n        alpha = 0.1,\n        reprs = 100,\n        communities = [list(range(0, 1000)), list(range(1000, 2000))]\n        )\n\ndef run_experiment_range(factors, f):\n    c1s = []\n    c2s = []\n    for factor in factors:\n        params = make_params(factor)\n        params[\"graph\"] = two_communities(params)\n        params[\"seeds\"] = set_seeds(params)\n        ic_result = run_experiment(params)\n        ic_result = f(ic_result, params)\n        c1, c2 = split_result_by_communities(ic_result, params)\n        c1s.append(numpy.mean(c1))\n        c2s.append(numpy.mean(c2))\n    return c1s, c2s\n\nfactors = [1,2,3,4,5,6,7,8,9]\n\ndef plot_curve(f, label):\n    c1s, c2s = run_experiment_range(factors, f)\n    plt.figure()\n    plt.plot(factors, c1s)\n    plt.plot(factors, c2s)\n    plt.xlabel(\"Overseeding factor\")\n    plt.ylabel(label)\n    plt.show()\n```\n\nNo transformation:\n\n```{python}\nplot_curve(id, \"prob\")\n```\n\nSquare:\n\n```{python}\nplot_curve(square, \"squared prob\")\n```\n\nMean of neighbors:\n\n```{python}\nplot_curve(f_mean, \"mean of neighbors' prob\")\n```\n\nMin of neighbors:\n\n```{python}\nplot_curve(f_min, \"min of neighbors' prob\")\n```"
  },
  {
    "objectID": "fig-4.html",
    "href": "fig-4.html",
    "title": "Figure 4, etc",
    "section": "",
    "text": "Each result “row” is based off:\n\nA set of graphs (realizations of a particular graph model)\nA one-parameter family of experiments\n\n\nPreamble\n\nCode\nfrom exps import *\nimport copy\n\nn_reps = 100 # set this to 10000 when generating final results!\n\ndef run_experiment_batch(conf):\n    result = {}\n    for (k, params) in conf.items():\n        params = copy.copy(params)\n        params[\"ic_result\"] = run_experiment(params)\n        result[k] = params\n    return result\n\n\ndef figure_1(params):\n    c1, c2 = split_result_by_communities(params[\"ic_result\"], params)\n    plt.figure()\n    # FIXME THESE CHECKS SHOULD BE ON NODES TO DELETE\n    hist(list(x for x in c1 if x > 0)) # not in params.get(\"nodes_to_delete\", [])))\n    hist(list(x for x in c2 if x > 0)) # not in params.get(\"nodes_to_delete\", [])))\n    plt.xlabel(\"Access probability\")\n    plt.ylabel(\"Frequency\")\n    plt.show()\n    \ndef figure_2(conf):\n    x_values_1 = []\n    x_values_2 = []\n    y_values_1 = []\n    y_values_2 = []\n    for (k, v) in conf.items():\n        c1, c2 = split_result_by_communities(v[\"ic_result\"], v)\n        # FIXME THESE CHECKS SHOULD BE ON NODES TO DELETE\n        c1 = numpy.mean(list(x for x in c1 if x > 0))\n        c2 = numpy.mean(list(x for x in c2 if x > 0))\n        x_values_1.append(v[\"factor\"])\n        x_values_2.append(v[\"factor\"])\n        y_values_1.append(c1)\n        y_values_2.append(c2)\n    plt.figure()\n    sns.lineplot(x = x_values_1, y = y_values_1, estimator = numpy.mean, ci = 95)\n    sns.lineplot(x = x_values_2, y = y_values_2, estimator = numpy.mean, ci = 95)\n    sns.scatterplot(x = x_values_1, y = y_values_1)\n    sns.scatterplot(x = x_values_2, y = y_values_2)\n    plt.xlabel(\"Factor\")\n    plt.ylabel(\"Access\")\n    plt.show()\n\ndef figure_3(conf):\n    x_values = []\n    y_values = []\n    for (k, v) in conf.items():\n        c1, c2 = split_result_by_communities(v[\"ic_result\"], v)\n        c1 = numpy.mean(c1)\n        c2 = numpy.mean(c2)\n        f = min(c1, c2) / max(c1, c2)\n        x_values.append(v[\"factor\"])\n        y_values.append(f)\n    plt.figure()\n    sns.lineplot(x = x_values, y = y_values, estimator = numpy.mean, ci = 95)\n    sns.scatterplot(x = x_values, y = y_values)\n    plt.xlabel(\"Factor\")\n    plt.ylabel(\"Fairness\")\n    plt.legend(\"\")\n    plt.show()\n\nk = (5, graphs[0][\"files\"][0])\n\ndef run_and_plot(conf):\n    r = run_experiment_batch(conf)\n    figure_1(r[k])\n    figure_2(r)\n    figure_3(r)\n\n\n\nExperiment 1: Overseeding\n\n\nCode\ndef configure_experiment_1(factors, graphs):\n    result = {}\n    params = dict(\n        n1 = 1000,\n        n2 = 1000)\n    for f in factors:\n        for g in graphs:\n            # n = read_graph(g)\n            params[\"seed1\"] = f * 0.1\n            params[\"seed2\"] = 0.1 \n            params[\"graph\"] = g\n            params[\"seeds\"] = set_seeds(params)\n            params[\"factor\"] = f\n            params[\"graph_name\"] = g\n            params[\"alpha\"] = 0.1\n            params[\"reprs\"] = n_reps\n            params[\"communities\"] = [list(range(0, 1000)), list(range(1000, 2000))]\n            result[(f, g)] = copy.copy(params)\n    return result\n\nfull_params_1 = configure_experiment_1(\n    list(range(1,10)),\n    graphs[0][\"files\"])\n\nrun_and_plot(full_params_1)\n\n\n\n\n\n\n\n\n\n\n\n\n\nExperiment 2: Deletions\n\n\nCode\nimport os\n\ndef delete_nodes_from_network(network, nodes_to_delete):\n    network = read_graph(network)\n    edge_list = graph_to_edge_list(network)\n    for n in nodes_to_delete:\n        network[n] = []\n    network = list(list(e for e in l if e not in nodes_to_delete)\n        for l in network)\n    n = temp_name(\".txt\")\n    write_graph(network, n)\n    return n\n\ndef configure_experiment_2(factors, graphs):\n    result = {}\n    params = dict(\n        n = 1000,\n        n1 = 1000,\n        n2 = 1000)\n    for f in factors:\n        for g in graphs:\n            # n = read_graph(g)\n            params[\"seed1\"] = 0.1\n            params[\"seed2\"] = 0.1\n            nodes_to_delete = set(set_seeds(dict(\n                n1 = 1000,\n                n2 = 1000,\n                seed1 = 0.1,\n                seed2 = 0.1 * f)))\n            params[\"nodes_to_delete\"] = nodes_to_delete\n            network = delete_nodes_from_network(g, nodes_to_delete)\n            params[\"graph\"] = network\n            params[\"seeds\"] = set_seeds(params)\n            params[\"factor\"] = f\n            params[\"graph_name\"] = g\n            params[\"alpha\"] = 0.1\n            params[\"reprs\"] = n_reps\n            params[\"communities\"] = [list(range(0, 1000)), list(range(1000, 2000))]\n            result[(f, g)] = copy.copy(params)\n    return result\n\n#full_params_2 = configure_experiment_2(\n#    [5], [graphs[0][\"files\"][0]])\nfull_params_2 = configure_experiment_2(\n    list(range(1,10)),\n    graphs[0][\"files\"])\n\nrun_and_plot(full_params_2)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSource Code\n---\ntitle: \"Figure 4, etc\"\n---\n\nEach result \"row\" is based off:\n\n1. A set of graphs (realizations of a particular graph model)\n2. A one-parameter family of experiments\n\n# Preamble\n\n```{python}\nfrom exps import *\nimport copy\n\nn_reps = 100 # set this to 10000 when generating final results!\n\ndef run_experiment_batch(conf):\n    result = {}\n    for (k, params) in conf.items():\n        params = copy.copy(params)\n        params[\"ic_result\"] = run_experiment(params)\n        result[k] = params\n    return result\n\n\ndef figure_1(params):\n    c1, c2 = split_result_by_communities(params[\"ic_result\"], params)\n    plt.figure()\n    # FIXME THESE CHECKS SHOULD BE ON NODES TO DELETE\n    hist(list(x for x in c1 if x > 0)) # not in params.get(\"nodes_to_delete\", [])))\n    hist(list(x for x in c2 if x > 0)) # not in params.get(\"nodes_to_delete\", [])))\n    plt.xlabel(\"Access probability\")\n    plt.ylabel(\"Frequency\")\n    plt.show()\n    \ndef figure_2(conf):\n    x_values_1 = []\n    x_values_2 = []\n    y_values_1 = []\n    y_values_2 = []\n    for (k, v) in conf.items():\n        c1, c2 = split_result_by_communities(v[\"ic_result\"], v)\n        # FIXME THESE CHECKS SHOULD BE ON NODES TO DELETE\n        c1 = numpy.mean(list(x for x in c1 if x > 0))\n        c2 = numpy.mean(list(x for x in c2 if x > 0))\n        x_values_1.append(v[\"factor\"])\n        x_values_2.append(v[\"factor\"])\n        y_values_1.append(c1)\n        y_values_2.append(c2)\n    plt.figure()\n    sns.lineplot(x = x_values_1, y = y_values_1, estimator = numpy.mean, ci = 95)\n    sns.lineplot(x = x_values_2, y = y_values_2, estimator = numpy.mean, ci = 95)\n    sns.scatterplot(x = x_values_1, y = y_values_1)\n    sns.scatterplot(x = x_values_2, y = y_values_2)\n    plt.xlabel(\"Factor\")\n    plt.ylabel(\"Access\")\n    plt.show()\n\ndef figure_3(conf):\n    x_values = []\n    y_values = []\n    for (k, v) in conf.items():\n        c1, c2 = split_result_by_communities(v[\"ic_result\"], v)\n        c1 = numpy.mean(c1)\n        c2 = numpy.mean(c2)\n        f = min(c1, c2) / max(c1, c2)\n        x_values.append(v[\"factor\"])\n        y_values.append(f)\n    plt.figure()\n    sns.lineplot(x = x_values, y = y_values, estimator = numpy.mean, ci = 95)\n    sns.scatterplot(x = x_values, y = y_values)\n    plt.xlabel(\"Factor\")\n    plt.ylabel(\"Fairness\")\n    plt.legend(\"\")\n    plt.show()\n\nk = (5, graphs[0][\"files\"][0])\n\ndef run_and_plot(conf):\n    r = run_experiment_batch(conf)\n    figure_1(r[k])\n    figure_2(r)\n    figure_3(r)\n```\n\n# Experiment 1: Overseeding\n \n```{python}\ndef configure_experiment_1(factors, graphs):\n    result = {}\n    params = dict(\n        n1 = 1000,\n        n2 = 1000)\n    for f in factors:\n        for g in graphs:\n            # n = read_graph(g)\n            params[\"seed1\"] = f * 0.1\n            params[\"seed2\"] = 0.1 \n            params[\"graph\"] = g\n            params[\"seeds\"] = set_seeds(params)\n            params[\"factor\"] = f\n            params[\"graph_name\"] = g\n            params[\"alpha\"] = 0.1\n            params[\"reprs\"] = n_reps\n            params[\"communities\"] = [list(range(0, 1000)), list(range(1000, 2000))]\n            result[(f, g)] = copy.copy(params)\n    return result\n\nfull_params_1 = configure_experiment_1(\n    list(range(1,10)),\n    graphs[0][\"files\"])\n\nrun_and_plot(full_params_1)\n```\n\n# Experiment 2: Deletions\n\n```{python}\nimport os\n\ndef delete_nodes_from_network(network, nodes_to_delete):\n    network = read_graph(network)\n    edge_list = graph_to_edge_list(network)\n    for n in nodes_to_delete:\n        network[n] = []\n    network = list(list(e for e in l if e not in nodes_to_delete)\n        for l in network)\n    n = temp_name(\".txt\")\n    write_graph(network, n)\n    return n\n\ndef configure_experiment_2(factors, graphs):\n    result = {}\n    params = dict(\n        n = 1000,\n        n1 = 1000,\n        n2 = 1000)\n    for f in factors:\n        for g in graphs:\n            # n = read_graph(g)\n            params[\"seed1\"] = 0.1\n            params[\"seed2\"] = 0.1\n            nodes_to_delete = set(set_seeds(dict(\n                n1 = 1000,\n                n2 = 1000,\n                seed1 = 0.1,\n                seed2 = 0.1 * f)))\n            params[\"nodes_to_delete\"] = nodes_to_delete\n            network = delete_nodes_from_network(g, nodes_to_delete)\n            params[\"graph\"] = network\n            params[\"seeds\"] = set_seeds(params)\n            params[\"factor\"] = f\n            params[\"graph_name\"] = g\n            params[\"alpha\"] = 0.1\n            params[\"reprs\"] = n_reps\n            params[\"communities\"] = [list(range(0, 1000)), list(range(1000, 2000))]\n            result[(f, g)] = copy.copy(params)\n    return result\n\n#full_params_2 = configure_experiment_2(\n#    [5], [graphs[0][\"files\"][0]])\nfull_params_2 = configure_experiment_2(\n    list(range(1,10)),\n    graphs[0][\"files\"])\n\nrun_and_plot(full_params_2)\n```"
  },
  {
    "objectID": "exp4.html",
    "href": "exp4.html",
    "title": "",
    "section": "",
    "text": "Community-wide impact of network modifications\n(This is Section 5.3)\nSame as experiment 3, but we range the community shrinkage from 0.1 to 0.9.\n\nCode\nfrom exps import *\nimport numpy\nimport matplotlib.pyplot as plt\n\ndef make_params(shrink_factor):\n    return dict(\n        # graph params\n        n = 1000,\n        p1 = 0.01 / 2,\n        p2 = 0.01 / 2,\n        p_inter = 0.0001 / 2,\n        # seeding params\n        seed1 = 0.3,\n        seed2 = 0.3,\n        # IC params\n        alpha = 0.1,\n        reprs = 100)\n\ndef run_experiment_range(factors, f):\n    c1s = []\n    c2s = []\n    for factor in factors:\n        params = make_params(factor)\n        n1 = int(params[\"n\"] * (1 - factor))\n        n2 = int(params[\"n\"] * (1 - 0.1))\n        params[\"n1\"] = n1\n        params[\"n2\"] = n2\n        params[\"communities\"] = [list(range(0, n1)), list(range(n1, n1 + n2))]\n        params[\"graph\"] = two_communities(params)\n        params[\"seeds\"] = set_seeds(params)\n        ic_result = run_experiment(params)\n        ic_result = f(ic_result, params)\n        c1, c2 = split_result_by_communities(ic_result, params)\n        c1s.append(numpy.mean(c1))\n        c2s.append(numpy.mean(c2))\n    return c1s, c2s\n\nfactors = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]\ndef plot_curve(f, label):\n    c1s, c2s = run_experiment_range(factors, f)\n    plt.figure()\n    plt.plot(factors, c1s)\n    plt.plot(factors, c2s)\n    plt.xlabel(\"Shrinkage factor\")\n    plt.ylabel(label)\n    plt.show()\n\nNo transformation:\n\n\nCode\nplot_curve(id, \"prob\")\n\n\n\n\n\nSquare:\n\n\nCode\nplot_curve(square, \"squared prob\")\n\n\n\n\n\nMean of neighbors:\n\n\nCode\nplot_curve(f_mean, \"mean of neighbors' prob\")\n\n\n\n\n\nMin of neighbors:\n\n\nCode\nplot_curve(f_min, \"min of neighbors' prob\")\n\n\n\n\n\n\n\n\nSource Code\n---\nTitle: \"Experiment 4\"\nformat: \n  html:\n    code-tools: true\n    code-fold: true\n---\n\n# Community-wide impact of network modifications\n\n(This is Section 5.3)\n\nSame as [experiment 3](exp3.qmd), but we range the community shrinkage from 0.1 to 0.9.\n\n```{python}\nfrom exps import *\nimport numpy\nimport matplotlib.pyplot as plt\n\ndef make_params(shrink_factor):\n    return dict(\n        # graph params\n        n = 1000,\n        p1 = 0.01 / 2,\n        p2 = 0.01 / 2,\n        p_inter = 0.0001 / 2,\n        # seeding params\n        seed1 = 0.3,\n        seed2 = 0.3,\n        # IC params\n        alpha = 0.1,\n        reprs = 100)\n\ndef run_experiment_range(factors, f):\n    c1s = []\n    c2s = []\n    for factor in factors:\n        params = make_params(factor)\n        n1 = int(params[\"n\"] * (1 - factor))\n        n2 = int(params[\"n\"] * (1 - 0.1))\n        params[\"n1\"] = n1\n        params[\"n2\"] = n2\n        params[\"communities\"] = [list(range(0, n1)), list(range(n1, n1 + n2))]\n        params[\"graph\"] = two_communities(params)\n        params[\"seeds\"] = set_seeds(params)\n        ic_result = run_experiment(params)\n        ic_result = f(ic_result, params)\n        c1, c2 = split_result_by_communities(ic_result, params)\n        c1s.append(numpy.mean(c1))\n        c2s.append(numpy.mean(c2))\n    return c1s, c2s\n\nfactors = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]\ndef plot_curve(f, label):\n    c1s, c2s = run_experiment_range(factors, f)\n    plt.figure()\n    plt.plot(factors, c1s)\n    plt.plot(factors, c2s)\n    plt.xlabel(\"Shrinkage factor\")\n    plt.ylabel(label)\n    plt.show()\n\n```\n\nNo transformation:\n\n```{python}\nplot_curve(id, \"prob\")\n```\n\nSquare:\n\n```{python}\nplot_curve(square, \"squared prob\")\n```\n\nMean of neighbors:\n\n```{python}\nplot_curve(f_mean, \"mean of neighbors' prob\")\n```\n\nMin of neighbors:\n\n```{python}\nplot_curve(f_min, \"min of neighbors' prob\")\n```"
  },
  {
    "objectID": "fig-4.html#sbm-isolated-communities",
    "href": "fig-4.html#sbm-isolated-communities",
    "title": "Figure 4, etc",
    "section": "SBM, Isolated Communities",
    "text": "SBM, Isolated Communities\n\n\nCode\nk = (5, graphs[0][\"files\"][0])\nrun_and_plot(configure_experiment_1(\n    list(range(1,10)),\n    graphs[0][\"files\"]), k, \"figures/exp-1-sbm-isolated\")"
  },
  {
    "objectID": "fig-4.html#sbm-connected-communities",
    "href": "fig-4.html#sbm-connected-communities",
    "title": "Figure 4, etc",
    "section": "SBM, Connected Communities",
    "text": "SBM, Connected Communities\n\n\nCode\nk = (5, graphs[1][\"files\"][0])\nrun_and_plot(configure_experiment_1(\n    list(range(1,10)),\n    graphs[1][\"files\"]), k, \"figures/exp-1-sbm-connected\")"
  },
  {
    "objectID": "fig-4.html#fcr-isolated-communities",
    "href": "fig-4.html#fcr-isolated-communities",
    "title": "Figure 4, etc",
    "section": "FCR, Isolated Communities",
    "text": "FCR, Isolated Communities\n\n\nCode\nk = (5, graphs[2][\"files\"][0])\nrun_and_plot(configure_experiment_1(\n    list(range(1,10)),\n    graphs[2][\"files\"]), k, \"figures/exp-1-fcr-isolated\")"
  },
  {
    "objectID": "fig-4.html#fcr-connected-communities",
    "href": "fig-4.html#fcr-connected-communities",
    "title": "Figure 4, etc",
    "section": "FCR, Connected Communities",
    "text": "FCR, Connected Communities\n\n\nCode\nk = (5, graphs[3][\"files\"][0])\nrun_and_plot(configure_experiment_1(\n    list(range(1,10)),\n    graphs[3][\"files\"]), k, \"figures/exp-1-fcr-connected\")"
  },
  {
    "objectID": "fig-4.html#sbm-isolated-communities-1",
    "href": "fig-4.html#sbm-isolated-communities-1",
    "title": "Figure 4, etc",
    "section": "SBM, Isolated Communities",
    "text": "SBM, Isolated Communities\n\n\nCode\nk = (5, graphs[0][\"files\"][0])\nrun_and_plot(configure_experiment_2(\n    list(range(1,10)),\n    graphs[0][\"files\"]), k, \"figures/exp-2-sbm-isolated\")"
  },
  {
    "objectID": "fig-4.html#sbm-connected-communities-1",
    "href": "fig-4.html#sbm-connected-communities-1",
    "title": "Figure 4, etc",
    "section": "SBM, Connected Communities",
    "text": "SBM, Connected Communities\n\n\nCode\nk = (5, graphs[1][\"files\"][0])\nrun_and_plot(configure_experiment_2(\n    list(range(1,10)),\n    graphs[1][\"files\"]), k, \"figures/exp-2-sbm-connected\")"
  },
  {
    "objectID": "fig-4.html#fcr-isolated-communities-1",
    "href": "fig-4.html#fcr-isolated-communities-1",
    "title": "Figure 4, etc",
    "section": "FCR, Isolated Communities",
    "text": "FCR, Isolated Communities\n\n\nCode\nk = (5, graphs[2][\"files\"][0])\nrun_and_plot(configure_experiment_2(\n    list(range(1,10)),\n    graphs[2][\"files\"]), k, \"figures/exp-2-fcr-isolated\")"
  },
  {
    "objectID": "fig-4.html#fcr-connected-communities-1",
    "href": "fig-4.html#fcr-connected-communities-1",
    "title": "Figure 4, etc",
    "section": "FCR, Connected Communities",
    "text": "FCR, Connected Communities\n\n\nCode\nk = (5, graphs[3][\"files\"][0])\nrun_and_plot(configure_experiment_2(\n    list(range(1,10)),\n    graphs[3][\"files\"]), k, \"figures/exp-2-fcr-connected\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSource Code\n---\ntitle: \"Figure 4, etc\"\n---\n\nEach result \"row\" is based off:\n\n1. A set of graphs (realizations of a particular graph model)\n2. A one-parameter family of experiments\n\n# Preamble\n\n```{python}\nfrom exps import *\nimport copy\n\nn_reps = 100 # set this to 10000 when generating final results!\n\ndef run_experiment_batch(conf):\n    result = {}\n    for (k, params) in conf.items():\n        params = copy.copy(params)\n        params[\"ic_result\"] = run_experiment(params)\n        result[k] = params\n    return result\n\n\ndef figure_1(params):\n    c1, c2 = split_result_by_communities(params[\"ic_result\"], params)\n    # FIXME THESE CHECKS SHOULD BE ON NODES TO DELETE\n    hist(list(x for x in c1 if x > 0)) # not in params.get(\"nodes_to_delete\", [])))\n    hist(list(x for x in c2 if x > 0)) # not in params.get(\"nodes_to_delete\", [])))\n    plt.xlabel(\"Access probability\")\n    plt.ylabel(\"Frequency\")\n    \ndef figure_2(conf):\n    x_values_1 = []\n    x_values_2 = []\n    y_values_1 = []\n    y_values_2 = []\n    for (k, v) in conf.items():\n        c1, c2 = split_result_by_communities(v[\"ic_result\"], v)\n        # FIXME THESE CHECKS SHOULD BE ON NODES TO DELETE\n        c1 = numpy.mean(list(x for x in c1 if x > 0))\n        c2 = numpy.mean(list(x for x in c2 if x > 0))\n        x_values_1.append(v[\"factor\"])\n        x_values_2.append(v[\"factor\"])\n        y_values_1.append(c1)\n        y_values_2.append(c2)\n    sns.lineplot(x = x_values_1, y = y_values_1, estimator = numpy.mean, ci = 95)\n    sns.lineplot(x = x_values_2, y = y_values_2, estimator = numpy.mean, ci = 95)\n    sns.scatterplot(x = x_values_1, y = y_values_1)\n    sns.scatterplot(x = x_values_2, y = y_values_2)\n    plt.xlabel(\"Factor\")\n    plt.ylabel(\"Access\")\n\ndef figure_3(conf):\n    x_values = []\n    y_values = []\n    for (k, v) in conf.items():\n        c1, c2 = split_result_by_communities(v[\"ic_result\"], v)\n        c1 = numpy.mean(c1)\n        c2 = numpy.mean(c2)\n        f = min(c1, c2) / max(c1, c2)\n        x_values.append(v[\"factor\"])\n        y_values.append(f)\n    sns.lineplot(x = x_values, y = y_values, estimator = numpy.mean, ci = 95)\n    sns.scatterplot(x = x_values, y = y_values)\n    plt.xlabel(\"Factor\")\n    plt.ylabel(\"Fairness\")\n\ndef run_and_plot(conf, k, prefix):\n    r = run_experiment_batch(conf)\n    plt.figure()\n    figure_1(r[k])\n    plt.savefig(prefix + \"-fig-1.png\")\n    plt.show()\n    \n    plt.figure()\n    figure_2(r)\n    plt.savefig(prefix + \"-fig-2.png\")\n    plt.show()\n\n    plt.figure()\n    figure_3(r)\n    plt.savefig(prefix + \"-fig-3.png\")\n    plt.show()\n```\n\n# Experiment 1: Overseeding\n \n```{python}\ndef configure_experiment_1(factors, graphs):\n    result = {}\n    params = dict(\n        n1 = 1000,\n        n2 = 1000)\n    for f in factors:\n        for g in graphs:\n            # n = read_graph(g)\n            params[\"seed1\"] = f * 0.1\n            params[\"seed2\"] = 0.1 \n            params[\"graph\"] = g\n            params[\"seeds\"] = set_seeds(params)\n            params[\"factor\"] = f\n            params[\"graph_name\"] = g\n            params[\"alpha\"] = 0.1\n            params[\"reprs\"] = n_reps\n            params[\"communities\"] = [list(range(0, 1000)), list(range(1000, 2000))]\n            result[(f, g)] = copy.copy(params)\n    return result\n```\n\n## SBM, Isolated Communities\n\n```{python}\nk = (5, graphs[0][\"files\"][0])\nrun_and_plot(configure_experiment_1(\n    list(range(1,10)),\n    graphs[0][\"files\"]), k, \"figures/exp-1-sbm-isolated\")\n```\n\n## SBM, Connected Communities\n\n```{python}\nk = (5, graphs[1][\"files\"][0])\nrun_and_plot(configure_experiment_1(\n    list(range(1,10)),\n    graphs[1][\"files\"]), k, \"figures/exp-1-sbm-connected\")\n```\n\n## FCR, Isolated Communities\n\n```{python}\nk = (5, graphs[2][\"files\"][0])\nrun_and_plot(configure_experiment_1(\n    list(range(1,10)),\n    graphs[2][\"files\"]), k, \"figures/exp-1-fcr-isolated\")\n```\n\n## FCR, Connected Communities\n\n```{python}\nk = (5, graphs[3][\"files\"][0])\nrun_and_plot(configure_experiment_1(\n    list(range(1,10)),\n    graphs[3][\"files\"]), k, \"figures/exp-1-fcr-connected\")\n```\n\n# Experiment 2: Deletions\n\n```{python}\nimport os\n\ndef delete_nodes_from_network(network, nodes_to_delete):\n    network = read_graph(network)\n    edge_list = graph_to_edge_list(network)\n    for n in nodes_to_delete:\n        network[n] = []\n    network = list(list(e for e in l if e not in nodes_to_delete)\n        for l in network)\n    n = temp_name(\".txt\")\n    write_graph(network, n)\n    return n\n\ndef configure_experiment_2(factors, graphs):\n    result = {}\n    params = dict(\n        n = 1000,\n        n1 = 1000,\n        n2 = 1000)\n    for f in factors:\n        for g in graphs:\n            # n = read_graph(g)\n            params[\"seed1\"] = 0.1\n            params[\"seed2\"] = 0.1\n            nodes_to_delete = set(set_seeds(dict(\n                n1 = 1000,\n                n2 = 1000,\n                seed1 = 0.1,\n                seed2 = 0.1 * f)))\n            params[\"nodes_to_delete\"] = nodes_to_delete\n            network = delete_nodes_from_network(g, nodes_to_delete)\n            params[\"graph\"] = network\n            params[\"seeds\"] = set_seeds(params)\n            params[\"factor\"] = f\n            params[\"graph_name\"] = g\n            params[\"alpha\"] = 0.1\n            params[\"reprs\"] = n_reps\n            params[\"communities\"] = [list(range(0, 1000)), list(range(1000, 2000))]\n            result[(f, g)] = copy.copy(params)\n    return result\n```\n\n## SBM, Isolated Communities\n\n```{python}\nk = (5, graphs[0][\"files\"][0])\nrun_and_plot(configure_experiment_2(\n    list(range(1,10)),\n    graphs[0][\"files\"]), k, \"figures/exp-2-sbm-isolated\")\n```\n\n## SBM, Connected Communities\n\n```{python}\nk = (5, graphs[1][\"files\"][0])\nrun_and_plot(configure_experiment_2(\n    list(range(1,10)),\n    graphs[1][\"files\"]), k, \"figures/exp-2-sbm-connected\")\n```\n\n## FCR, Isolated Communities\n\n```{python}\nk = (5, graphs[2][\"files\"][0])\nrun_and_plot(configure_experiment_2(\n    list(range(1,10)),\n    graphs[2][\"files\"]), k, \"figures/exp-2-fcr-isolated\")\n```\n\n## FCR, Connected Communities\n\n```{python}\nk = (5, graphs[3][\"files\"][0])\nrun_and_plot(configure_experiment_2(\n    list(range(1,10)),\n    graphs[3][\"files\"]), k, \"figures/exp-2-fcr-connected\")\n```"
  },
  {
    "objectID": "fig-4.html#lfr-isolated-communities",
    "href": "fig-4.html#lfr-isolated-communities",
    "title": "Figure 4, etc",
    "section": "LFR, Isolated Communities",
    "text": "LFR, Isolated Communities\n\n\nCode\nk = (5, graphs[2][\"files\"][0])\nrun_and_plot(configure_experiment_1(\n    list(range(1,10)),\n    graphs[2][\"files\"]), k, \"figures/exp-1-lfr-isolated\")"
  },
  {
    "objectID": "fig-4.html#lfr-connected-communities",
    "href": "fig-4.html#lfr-connected-communities",
    "title": "Figure 4, etc",
    "section": "LFR, Connected Communities",
    "text": "LFR, Connected Communities\n\n\nCode\nk = (5, graphs[3][\"files\"][0])\nrun_and_plot(configure_experiment_1(\n    list(range(1,10)),\n    graphs[3][\"files\"]), k, \"figures/exp-1-lfr-connected\")"
  },
  {
    "objectID": "fig-4.html#lfr-isolated-communities-1",
    "href": "fig-4.html#lfr-isolated-communities-1",
    "title": "Figure 4, etc",
    "section": "LFR, Isolated Communities",
    "text": "LFR, Isolated Communities\n\n\nCode\nk = (5, graphs[2][\"files\"][0])\nrun_and_plot(configure_experiment_2(\n    list(range(1,10)),\n    graphs[2][\"files\"]), k, \"figures/exp-2-lfr-isolated\")"
  },
  {
    "objectID": "fig-4.html#lfr-connected-communities-1",
    "href": "fig-4.html#lfr-connected-communities-1",
    "title": "Figure 4, etc",
    "section": "LFR, Connected Communities",
    "text": "LFR, Connected Communities\n\n\nCode\nk = (5, graphs[3][\"files\"][0])\nrun_and_plot(configure_experiment_2(\n    list(range(1,10)),\n    graphs[3][\"files\"]), k, \"figures/exp-2-lfr-connected\")"
  },
  {
    "objectID": "fig-5.html",
    "href": "fig-5.html",
    "title": "Essential Worker Community Degree Distribution",
    "section": "",
    "text": "Code\nimport glob\nfrom exps import *\nimport numpy\nimport matplotlib.pyplot as plt\n\ndef degrees(network):\n    essential = list(len(l) for l in network[:1000])\n    rest = list(len(l) for l in network[1000:])\n    return [essential, rest]\n\nessential = []\nrest = []\nfiles = glob.glob(f'../data/graphs/experiment_essential_workers_2_sbm/run_1/twocommunities_edgelist.txt')\nfor f in files:\n    n = read_graph(f)\n    [this_essential, this_rest] = degrees(n)\n    essential.extend(this_essential)\n    rest.extend(this_rest)\nplt.figure()\nhist(essential, label=\"Essential worker community\")\nhist(rest, label=\"Rest\")\nplt.legend()\nplt.xlabel(\"Node degree\")\nplt.ylabel(\"Frequency\")\nplt.show()\n\nparams = {}\nparams[\"graph\"] = files[0]\nparams[\"n1\"] = 1000\nparams[\"n2\"] = 1000\nparams[\"seed1\"] = 0.1\nparams[\"seed2\"] = 0.1\nparams[\"seeds\"] = set_seeds(params)\nparams[\"alpha\"] = 0.1\nparams[\"reprs\"] = 100\nparams[\"communities\"] = [list(range(0, 1000)), list(range(1000, 2000))]\nparams[\"ic_result\"] = run_experiment(params)\ndegrees = numpy.array(list(len(n) for n in read_graph(params[\"graph\"])))\nprint(list(degrees))\nprint(numpy.mean(degrees[:1000]))\nprint(numpy.mean(degrees[1000:]))\n\ndef figure_1(params, xlabel):\n    c1, c2 = split_result_by_communities(params[\"ic_result\"], params)\n    hist(c1)\n    hist(c2)\n    plt.xlabel(xlabel)\n    plt.ylabel(\"Frequency\")\n\nplt.figure()\nfigure_1(params, \"probability of infection\")\nplt.show()\n\n\n\n\n\n[12, 14, 18, 14, 20, 10, 17, 13, 20, 22, 11, 11, 13, 17, 11, 10, 22, 8, 19, 8, 15, 12, 11, 12, 11, 19, 14, 16, 15, 21, 14, 16, 10, 12, 15, 20, 16, 11, 11, 23, 13, 8, 11, 22, 16, 15, 9, 24, 15, 18, 17, 15, 12, 15, 16, 14, 12, 20, 13, 14, 7, 12, 20, 14, 18, 9, 16, 22, 15, 17, 15, 4, 13, 18, 11, 20, 18, 23, 18, 20, 14, 13, 20, 16, 19, 14, 11, 18, 18, 16, 15, 17, 18, 20, 16, 13, 14, 16, 10, 13, 21, 12, 12, 14, 20, 19, 14, 13, 21, 17, 11, 9, 19, 16, 21, 9, 9, 12, 16, 12, 21, 19, 17, 12, 17, 5, 12, 15, 23, 20, 20, 18, 22, 13, 15, 12, 20, 9, 13, 15, 12, 18, 18, 12, 20, 17, 23, 14, 22, 25, 9, 15, 13, 20, 17, 10, 21, 13, 19, 18, 14, 20, 17, 19, 18, 18, 20, 14, 12, 13, 9, 13, 19, 13, 14, 19, 14, 22, 13, 14, 11, 17, 18, 13, 11, 18, 16, 14, 14, 8, 12, 19, 13, 14, 16, 16, 12, 20, 16, 13, 15, 10, 21, 16, 16, 17, 18, 19, 10, 15, 14, 13, 19, 15, 20, 14, 13, 12, 10, 17, 16, 13, 27, 11, 18, 16, 10, 17, 15, 19, 17, 18, 8, 21, 16, 9, 14, 16, 7, 17, 12, 12, 13, 12, 11, 15, 18, 12, 25, 20, 20, 17, 11, 19, 13, 15, 11, 16, 15, 11, 17, 27, 13, 16, 10, 20, 19, 14, 13, 15, 12, 13, 16, 15, 11, 16, 10, 14, 16, 16, 15, 18, 16, 15, 19, 15, 13, 15, 14, 7, 8, 12, 10, 18, 15, 19, 16, 12, 14, 11, 15, 11, 24, 16, 10, 7, 16, 12, 10, 18, 19, 9, 13, 14, 17, 18, 10, 13, 21, 16, 21, 20, 19, 11, 10, 17, 12, 13, 15, 8, 16, 7, 13, 18, 16, 20, 21, 11, 16, 21, 15, 22, 18, 17, 17, 12, 13, 10, 11, 17, 19, 17, 14, 13, 9, 19, 17, 20, 12, 20, 13, 12, 8, 14, 12, 21, 12, 15, 13, 15, 5, 17, 12, 13, 17, 17, 17, 23, 18, 13, 10, 18, 17, 12, 15, 18, 14, 12, 15, 13, 16, 13, 15, 18, 18, 17, 13, 17, 18, 13, 16, 11, 14, 21, 20, 14, 6, 18, 15, 15, 13, 15, 21, 20, 17, 15, 19, 14, 12, 13, 20, 14, 18, 12, 12, 21, 12, 21, 17, 10, 18, 12, 13, 20, 15, 14, 13, 22, 16, 14, 15, 14, 14, 17, 11, 14, 16, 27, 24, 12, 13, 13, 10, 19, 16, 20, 17, 12, 14, 11, 12, 13, 22, 15, 14, 18, 15, 18, 15, 15, 24, 21, 10, 14, 16, 12, 22, 14, 15, 18, 13, 19, 10, 8, 8, 11, 14, 21, 10, 14, 18, 12, 11, 16, 23, 6, 18, 9, 14, 20, 15, 17, 21, 8, 10, 15, 13, 16, 12, 14, 19, 11, 16, 20, 10, 24, 12, 11, 12, 14, 11, 12, 12, 21, 18, 12, 6, 16, 11, 10, 15, 22, 13, 12, 10, 11, 12, 11, 17, 14, 15, 13, 18, 16, 21, 14, 14, 11, 14, 15, 16, 16, 17, 16, 11, 13, 21, 9, 17, 14, 13, 17, 16, 14, 18, 14, 20, 14, 13, 19, 10, 13, 16, 17, 18, 17, 13, 15, 16, 21, 15, 15, 17, 11, 14, 16, 10, 15, 17, 11, 15, 14, 21, 17, 13, 12, 18, 10, 12, 15, 15, 12, 14, 16, 15, 13, 20, 12, 23, 12, 11, 7, 12, 18, 14, 10, 20, 9, 20, 24, 15, 16, 22, 17, 14, 24, 24, 9, 18, 15, 10, 16, 13, 16, 20, 13, 19, 17, 10, 7, 18, 15, 20, 15, 18, 16, 13, 18, 14, 10, 18, 11, 4, 11, 13, 13, 21, 10, 9, 15, 13, 16, 18, 16, 19, 15, 18, 16, 20, 22, 18, 10, 15, 22, 10, 17, 13, 8, 14, 22, 19, 14, 14, 18, 12, 19, 16, 22, 15, 13, 17, 14, 20, 13, 16, 18, 17, 17, 14, 11, 15, 18, 9, 15, 17, 19, 15, 18, 17, 17, 10, 10, 14, 15, 14, 12, 17, 13, 16, 11, 11, 13, 15, 19, 11, 12, 13, 14, 14, 18, 12, 13, 10, 13, 16, 16, 16, 14, 17, 8, 10, 18, 10, 14, 16, 14, 7, 19, 16, 16, 16, 15, 12, 20, 18, 20, 10, 17, 18, 25, 22, 8, 25, 16, 21, 17, 18, 13, 11, 16, 14, 17, 15, 11, 12, 18, 18, 19, 19, 7, 18, 17, 10, 18, 20, 13, 21, 19, 15, 10, 17, 17, 19, 9, 25, 17, 12, 26, 18, 8, 14, 9, 18, 13, 13, 21, 11, 18, 15, 10, 12, 18, 15, 16, 16, 11, 9, 12, 14, 22, 11, 14, 10, 13, 13, 11, 13, 15, 14, 20, 16, 16, 11, 19, 7, 18, 13, 14, 11, 10, 16, 12, 11, 20, 20, 22, 15, 18, 23, 16, 15, 12, 16, 18, 12, 15, 19, 21, 21, 23, 15, 20, 15, 16, 18, 15, 21, 20, 13, 25, 16, 17, 16, 10, 9, 13, 15, 15, 14, 14, 10, 12, 16, 12, 19, 19, 13, 18, 15, 20, 13, 10, 14, 7, 12, 20, 13, 17, 12, 16, 19, 13, 19, 12, 15, 14, 24, 12, 9, 15, 17, 16, 16, 19, 19, 18, 10, 16, 14, 10, 15, 15, 15, 12, 25, 9, 16, 13, 13, 12, 12, 17, 17, 13, 16, 16, 19, 8, 9, 15, 21, 9, 12, 9, 11, 15, 10, 19, 18, 11, 21, 11, 16, 18, 11, 12, 16, 10, 13, 18, 17, 16, 14, 15, 7, 17, 18, 11, 17, 16, 13, 14, 16, 23, 19, 14, 13, 16, 15, 10, 16, 19, 12, 14, 16, 17, 14, 10, 15, 13, 11, 17, 13, 20, 9, 10, 22, 16, 13, 20, 10, 11, 10, 10, 7, 7, 6, 7, 6, 9, 19, 9, 8, 9, 8, 7, 12, 13, 16, 7, 12, 8, 5, 10, 9, 8, 10, 9, 14, 14, 11, 12, 11, 11, 9, 14, 10, 11, 12, 12, 16, 13, 11, 8, 7, 7, 8, 11, 8, 8, 7, 15, 7, 15, 9, 9, 6, 16, 10, 15, 9, 11, 5, 12, 10, 16, 6, 12, 11, 5, 12, 9, 11, 10, 8, 8, 9, 10, 10, 7, 14, 5, 10, 11, 11, 8, 14, 11, 10, 9, 11, 7, 8, 12, 14, 5, 9, 11, 13, 5, 16, 10, 8, 9, 16, 9, 14, 5, 16, 19, 5, 10, 10, 14, 9, 12, 17, 20, 13, 10, 9, 9, 13, 10, 8, 10, 7, 11, 14, 12, 8, 12, 12, 5, 8, 20, 5, 9, 10, 12, 5, 13, 7, 13, 14, 8, 9, 9, 5, 15, 10, 16, 12, 10, 8, 3, 9, 11, 12, 12, 9, 4, 14, 11, 6, 14, 9, 11, 9, 9, 9, 11, 8, 14, 9, 10, 11, 14, 13, 14, 9, 5, 10, 9, 8, 5, 10, 9, 9, 10, 17, 13, 13, 6, 11, 10, 8, 9, 11, 17, 10, 9, 12, 11, 10, 11, 11, 11, 8, 16, 10, 10, 10, 14, 5, 8, 14, 12, 12, 7, 6, 14, 12, 8, 10, 12, 16, 12, 8, 9, 13, 9, 17, 7, 9, 8, 12, 14, 5, 12, 11, 13, 14, 6, 19, 12, 9, 14, 10, 12, 12, 19, 10, 8, 8, 9, 5, 12, 12, 14, 20, 13, 6, 13, 8, 8, 7, 7, 9, 17, 8, 4, 8, 11, 11, 9, 16, 12, 9, 11, 14, 8, 6, 7, 13, 10, 13, 5, 9, 12, 12, 8, 7, 13, 11, 12, 13, 8, 2, 13, 10, 17, 10, 8, 10, 19, 12, 5, 10, 16, 11, 9, 10, 9, 11, 8, 8, 8, 7, 14, 10, 9, 6, 9, 9, 12, 17, 7, 4, 8, 6, 5, 10, 8, 12, 14, 4, 19, 11, 21, 10, 7, 13, 16, 10, 11, 13, 14, 13, 12, 7, 8, 7, 11, 12, 12, 17, 7, 11, 12, 4, 8, 10, 13, 7, 13, 16, 8, 5, 11, 16, 10, 17, 7, 13, 11, 7, 9, 9, 14, 8, 11, 10, 9, 11, 10, 12, 10, 11, 8, 12, 15, 9, 8, 11, 11, 6, 7, 8, 14, 13, 14, 9, 6, 9, 15, 13, 13, 15, 9, 10, 14, 7, 7, 11, 9, 10, 9, 16, 11, 10, 13, 16, 9, 11, 9, 15, 4, 14, 9, 8, 18, 6, 10, 10, 6, 16, 4, 12, 14, 4, 12, 14, 9, 14, 12, 12, 10, 7, 9, 14, 10, 11, 11, 11, 8, 13, 13, 11, 10, 10, 9, 5, 6, 18, 10, 14, 12, 9, 7, 9, 12, 13, 14, 11, 12, 9, 10, 14, 14, 9, 11, 17, 11, 13, 13, 15, 10, 21, 14, 8, 10, 12, 8, 9, 14, 16, 7, 4, 9, 10, 11, 11, 11, 14, 11, 8, 9, 7, 11, 6, 11, 14, 11, 8, 9, 9, 10, 8, 9, 20, 9, 9, 12, 11, 11, 9, 15, 10, 13, 7, 14, 12, 10, 7, 7, 14, 8, 14, 14, 5, 10, 14, 10, 8, 11, 9, 5, 7, 7, 13, 13, 7, 7, 14, 7, 10, 15, 14, 5, 18, 9, 12, 6, 11, 9, 4, 12, 11, 16, 9, 5, 6, 6, 9, 16, 8, 9, 8, 14, 12, 7, 8, 9, 9, 12, 9, 12, 11, 7, 6, 5, 12, 10, 5, 10, 11, 12, 8, 8, 14, 9, 8, 6, 10, 16, 6, 4, 11, 11, 5, 8, 12, 10, 7, 11, 11, 7, 10, 14, 14, 6, 14, 15, 8, 10, 9, 14, 14, 10, 6, 10, 10, 9, 7, 12, 4, 10, 14, 12, 14, 12, 12, 7, 14, 6, 8, 9, 8, 15, 11, 8, 12, 5, 14, 10, 14, 11, 9, 13, 12, 11, 13, 11, 6, 7, 10, 5, 10, 11, 12, 9, 10, 8, 9, 16, 11, 10, 6, 3, 16, 4, 10, 12, 8, 8, 10, 11, 9, 14, 3, 22, 6, 8, 12, 9, 6, 10, 13, 8, 6, 10, 11, 13, 10, 11, 13, 10, 9, 18, 13, 13, 14, 7, 16, 12, 14, 10, 13, 10, 6, 6, 6, 10, 9, 9, 14, 16, 8, 8, 13, 12, 11, 11, 12, 10, 10, 9, 13, 10, 5, 12, 10, 9, 10, 4, 10, 8, 7, 4, 16, 12, 8, 9, 9, 12, 13, 8, 6, 13, 14, 5, 9, 13, 17, 10, 9, 11, 10, 12, 10, 14, 9, 8, 11, 18, 13, 7, 13, 8, 13, 7, 26, 13, 11, 10, 11, 11, 10, 7, 7, 6, 12, 7, 16, 14, 10, 10, 4, 14, 15, 5, 11, 3, 9, 4, 13, 15, 12, 5, 7, 11, 5, 7, 14, 7, 13, 14, 11, 7, 11, 12, 10, 5, 6, 10, 13, 10, 12, 11, 14, 11, 10, 13, 10, 12, 9, 8, 13, 13, 10, 9, 9, 8, 7, 8, 11, 7, 12, 13, 11, 10, 9, 9, 13, 12, 11, 13, 9, 6, 10, 13, 10, 10, 10, 6, 9, 9, 12, 16, 11, 10, 5, 11, 18, 9, 11, 13, 10, 7, 17, 6, 12, 16, 10, 10, 16, 12, 5, 14, 9, 6, 7, 9, 18, 7, 8, 13, 10, 11, 14, 13, 15, 8, 8, 6, 18, 10, 14, 8, 12, 12, 12, 13, 13, 9, 9, 10, 8, 12, 15, 11, 10, 6, 13, 11, 10, 9, 7, 7, 9, 8, 10, 7, 8, 8, 11, 5, 11, 4, 16, 7, 6, 7, 14, 8, 9, 12, 16, 11, 10, 1, 6, 11, 9, 10, 10, 12, 13, 9, 13, 6, 14, 12, 13, 10, 15, 10, 12, 15, 10, 10, 7, 9, 12, 10, 13, 7, 11, 11, 12, 10, 15, 7, 6, 6, 13, 12, 10, 7, 6, 9, 8, 12, 8, 13, 9, 12, 14, 5]\n15.075\n10.347\n\n\n\n\n\n\n\n\nSource Code\n---\ntitle: \"Essential Worker Community Degree Distribution\"\n---\n\n```{python}\nimport glob\nfrom exps import *\nimport numpy\nimport matplotlib.pyplot as plt\n\ndef degrees(network):\n    essential = list(len(l) for l in network[:1000])\n    rest = list(len(l) for l in network[1000:])\n    return [essential, rest]\n\nessential = []\nrest = []\nfiles = glob.glob(f'../data/graphs/experiment_essential_workers_2_sbm/run_1/twocommunities_edgelist.txt')\nfor f in files:\n    n = read_graph(f)\n    [this_essential, this_rest] = degrees(n)\n    essential.extend(this_essential)\n    rest.extend(this_rest)\nplt.figure()\nhist(essential, label=\"Essential worker community\")\nhist(rest, label=\"Rest\")\nplt.legend()\nplt.xlabel(\"Node degree\")\nplt.ylabel(\"Frequency\")\nplt.show()\n\nparams = {}\nparams[\"graph\"] = files[0]\nparams[\"n1\"] = 1000\nparams[\"n2\"] = 1000\nparams[\"seed1\"] = 0.1\nparams[\"seed2\"] = 0.1\nparams[\"seeds\"] = set_seeds(params)\nparams[\"alpha\"] = 0.1\nparams[\"reprs\"] = 100\nparams[\"communities\"] = [list(range(0, 1000)), list(range(1000, 2000))]\nparams[\"ic_result\"] = run_experiment(params)\ndegrees = numpy.array(list(len(n) for n in read_graph(params[\"graph\"])))\nprint(list(degrees))\nprint(numpy.mean(degrees[:1000]))\nprint(numpy.mean(degrees[1000:]))\n\ndef figure_1(params, xlabel):\n    c1, c2 = split_result_by_communities(params[\"ic_result\"], params)\n    hist(c1)\n    hist(c2)\n    plt.xlabel(xlabel)\n    plt.ylabel(\"Frequency\")\n\nplt.figure()\nfigure_1(params, \"probability of infection\")\nplt.show()\n\n```"
  },
  {
    "objectID": "thresholds.html",
    "href": "thresholds.html",
    "title": "Threshold tests",
    "section": "",
    "text": "Code\nfrom exps import *\nimport numpy\nimport seaborn as sns\n\noverseeding_factor = 4\n\nparams = dict(\n    # graph params\n    n = 1000,\n    p1 = 0.01 / 2,\n    p2 = 0.01 / 2,\n    p_inter = 0.0001 / 2,\n    # seeding params\n    seed1 = overseeding_factor * 0.1,\n    seed2 = 0.1,\n    # IC params\n    alpha = 0.1,\n    reprs = 10000,\n    communities = [list(range(0, 1000)), list(range(1000, 2000))])\n\ndef make_thresholds(params):\n    n = read_graph(params[\"graph\"])\n    degrees = numpy.array(list(len(e) for e in n))\n    return \n\nparams[\"graph\"] = two_communities(params)\ndegrees = numpy.array(list(len(n) for n in read_graph(params[\"graph\"])))\nparams[\"seeds\"] = set_seeds(params)\nparams[\"thresholds\"] = numpy.random.random(len(degrees)) * degrees\n\nresult = numpy.array(run_thresh_experiment(params))\n\nnonseeds = numpy.array([True] * 2000)\nnonseeds[params[\"seeds\"]] = False\nnorm_thresh = params[\"thresholds\"] / degrees\n\n(Communities encoded with colors)\n\n\nCode\nplt.figure()\nsns.scatterplot(\n    x = norm_thresh[:1000][nonseeds[:1000]],\n    y = result[:1000][nonseeds[:1000]])\nsns.scatterplot(\n    x = norm_thresh[1000:][nonseeds[1000:]],\n    y = result[1000:][nonseeds[1000:]])\nplt.xlabel(\"Threshold\")\nplt.ylabel(\"Average activation\")\nplt.show()\n\nplt.figure()\nhist(result[:1000][nonseeds[:1000]])\nhist(result[1000:][nonseeds[1000:]])\nplt.xlabel(\"Threshold\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nSource Code\n---\ntitle: \"Threshold tests\"\n---\n\n```{python}\n#| code-fold: show\nfrom exps import *\nimport numpy\nimport seaborn as sns\n\noverseeding_factor = 4\n\nparams = dict(\n    # graph params\n    n = 1000,\n    p1 = 0.01 / 2,\n    p2 = 0.01 / 2,\n    p_inter = 0.0001 / 2,\n    # seeding params\n    seed1 = overseeding_factor * 0.1,\n    seed2 = 0.1,\n    # IC params\n    alpha = 0.1,\n    reprs = 10000,\n    communities = [list(range(0, 1000)), list(range(1000, 2000))])\n\ndef make_thresholds(params):\n    n = read_graph(params[\"graph\"])\n    degrees = numpy.array(list(len(e) for e in n))\n    return \n\nparams[\"graph\"] = two_communities(params)\ndegrees = numpy.array(list(len(n) for n in read_graph(params[\"graph\"])))\nparams[\"seeds\"] = set_seeds(params)\nparams[\"thresholds\"] = numpy.random.random(len(degrees)) * degrees\n\nresult = numpy.array(run_thresh_experiment(params))\n\nnonseeds = numpy.array([True] * 2000)\nnonseeds[params[\"seeds\"]] = False\nnorm_thresh = params[\"thresholds\"] / degrees\n```\n\n(Communities encoded with colors)\n```{python}\nplt.figure()\nsns.scatterplot(\n    x = norm_thresh[:1000][nonseeds[:1000]],\n    y = result[:1000][nonseeds[:1000]])\nsns.scatterplot(\n    x = norm_thresh[1000:][nonseeds[1000:]],\n    y = result[1000:][nonseeds[1000:]])\nplt.xlabel(\"Threshold\")\nplt.ylabel(\"Average activation\")\nplt.show()\n\nplt.figure()\nhist(result[:1000][nonseeds[:1000]])\nhist(result[1000:][nonseeds[1000:]])\nplt.xlabel(\"Threshold\")\nplt.show()\n```"
  },
  {
    "objectID": "index.html#thresholds",
    "href": "index.html#thresholds",
    "title": "Network fairness experiments",
    "section": "Thresholds",
    "text": "Thresholds"
  },
  {
    "objectID": "fig-4.html#sbm-isolated-communities-2",
    "href": "fig-4.html#sbm-isolated-communities-2",
    "title": "Figure 4, etc",
    "section": "SBM, Isolated Communities",
    "text": "SBM, Isolated Communities\n\n\nCode\nk = (5, graphs[0][\"files\"][0])\nrun_thresh_and_plot(configure_experiment_1(\n    list(range(1,10)),\n    graphs[0][\"files\"]), k, \"figures/exp-3-1-sbm-isolated\")"
  },
  {
    "objectID": "fig-4.html#sbm-connected-communities-2",
    "href": "fig-4.html#sbm-connected-communities-2",
    "title": "Figure 4, etc",
    "section": "SBM, Connected Communities",
    "text": "SBM, Connected Communities\n\n\nCode\nk = (5, graphs[1][\"files\"][0])\nrun_thresh_and_plot(configure_experiment_1(\n    list(range(1,10)),\n    graphs[1][\"files\"]), k, \"figures/exp-3-1-sbm-connected\")"
  },
  {
    "objectID": "fig-4.html#lfr-isolated-communities-2",
    "href": "fig-4.html#lfr-isolated-communities-2",
    "title": "Figure 4, etc",
    "section": "LFR, Isolated Communities",
    "text": "LFR, Isolated Communities\n\n\nCode\nk = (5, graphs[2][\"files\"][0])\nrun_thresh_and_plot(configure_experiment_1(\n    list(range(1,10)),\n    graphs[2][\"files\"]), k, \"figures/exp-3-1-lfr-isolated\")"
  },
  {
    "objectID": "fig-4.html#lfr-connected-communities-2",
    "href": "fig-4.html#lfr-connected-communities-2",
    "title": "Figure 4, etc",
    "section": "LFR, Connected Communities",
    "text": "LFR, Connected Communities\n\n\nCode\nk = (5, graphs[3][\"files\"][0])\nrun_thresh_and_plot(configure_experiment_1(\n    list(range(1,10)),\n    graphs[3][\"files\"]), k, \"figures/exp-3-1-lfr-connected\")"
  },
  {
    "objectID": "fig-4.html#sbm-isolated-communities-3",
    "href": "fig-4.html#sbm-isolated-communities-3",
    "title": "Figure 4, etc",
    "section": "SBM, Isolated Communities",
    "text": "SBM, Isolated Communities\n\n\nCode\nk = (5, graphs[0][\"files\"][0])\nrun_thresh_and_plot(configure_experiment_2(\n    list(range(1,10)),\n    graphs[0][\"files\"]), k, \"figures/exp-3-2-sbm-isolated\")"
  },
  {
    "objectID": "fig-4.html#sbm-connected-communities-3",
    "href": "fig-4.html#sbm-connected-communities-3",
    "title": "Figure 4, etc",
    "section": "SBM, Connected Communities",
    "text": "SBM, Connected Communities\n\n\nCode\nk = (5, graphs[1][\"files\"][0])\nrun_thresh_and_plot(configure_experiment_2(\n    list(range(1,10)),\n    graphs[1][\"files\"]), k, \"figures/exp-3-2-sbm-connected\")"
  },
  {
    "objectID": "fig-4.html#lfr-isolated-communities-3",
    "href": "fig-4.html#lfr-isolated-communities-3",
    "title": "Figure 4, etc",
    "section": "LFR, Isolated Communities",
    "text": "LFR, Isolated Communities\n\n\nCode\nk = (5, graphs[2][\"files\"][0])\nrun_thresh_and_plot(configure_experiment_2(\n    list(range(1,10)),\n    graphs[2][\"files\"]), k, \"figures/exp-3-2-lfr-isolated\")"
  },
  {
    "objectID": "fig-4.html#lfr-connected-communities-3",
    "href": "fig-4.html#lfr-connected-communities-3",
    "title": "Figure 4, etc",
    "section": "LFR, Connected Communities",
    "text": "LFR, Connected Communities\n\n\nCode\nk = (5, graphs[3][\"files\"][0])\nrun_thresh_and_plot(configure_experiment_2(\n    list(range(1,10)),\n    graphs[3][\"files\"]), k, \"figures/exp-3-2-lfr-connected\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSource Code\n---\ntitle: \"Figure 4, etc\"\n---\n\nEach result \"row\" is based off:\n\n1. A set of graphs (realizations of a particular graph model)\n2. A one-parameter family of experiments\n\n# Preamble\n\n```{python}\nfrom exps import *\nimport copy\n\nn_reps = 100 # set this to 10000 when generating final results!\n\ndef run_experiment_batch(conf):\n    result = {}\n    for (k, params) in conf.items():\n        params = copy.copy(params)\n        params[\"ic_result\"] = run_experiment(params)\n        result[k] = params\n    return result\n\ndef run_thresh_experiment_batch(conf):\n    result = {}\n    for (k, params) in conf.items():\n        params = copy.copy(params)\n        degrees = numpy.array(list(len(n) for n in read_graph(params[\"graph\"])))\n        params[\"thresholds\"] = numpy.random.random(len(degrees)) * degrees\n        params[\"ic_result\"] = run_thresh_experiment(params)\n        result[k] = params\n    return result\n\ndef figure_1(params, xlabel):\n    c1, c2 = split_result_by_communities(params[\"ic_result\"], params)\n    hist(c1)\n    hist(c2)\n    plt.xlabel(xlabel)\n    plt.ylabel(\"Frequency\")\n\ndef figure_2(conf, ylabel):\n    x_values_1 = []\n    x_values_2 = []\n    y_values_1 = []\n    y_values_2 = []\n    for (k, v) in conf.items():\n        c1, c2 = split_result_by_communities(v[\"ic_result\"], v)\n        c1 = numpy.mean(c1)\n        c2 = numpy.mean(c2)\n        x_values_1.append(v[\"factor\"])\n        x_values_2.append(v[\"factor\"])\n        y_values_1.append(c1)\n        y_values_2.append(c2)\n    sns.lineplot(x = x_values_1, y = y_values_1, estimator = numpy.mean, ci = 95)\n    sns.lineplot(x = x_values_2, y = y_values_2, estimator = numpy.mean, ci = 95)\n    sns.scatterplot(x = x_values_1, y = y_values_1)\n    sns.scatterplot(x = x_values_2, y = y_values_2)\n    plt.xlabel(\"Factor\")\n    plt.ylabel(ylabel)\n\ndef figure_3(conf):\n    x_values = []\n    y_values = []\n    for (k, v) in conf.items():\n        c1, c2 = split_result_by_communities(v[\"ic_result\"], v)\n        c1 = numpy.mean(c1)\n        c2 = numpy.mean(c2)\n        f = min(c1, c2) / max(c1, c2)\n        x_values.append(v[\"factor\"])\n        y_values.append(f)\n    sns.lineplot(x = x_values, y = y_values, estimator = numpy.mean, ci = 95)\n    sns.scatterplot(x = x_values, y = y_values)\n    plt.ylim(0,1)\n    plt.xlabel(\"Factor\")\n    plt.ylabel(\"Fairness\")\n\ndef run_and_plot(conf, k, prefix):\n    r = run_experiment_batch(conf)\n    plt.figure()\n    figure_1(r[k], \"Access probability\")\n    plt.savefig(prefix + \"-fig-1.png\")\n    plt.show()\n    \n    plt.figure()\n    figure_2(r, \"Access\")\n    plt.savefig(prefix + \"-fig-2.png\")\n    plt.show()\n\n    plt.figure()\n    figure_3(r)\n    plt.savefig(prefix + \"-fig-3.png\")\n    plt.show()\n```\n\n# Experiment 1: Overseeding\n \n```{python}\ndef configure_experiment_1(factors, graphs):\n    result = {}\n    params = dict(\n        n1 = 1000,\n        n2 = 1000)\n    for f in factors:\n        for g in graphs:\n            # n = read_graph(g)\n            params[\"seed1\"] = f * 0.1\n            params[\"seed2\"] = 0.1 \n            params[\"graph\"] = g\n            params[\"seeds\"] = set_seeds(params)\n            params[\"factor\"] = f\n            params[\"graph_name\"] = g\n            params[\"alpha\"] = 0.1\n            params[\"reprs\"] = n_reps\n            params[\"communities\"] = [list(range(0, 1000)), list(range(1000, 2000))]\n            result[(f, g)] = copy.copy(params)\n    return result\n```\n\n## SBM, Isolated Communities\n\n```{python}\nk = (5, graphs[0][\"files\"][0])\nrun_and_plot(configure_experiment_1(\n    list(range(1,10)),\n    graphs[0][\"files\"]), k, \"figures/exp-1-sbm-isolated\")\n```\n\n## SBM, Connected Communities\n\n```{python}\nk = (5, graphs[1][\"files\"][0])\nrun_and_plot(configure_experiment_1(\n    list(range(1,10)),\n    graphs[1][\"files\"]), k, \"figures/exp-1-sbm-connected\")\n```\n\n## LFR, Isolated Communities\n\n```{python}\nk = (5, graphs[2][\"files\"][0])\nrun_and_plot(configure_experiment_1(\n    list(range(1,10)),\n    graphs[2][\"files\"]), k, \"figures/exp-1-lfr-isolated\")\n```\n\n## LFR, Connected Communities\n\n```{python}\nk = (5, graphs[3][\"files\"][0])\nrun_and_plot(configure_experiment_1(\n    list(range(1,10)),\n    graphs[3][\"files\"]), k, \"figures/exp-1-lfr-connected\")\n```\n\n# Experiment 2: Deletions\n\n```{python}\nimport os\n\ndef delete_nodes_from_network(network, nodes_to_delete):\n    network = read_graph(network)\n    edge_list = graph_to_edge_list(network)\n    for n in nodes_to_delete:\n        network[n] = []\n    network = list(list(e for e in l if e not in nodes_to_delete)\n        for l in network)\n    n = temp_name(\".txt\")\n    write_graph(network, n)\n    return n\n\ndef configure_experiment_2(factors, graphs):\n    result = {}\n    params = dict(\n        n = 1000,\n        n1 = 1000,\n        n2 = 1000)\n    for f in factors:\n        for g in graphs:\n            # n = read_graph(g)\n            params[\"seed1\"] = 0.1\n            params[\"seed2\"] = 0.1\n            nodes_to_delete = set(set_seeds(dict(\n                n1 = 1000,\n                n2 = 1000,\n                seed1 = 0.1,\n                seed2 = 0.1 * f)))\n            params[\"nodes_to_delete\"] = nodes_to_delete\n            network = delete_nodes_from_network(g, nodes_to_delete)\n            params[\"graph\"] = network\n            params[\"seeds\"] = set_seeds(params)\n            params[\"factor\"] = f\n            params[\"graph_name\"] = g\n            params[\"alpha\"] = 0.1\n            params[\"reprs\"] = n_reps\n            params[\"communities\"] = [list(range(0, 1000)), list(range(1000, 2000))]\n            result[(f, g)] = copy.copy(params)\n    return result\n```\n\n## SBM, Isolated Communities\n\n```{python}\nk = (5, graphs[0][\"files\"][0])\nrun_and_plot(configure_experiment_2(\n    list(range(1,10)),\n    graphs[0][\"files\"]), k, \"figures/exp-2-sbm-isolated\")\n```\n\n## SBM, Connected Communities\n\n```{python}\nk = (5, graphs[1][\"files\"][0])\nrun_and_plot(configure_experiment_2(\n    list(range(1,10)),\n    graphs[1][\"files\"]), k, \"figures/exp-2-sbm-connected\")\n```\n\n## LFR, Isolated Communities\n\n```{python}\nk = (5, graphs[2][\"files\"][0])\nrun_and_plot(configure_experiment_2(\n    list(range(1,10)),\n    graphs[2][\"files\"]), k, \"figures/exp-2-lfr-isolated\")\n```\n\n## LFR, Connected Communities\n\n```{python}\nk = (5, graphs[3][\"files\"][0])\nrun_and_plot(configure_experiment_2(\n    list(range(1,10)),\n    graphs[3][\"files\"]), k, \"figures/exp-2-lfr-connected\")\n```\n\n# Experiment 3.1: Thresholds + Overseeding\n\n```{python}\ndef run_thresh_and_plot(conf, k, prefix):\n    r = run_thresh_experiment_batch(conf)\n    plt.figure()\n    figure_1(r[k], \"Activation probability\")\n    plt.savefig(prefix + \"-fig-1.png\")\n    plt.show()\n    \n    plt.figure()\n    figure_2(r, \"Activation\")\n    plt.savefig(prefix + \"-fig-2.png\")\n    plt.show()\n\n    plt.figure()\n    figure_3(r)\n    plt.savefig(prefix + \"-fig-3.png\")\n    plt.show()\n```\n\n## SBM, Isolated Communities\n\n```{python}\nk = (5, graphs[0][\"files\"][0])\nrun_thresh_and_plot(configure_experiment_1(\n    list(range(1,10)),\n    graphs[0][\"files\"]), k, \"figures/exp-3-1-sbm-isolated\")\n```\n\n## SBM, Connected Communities\n\n```{python}\nk = (5, graphs[1][\"files\"][0])\nrun_thresh_and_plot(configure_experiment_1(\n    list(range(1,10)),\n    graphs[1][\"files\"]), k, \"figures/exp-3-1-sbm-connected\")\n```\n\n## LFR, Isolated Communities\n\n```{python}\nk = (5, graphs[2][\"files\"][0])\nrun_thresh_and_plot(configure_experiment_1(\n    list(range(1,10)),\n    graphs[2][\"files\"]), k, \"figures/exp-3-1-lfr-isolated\")\n```\n\n## LFR, Connected Communities\n\n```{python}\nk = (5, graphs[3][\"files\"][0])\nrun_thresh_and_plot(configure_experiment_1(\n    list(range(1,10)),\n    graphs[3][\"files\"]), k, \"figures/exp-3-1-lfr-connected\")\n```\n\n# Experiment 3.2: Thresholds + Deletions\n\n## SBM, Isolated Communities\n\n```{python}\nk = (5, graphs[0][\"files\"][0])\nrun_thresh_and_plot(configure_experiment_2(\n    list(range(1,10)),\n    graphs[0][\"files\"]), k, \"figures/exp-3-2-sbm-isolated\")\n```\n\n## SBM, Connected Communities\n\n```{python}\nk = (5, graphs[1][\"files\"][0])\nrun_thresh_and_plot(configure_experiment_2(\n    list(range(1,10)),\n    graphs[1][\"files\"]), k, \"figures/exp-3-2-sbm-connected\")\n```\n\n## LFR, Isolated Communities\n\n```{python}\nk = (5, graphs[2][\"files\"][0])\nrun_thresh_and_plot(configure_experiment_2(\n    list(range(1,10)),\n    graphs[2][\"files\"]), k, \"figures/exp-3-2-lfr-isolated\")\n```\n\n## LFR, Connected Communities\n\n```{python}\nk = (5, graphs[3][\"files\"][0])\nrun_thresh_and_plot(configure_experiment_2(\n    list(range(1,10)),\n    graphs[3][\"files\"]), k, \"figures/exp-3-2-lfr-connected\")\n```"
  },
  {
    "objectID": "fig-5.html#section",
    "href": "fig-5.html#section",
    "title": "Essential Worker Community Degree Distribution",
    "section": "1",
    "text": "1\n\n\nCode\nparams = {}\ndegrees = numpy.array(list(len(n) for n in read_graph(files[0])))\nparams[\"thresholds\"] = numpy.random.random(len(degrees)) * degrees\nnodes_to_delete = set(set_seeds(dict(\n                n1 = 1000,\n                n2 = 1000,\n                seed1 = 0.1,\n                seed2 = 0.1)))\nparams[\"nodes_to_delete\"] = nodes_to_delete\nparams[\"graph\"] = delete_nodes_from_network(files[0], nodes_to_delete)\nparams[\"n1\"] = 1000\nparams[\"n2\"] = 1000\nparams[\"seed1\"] = 0.1\nparams[\"seed2\"] = 0.1\nparams[\"seeds\"] = set_seeds(params)\nparams[\"alpha\"] = 0.1\nparams[\"reprs\"] = 100\nparams[\"communities\"] = [list(range(0, 1000)), list(range(1000, 2000))]\nparams[\"ic_result\"] = run_experiment(params)\n\nplt.figure()\nfigure_1(params, \"probability of infection\")\nplt.show()\n\n\nCommunity means: 0.9018204804045512, 0.7398154981549815"
  },
  {
    "objectID": "fig-5.html#section-1",
    "href": "fig-5.html#section-1",
    "title": "Essential Worker Community Degree Distribution",
    "section": "2",
    "text": "2\n\n\nCode\nparams[\"ic_result\"] = run_thresh_experiment(params)\n\nplt.figure()\nfigure_1(params, \"collateral harm\")\nplt.show()\n\n\nCommunity means: 0.9996333754740835, 0.9850676506765066"
  },
  {
    "objectID": "fig-5.html#section-2",
    "href": "fig-5.html#section-2",
    "title": "Essential Worker Community Degree Distribution",
    "section": "4",
    "text": "4\n\n\nCode\nparams[\"ic_result\"] = run_thresh_experiment(params)\n\nplt.figure()\nfigure_1(params, \"collateral harm\")\nplt.show()\n\n\nCommunity means: 0.6887669543773118, 0.4732125"
  },
  {
    "objectID": "fig-5.html#section-3",
    "href": "fig-5.html#section-3",
    "title": "Essential Worker Community Degree Distribution",
    "section": "1",
    "text": "1\n\n\nCode\nmany_comms = community_graph(\n    0.0001/2,\n    int(1000 * 0.4), (0.015 / 2) / 0.4,\n    int(1000 * 0.4), (0.01 / 2) / 0.4,\n    int(1000 * 0.4), (0.01 / 2) / 0.4,\n    int(1000 * 0.4), (0.01 / 2) / 0.4,\n    int(1000 * 0.4), (0.01 / 2) / 0.4)\n\nnodes_to_delete = set(set_seeds(dict(\n                n1 = 400,\n                n2 = 1600,\n                seed1 = 0.1,\n                seed2 = 0.1)))\nparams[\"nodes_to_delete\"] = nodes_to_delete\nparams[\"graph\"] = delete_nodes_from_network(many_comms, nodes_to_delete)\nparams[\"n1\"] = 400\nparams[\"n2\"] = 1600\nparams[\"seed1\"] = 0.1\nparams[\"seed2\"] = 0.1\nparams[\"seeds\"] = set_seeds(params)\nparams[\"alpha\"] = 0.1\nparams[\"reprs\"] = 100\nparams[\"communities\"] = [list(range(0, 400)), list(range(400, 2000))]\nparams[\"ic_result\"] = run_experiment(params)\n\nplt.figure()\nfigure_1(params, \"probability of infection\")\nplt.show()\n\n\nCommunity means: 0.9032601880877743, 0.7335747303543915"
  },
  {
    "objectID": "fig-5.html#a-sbm-based",
    "href": "fig-5.html#a-sbm-based",
    "title": "Essential Worker Community Degree Distribution",
    "section": "3a, SBM-based",
    "text": "3a, SBM-based\n\n\nCode\nparams = {}\nparams[\"thresholds\"] = numpy.random.random(len(degrees)) * degrees\nnodes_to_delete = set(set_seeds(dict(\n                n1 = 1000,\n                n2 = 1000,\n                seed1 = 0.12,\n                seed2 = 0.08)))\nparams[\"nodes_to_delete\"] = nodes_to_delete\nparams[\"graph\"] = files[0]\nparams[\"n1\"] = 1000\nparams[\"n2\"] = 1000\nparams[\"seed1\"] = 0.1\nparams[\"seed2\"] = 0.1\nparams[\"seeds\"] = set_seeds(params)\nparams[\"alpha\"] = 0.1\nparams[\"reprs\"] = 100\nparams[\"communities\"] = [list(range(0, 1000)), list(range(1000, 2000))]\nparams[\"ic_result\"] = run_experiment(params)\n\nplt.figure()\nfigure_1(params, \"probability of infection\")\nplt.show()\n\n\nCommunity means: 0.6300253485424587, 0.3630060606060606"
  },
  {
    "objectID": "fig-5.html#b-degree-based",
    "href": "fig-5.html#b-degree-based",
    "title": "Essential Worker Community Degree Distribution",
    "section": "3b, degree-based",
    "text": "3b, degree-based\n\n\nCode\nprobs = numpy.array(degrees)\nprobs = (probs / probs.sum()) * 200.0\nnodes_to_delete = set(i for (i, v) in enumerate(list(probs)) if random.random() < v)\nparams[\"nodes_to_delete\"] = nodes_to_delete\nparams[\"ic_result\"] = run_experiment(params)\n\nplt.figure()\nfigure_1(params, \"probability of infection\")\nplt.show()\n\n\nCommunity means: 0.6273007712082261, 0.35985330073349636"
  },
  {
    "objectID": "fig-5.html#c-probability-based",
    "href": "fig-5.html#c-probability-based",
    "title": "Essential Worker Community Degree Distribution",
    "section": "3c, probability-based",
    "text": "3c, probability-based\n\n\nCode\nprobs = numpy.array(degrees)\nprobs = 1 - numpy.power(1 - params[\"alpha\"], degrees)\nprobs = (probs / probs.sum()) * 200.0\nnodes_to_delete = set(i for (i, v) in enumerate(list(probs)) if random.random() < v)\nparams[\"nodes_to_delete\"] = nodes_to_delete\nparams[\"ic_result\"] = run_experiment(params)\n\nplt.figure()\nfigure_1(params, \"probability of infection\")\nplt.show()\n\n\nCommunity means: 0.627829839704069, 0.359"
  },
  {
    "objectID": "fig-5.html#multiple-non-essential-communities",
    "href": "fig-5.html#multiple-non-essential-communities",
    "title": "Essential Worker Community Degree Distribution",
    "section": "multiple non-essential communities",
    "text": "multiple non-essential communities\n\n\nCode\n# With this, we attempt to keep average degrees consistent across the\n# experiments\nmany_comms = community_graph(\n    0.0001/2,\n    int(1000 * 0.4), (0.015 / 2) / 0.4,\n    int(1000 * 0.4), (0.01 / 2) / 0.4,\n    int(1000 * 0.4), (0.01 / 2) / 0.4,\n    int(1000 * 0.4), (0.01 / 2) / 0.4,\n    int(1000 * 0.4), (0.01 / 2) / 0.4)\n\nnodes_to_delete = set(set_seeds(dict(\n                n1 = 400,\n                n2 = 1600,\n                seed1 = 0.1,\n                seed2 = 0.1)))\nparams[\"nodes_to_delete\"] = nodes_to_delete\nparams[\"graph\"] = delete_nodes_from_network(many_comms, nodes_to_delete)\nparams[\"n1\"] = 400\nparams[\"n2\"] = 1600\nparams[\"seed1\"] = 0.1\nparams[\"seed2\"] = 0.1\nparams[\"seeds\"] = set_seeds(params)\nparams[\"alpha\"] = 0.1\nparams[\"reprs\"] = 100\nparams[\"communities\"] = [list(range(0, 400)), list(range(400, 2000))]\nparams[\"ic_result\"] = run_experiment(params)\n\nplt.figure()\nfigure_1(params, \"probability of infection\")\nplt.show()\n\n\nCommunity means: 0.8999674267100976, 0.7415045592705167\n\n\n\n\n\n\n\n\nSource Code\n---\ntitle: \"Essential Worker Community Degree Distribution\"\n---\n\n```{python}\nimport glob\nfrom exps import *\nimport numpy\nimport matplotlib.pyplot as plt\n\ndef degrees(network):\n    essential = list(len(l) for l in network[:1000])\n    rest = list(len(l) for l in network[1000:])\n    return [essential, rest]\n\nessential = []\nrest = []\nfiles = glob.glob(f'../data/graphs/experiment_essential_workers_2_sbm/run_1/twocommunities_edgelist.txt')\nfor f in files:\n    n = read_graph(f)\n    [this_essential, this_rest] = degrees(n)\n    essential.extend(this_essential)\n    rest.extend(this_rest)\nplt.figure()\nhist(essential, label=\"Essential worker community\")\nhist(rest, label=\"Rest\")\nplt.legend()\nplt.xlabel(\"Node degree\")\nplt.ylabel(\"Frequency\")\nplt.show()\n\ndef figure_1(params, xlabel):\n    c1, c2 = split_result_by_communities(params[\"ic_result\"], params)\n    print(\"Community means: %s, %s\" % (numpy.mean(c1), numpy.mean(c2)))\n    hist(c1)\n    hist(c2)\n    plt.xlabel(xlabel)\n    plt.ylabel(\"Frequency\")\n\ndef delete_nodes_from_network(network, nodes_to_delete):\n    network = read_graph(network)\n    edge_list = graph_to_edge_list(network)\n    for n in nodes_to_delete:\n        network[n] = []\n    network = list(list(e for e in l if e not in nodes_to_delete)\n        for l in network)\n    n = temp_name(\".txt\")\n    write_graph(network, n)\n    return n\n\n```\n\n## 1\n\n```{python}\nparams = {}\ndegrees = numpy.array(list(len(n) for n in read_graph(files[0])))\nparams[\"thresholds\"] = numpy.random.random(len(degrees)) * degrees\nnodes_to_delete = set(set_seeds(dict(\n                n1 = 1000,\n                n2 = 1000,\n                seed1 = 0.1,\n                seed2 = 0.1)))\nparams[\"nodes_to_delete\"] = nodes_to_delete\nparams[\"graph\"] = delete_nodes_from_network(files[0], nodes_to_delete)\nparams[\"n1\"] = 1000\nparams[\"n2\"] = 1000\nparams[\"seed1\"] = 0.1\nparams[\"seed2\"] = 0.1\nparams[\"seeds\"] = set_seeds(params)\nparams[\"alpha\"] = 0.1\nparams[\"reprs\"] = 100\nparams[\"communities\"] = [list(range(0, 1000)), list(range(1000, 2000))]\nparams[\"ic_result\"] = run_experiment(params)\n\nplt.figure()\nfigure_1(params, \"probability of infection\")\nplt.show()\n```\n\n## 2\n\n```{python}\nparams[\"ic_result\"] = run_thresh_experiment(params)\n\nplt.figure()\nfigure_1(params, \"collateral harm\")\nplt.show()\n```\n\n## 3a, SBM-based\n\n```{python}\nparams = {}\nparams[\"thresholds\"] = numpy.random.random(len(degrees)) * degrees\nnodes_to_delete = set(set_seeds(dict(\n                n1 = 1000,\n                n2 = 1000,\n                seed1 = 0.12,\n                seed2 = 0.08)))\nparams[\"nodes_to_delete\"] = nodes_to_delete\nparams[\"graph\"] = files[0]\nparams[\"n1\"] = 1000\nparams[\"n2\"] = 1000\nparams[\"seed1\"] = 0.1\nparams[\"seed2\"] = 0.1\nparams[\"seeds\"] = set_seeds(params)\nparams[\"alpha\"] = 0.1\nparams[\"reprs\"] = 100\nparams[\"communities\"] = [list(range(0, 1000)), list(range(1000, 2000))]\nparams[\"ic_result\"] = run_experiment(params)\n\nplt.figure()\nfigure_1(params, \"probability of infection\")\nplt.show()\n```\n\n## 3b, degree-based\n\n```{python}\nprobs = numpy.array(degrees)\nprobs = (probs / probs.sum()) * 200.0\nnodes_to_delete = set(i for (i, v) in enumerate(list(probs)) if random.random() < v)\nparams[\"nodes_to_delete\"] = nodes_to_delete\nparams[\"ic_result\"] = run_experiment(params)\n\nplt.figure()\nfigure_1(params, \"probability of infection\")\nplt.show()\n```\n\n## 3c, probability-based\n\n```{python}\nprobs = numpy.array(degrees)\nprobs = 1 - numpy.power(1 - params[\"alpha\"], degrees)\nprobs = (probs / probs.sum()) * 200.0\nnodes_to_delete = set(i for (i, v) in enumerate(list(probs)) if random.random() < v)\nparams[\"nodes_to_delete\"] = nodes_to_delete\nparams[\"ic_result\"] = run_experiment(params)\n\nplt.figure()\nfigure_1(params, \"probability of infection\")\nplt.show()\n```\n\n## 4\n\n```{python}\nparams[\"ic_result\"] = run_thresh_experiment(params)\n\nplt.figure()\nfigure_1(params, \"collateral harm\")\nplt.show()\n```\n\n## multiple non-essential communities\n\n```{python}\n# With this, we attempt to keep average degrees consistent across the\n# experiments\nmany_comms = community_graph(\n    0.0001/2,\n    int(1000 * 0.4), (0.015 / 2) / 0.4,\n    int(1000 * 0.4), (0.01 / 2) / 0.4,\n    int(1000 * 0.4), (0.01 / 2) / 0.4,\n    int(1000 * 0.4), (0.01 / 2) / 0.4,\n    int(1000 * 0.4), (0.01 / 2) / 0.4)\n\nnodes_to_delete = set(set_seeds(dict(\n                n1 = 400,\n                n2 = 1600,\n                seed1 = 0.1,\n                seed2 = 0.1)))\nparams[\"nodes_to_delete\"] = nodes_to_delete\nparams[\"graph\"] = delete_nodes_from_network(many_comms, nodes_to_delete)\nparams[\"n1\"] = 400\nparams[\"n2\"] = 1600\nparams[\"seed1\"] = 0.1\nparams[\"seed2\"] = 0.1\nparams[\"seeds\"] = set_seeds(params)\nparams[\"alpha\"] = 0.1\nparams[\"reprs\"] = 100\nparams[\"communities\"] = [list(range(0, 400)), list(range(400, 2000))]\nparams[\"ic_result\"] = run_experiment(params)\n\nplt.figure()\nfigure_1(params, \"probability of infection\")\nplt.show()\n\n```"
  },
  {
    "objectID": "fig-5.html#section-4",
    "href": "fig-5.html#section-4",
    "title": "Essential Worker Community Degree Distribution",
    "section": "2",
    "text": "2\n\n\nCode\nparams[\"ic_result\"] = run_thresh_experiment(params)\n\nplt.figure()\nfigure_1(params, \"collateral harm\")\nplt.show()\n\n\nCommunity means: 0.9883072100313479, 0.8968567026194144"
  },
  {
    "objectID": "fig-5.html#a-sbm-based-1",
    "href": "fig-5.html#a-sbm-based-1",
    "title": "Essential Worker Community Degree Distribution",
    "section": "3a, SBM-based",
    "text": "3a, SBM-based\nThis is not exactly comparable because since the overall sizes changed, there are now fewer essential workers, so to make vaccination rate difference match the degree difference, we need to change the parameters.\nWe arrive at \\(s_1\\), \\(s_2\\) by solving the system \\(s_1 = s_2 \\times 1.5\\), \\(400 s_1 + 1600 s_2 = 200\\).\n\n\nCode\nparams = {}\nparams[\"thresholds\"] = numpy.random.random(len(degrees)) * degrees\nnodes_to_delete = set(set_seeds(dict(\n                n1 = 400,\n                n2 = 1600,\n                seed1 = (200 / 2200) * 1.5,\n                seed2 = 200 / 2200)))\nparams[\"nodes_to_delete\"] = nodes_to_delete\nparams[\"graph\"] = files[0]\nparams[\"n1\"] = 1000\nparams[\"n2\"] = 1000\nparams[\"seed1\"] = 0.1\nparams[\"seed2\"] = 0.1\nparams[\"seeds\"] = set_seeds(params)\nparams[\"alpha\"] = 0.1\nparams[\"reprs\"] = 100\nparams[\"communities\"] = [list(range(0, 1000)), list(range(1000, 2000))]\nparams[\"ic_result\"] = run_experiment(params)\n\nplt.figure()\nfigure_1(params, \"probability of infection\")\nplt.show()\n\n\nCommunity means: 0.6283640836408364, 0.3560705596107056"
  },
  {
    "objectID": "fig-5.html#b-degree-based-1",
    "href": "fig-5.html#b-degree-based-1",
    "title": "Essential Worker Community Degree Distribution",
    "section": "3b, degree-based",
    "text": "3b, degree-based\n\n\nCode\nprobs = numpy.array(degrees)\nprobs = (probs / probs.sum()) * 200.0\nnodes_to_delete = set(i for (i, v) in enumerate(list(probs)) if random.random() < v)\nparams[\"nodes_to_delete\"] = nodes_to_delete\nparams[\"ic_result\"] = run_experiment(params)\n\nplt.figure()\nfigure_1(params, \"probability of infection\")\nplt.show()\n\n\nCommunity means: 0.6249122807017543, 0.35318734793187345"
  },
  {
    "objectID": "fig-5.html#c-probability-based-1",
    "href": "fig-5.html#c-probability-based-1",
    "title": "Essential Worker Community Degree Distribution",
    "section": "3c, probability-based",
    "text": "3c, probability-based\n\n\nCode\nprobs = numpy.array(degrees)\nprobs = 1 - numpy.power(1 - params[\"alpha\"], degrees)\nprobs = (probs / probs.sum()) * 200.0\nnodes_to_delete = set(i for (i, v) in enumerate(list(probs)) if random.random() < v)\nparams[\"nodes_to_delete\"] = nodes_to_delete\nparams[\"ic_result\"] = run_experiment(params)\n\nplt.figure()\nfigure_1(params, \"probability of infection\")\nplt.show()\n\n\nCommunity means: 0.629749687108886, 0.35255395683453233"
  },
  {
    "objectID": "fig-5.html#section-5",
    "href": "fig-5.html#section-5",
    "title": "Essential Worker Community Degree Distribution",
    "section": "4",
    "text": "4\n\n\nCode\nparams[\"ic_result\"] = run_thresh_experiment(params)\n\nplt.figure()\nfigure_1(params, \"collateral harm\")\nplt.show()\n\n\nCommunity means: 0.6823654568210263, 0.4424100719424461\n\n\n\n\n\n\n\n\nSource Code\n---\ntitle: \"Essential Worker Community Degree Distribution\"\n---\n\n```{python}\nimport glob\nfrom exps import *\nimport numpy\nimport matplotlib.pyplot as plt\n\ndef degrees(network):\n    essential = list(len(l) for l in network[:1000])\n    rest = list(len(l) for l in network[1000:])\n    return [essential, rest]\n\nessential = []\nrest = []\nfiles = glob.glob(f'../data/graphs/experiment_essential_workers_2_sbm/run_1/twocommunities_edgelist.txt')\nfor f in files:\n    n = read_graph(f)\n    [this_essential, this_rest] = degrees(n)\n    essential.extend(this_essential)\n    rest.extend(this_rest)\nplt.figure()\nhist(essential, label=\"Essential worker community\")\nhist(rest, label=\"Rest\")\nplt.legend()\nplt.xlabel(\"Node degree\")\nplt.ylabel(\"Frequency\")\nplt.show()\n\ndef figure_1(params, xlabel):\n    c1, c2 = split_result_by_communities(params[\"ic_result\"], params)\n    print(\"Community means: %s, %s\" % (numpy.mean(c1), numpy.mean(c2)))\n    hist(c1)\n    hist(c2)\n    plt.xlabel(xlabel)\n    plt.ylabel(\"Frequency\")\n\ndef delete_nodes_from_network(network, nodes_to_delete):\n    network = read_graph(network)\n    edge_list = graph_to_edge_list(network)\n    for n in nodes_to_delete:\n        network[n] = []\n    network = list(list(e for e in l if e not in nodes_to_delete)\n        for l in network)\n    n = temp_name(\".txt\")\n    write_graph(network, n)\n    return n\n\n```\n\n## 1\n\n```{python}\nparams = {}\ndegrees = numpy.array(list(len(n) for n in read_graph(files[0])))\nparams[\"thresholds\"] = numpy.random.random(len(degrees)) * degrees\nnodes_to_delete = set(set_seeds(dict(\n                n1 = 1000,\n                n2 = 1000,\n                seed1 = 0.1,\n                seed2 = 0.1)))\nparams[\"nodes_to_delete\"] = nodes_to_delete\nparams[\"graph\"] = delete_nodes_from_network(files[0], nodes_to_delete)\nparams[\"n1\"] = 1000\nparams[\"n2\"] = 1000\nparams[\"seed1\"] = 0.1\nparams[\"seed2\"] = 0.1\nparams[\"seeds\"] = set_seeds(params)\nparams[\"alpha\"] = 0.1\nparams[\"reprs\"] = 100\nparams[\"communities\"] = [list(range(0, 1000)), list(range(1000, 2000))]\nparams[\"ic_result\"] = run_experiment(params)\n\nplt.figure()\nfigure_1(params, \"probability of infection\")\nplt.show()\n```\n\n## 2\n\n```{python}\nparams[\"ic_result\"] = run_thresh_experiment(params)\n\nplt.figure()\nfigure_1(params, \"collateral harm\")\nplt.show()\n```\n\n## 3a, SBM-based\n\n```{python}\nparams = {}\nparams[\"thresholds\"] = numpy.random.random(len(degrees)) * degrees\nnodes_to_delete = set(set_seeds(dict(\n                n1 = 1000,\n                n2 = 1000,\n                seed1 = 0.12,\n                seed2 = 0.08)))\nparams[\"nodes_to_delete\"] = nodes_to_delete\nparams[\"graph\"] = files[0]\nparams[\"n1\"] = 1000\nparams[\"n2\"] = 1000\nparams[\"seed1\"] = 0.1\nparams[\"seed2\"] = 0.1\nparams[\"seeds\"] = set_seeds(params)\nparams[\"alpha\"] = 0.1\nparams[\"reprs\"] = 100\nparams[\"communities\"] = [list(range(0, 1000)), list(range(1000, 2000))]\nparams[\"ic_result\"] = run_experiment(params)\n\nplt.figure()\nfigure_1(params, \"probability of infection\")\nplt.show()\n```\n\n## 3b, degree-based\n\n```{python}\nprobs = numpy.array(degrees)\nprobs = (probs / probs.sum()) * 200.0\nnodes_to_delete = set(i for (i, v) in enumerate(list(probs)) if random.random() < v)\nparams[\"nodes_to_delete\"] = nodes_to_delete\nparams[\"ic_result\"] = run_experiment(params)\n\nplt.figure()\nfigure_1(params, \"probability of infection\")\nplt.show()\n```\n\n## 3c, probability-based\n\n```{python}\nprobs = numpy.array(degrees)\nprobs = 1 - numpy.power(1 - params[\"alpha\"], degrees)\nprobs = (probs / probs.sum()) * 200.0\nnodes_to_delete = set(i for (i, v) in enumerate(list(probs)) if random.random() < v)\nparams[\"nodes_to_delete\"] = nodes_to_delete\nparams[\"ic_result\"] = run_experiment(params)\n\nplt.figure()\nfigure_1(params, \"probability of infection\")\nplt.show()\n```\n\n## 4\n\n```{python}\nparams[\"ic_result\"] = run_thresh_experiment(params)\n\nplt.figure()\nfigure_1(params, \"collateral harm\")\nplt.show()\n```\n\n# multiple non-essential communities\n\nWith this, we attempt to keep average degrees consistent across the\nexperiments, but now there are _four_ non-essential worker\ncommunities, and one essential worker community. The community sizes\nare 400 each.\n\n## 1\n\n```{python}\nmany_comms = community_graph(\n    0.0001/2,\n    int(1000 * 0.4), (0.015 / 2) / 0.4,\n    int(1000 * 0.4), (0.01 / 2) / 0.4,\n    int(1000 * 0.4), (0.01 / 2) / 0.4,\n    int(1000 * 0.4), (0.01 / 2) / 0.4,\n    int(1000 * 0.4), (0.01 / 2) / 0.4)\n\nnodes_to_delete = set(set_seeds(dict(\n                n1 = 400,\n                n2 = 1600,\n                seed1 = 0.1,\n                seed2 = 0.1)))\nparams[\"nodes_to_delete\"] = nodes_to_delete\nparams[\"graph\"] = delete_nodes_from_network(many_comms, nodes_to_delete)\nparams[\"n1\"] = 400\nparams[\"n2\"] = 1600\nparams[\"seed1\"] = 0.1\nparams[\"seed2\"] = 0.1\nparams[\"seeds\"] = set_seeds(params)\nparams[\"alpha\"] = 0.1\nparams[\"reprs\"] = 100\nparams[\"communities\"] = [list(range(0, 400)), list(range(400, 2000))]\nparams[\"ic_result\"] = run_experiment(params)\n\nplt.figure()\nfigure_1(params, \"probability of infection\")\nplt.show()\n```\n\n## 2\n\n```{python}\nparams[\"ic_result\"] = run_thresh_experiment(params)\n\nplt.figure()\nfigure_1(params, \"collateral harm\")\nplt.show()\n```\n\n## 3a, SBM-based\n\nThis is not exactly comparable because since the overall sizes changed, there are\nnow fewer essential workers, so to make vaccination rate difference match the\ndegree difference, we need to change the parameters.\n\nWe arrive at $s_1$, $s_2$ by solving the system $s_1 = s_2 \\times 1.5$, $400 s_1 + 1600 s_2 = 200$.\n\n```{python}\nparams = {}\nparams[\"thresholds\"] = numpy.random.random(len(degrees)) * degrees\nnodes_to_delete = set(set_seeds(dict(\n                n1 = 400,\n                n2 = 1600,\n                seed1 = (200 / 2200) * 1.5,\n                seed2 = 200 / 2200)))\nparams[\"nodes_to_delete\"] = nodes_to_delete\nparams[\"graph\"] = files[0]\nparams[\"n1\"] = 1000\nparams[\"n2\"] = 1000\nparams[\"seed1\"] = 0.1\nparams[\"seed2\"] = 0.1\nparams[\"seeds\"] = set_seeds(params)\nparams[\"alpha\"] = 0.1\nparams[\"reprs\"] = 100\nparams[\"communities\"] = [list(range(0, 1000)), list(range(1000, 2000))]\nparams[\"ic_result\"] = run_experiment(params)\n\nplt.figure()\nfigure_1(params, \"probability of infection\")\nplt.show()\n```\n\n## 3b, degree-based\n\n```{python}\nprobs = numpy.array(degrees)\nprobs = (probs / probs.sum()) * 200.0\nnodes_to_delete = set(i for (i, v) in enumerate(list(probs)) if random.random() < v)\nparams[\"nodes_to_delete\"] = nodes_to_delete\nparams[\"ic_result\"] = run_experiment(params)\n\nplt.figure()\nfigure_1(params, \"probability of infection\")\nplt.show()\n```\n\n## 3c, probability-based\n\n```{python}\nprobs = numpy.array(degrees)\nprobs = 1 - numpy.power(1 - params[\"alpha\"], degrees)\nprobs = (probs / probs.sum()) * 200.0\nnodes_to_delete = set(i for (i, v) in enumerate(list(probs)) if random.random() < v)\nparams[\"nodes_to_delete\"] = nodes_to_delete\nparams[\"ic_result\"] = run_experiment(params)\n\nplt.figure()\nfigure_1(params, \"probability of infection\")\nplt.show()\n```\n\n## 4\n\n```{python}\nparams[\"ic_result\"] = run_thresh_experiment(params)\n\nplt.figure()\nfigure_1(params, \"collateral harm\")\nplt.show()\n```"
  }
]