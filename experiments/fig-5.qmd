---
title: "Essential Worker Community"
---

```{python}
import glob
from exps import *
import numpy
import matplotlib.pyplot as plt

def get_community_degrees(network, params):
    essential = list(len(l) for l in network[:params["n1"]])
    rest = list(len(l) for l in network[params["n1"] : params["n1"] + params["n2"]])
    return [essential, rest]

def plot_community_degrees(dists, labels, filename=None, **kwargs):
    plt.figure()
    for (dist, label) in zip(dists, labels):
        hist(dist, label=label, **kwargs)
    plt.legend()
    plt.xlabel("Node degree")
    plt.ylabel("Frequency")
    if filename is not None:
        plt.savefig(filename)
    plt.show()

def figure_1(params, xlabel):
    c1, c2 = split_result_by_communities(params["ic_result"], params)
    print("Community means: %s, %s" % (numpy.mean(c1), numpy.mean(c2)))
    hist(c1)
    hist(c2)
    plt.xlabel(xlabel)
    plt.ylabel("Frequency")

def delete_nodes_from_network(network, nodes_to_delete):
    network = read_graph(network)
    edge_list = graph_to_edge_list(network)
    # delete out-edges
    for n in nodes_to_delete:
        network[n] = []
    # delete in-edges
    network = list(list(e for e in l if e not in nodes_to_delete)
        for l in network)
    n = temp_name(".txt")
    write_graph(network, n)
    return n

experiment_type = "sterilizing"

def set_graph(params, network):
    if experiment_type == "protective":
        params["graph"] = network
    elif experiment_type == "sterilizing":
        params["graph"] = delete_nodes_from_network(network, params["nodes_to_delete"])
    else:
        raise Exception("Don't know how to run experiment %s" % experiment_type)
```

# 2-community model

## Data

```{python}
essential = []
rest = []
files = glob.glob(f'../data/graphs/experiment_essential_workers_2_sbm/run_1/twocommunities_edgelist.txt')
# files = [ community_graph(0.0001/2, 1000, 0.015 / 2, 1000, 0.01 / 2) ]
```

## Degree distribution

```{python}
for f in files:
    n = read_graph(f)
    [this_essential, this_rest] = get_community_degrees(n, {"n1": 1000, "n2": 1000})
    essential.extend(this_essential)
    rest.extend(this_rest)
plot_community_degrees(
    [essential, rest],
    ["Essential worker community", "Rest"], 
    filename="figures/essential-worker-sbm-degree-distribution.png",
    range=(0, 27))
```

## 1

```{python}
params = {}
degrees = numpy.array(list(len(n) for n in read_graph(files[0])))
params["thresholds"] = numpy.random.random(len(degrees)) * degrees
nodes_to_delete = set(set_seeds(dict(
                n1 = 1000,
                n2 = 1000,
                seed1 = 0.1,
                seed2 = 0.1)))
params["nodes_to_delete"] = nodes_to_delete
set_graph(params, files[0])
params["n1"] = 1000
params["n2"] = 1000
params["seed1"] = 0.1
params["seed2"] = 0.1
params["seeds"] = set_seeds(params)
params["alpha"] = 0.1
params["reprs"] = 100
params["communities"] = [list(range(0, 1000)), list(range(1000, 2000))]
params["ic_result"] = run_experiment(params)

plt.figure()
figure_1(params, "probability of infection")
plt.show()
```

## 2

```{python}
params["ic_result"] = run_thresh_experiment(params)

plt.figure()
figure_1(params, "collateral harm")
plt.show()
```

## 3a, SBM-based

```{python}
params = {}
params["thresholds"] = numpy.random.random(len(degrees)) * degrees
nodes_to_delete = set(set_seeds(dict(
                n1 = 1000,
                n2 = 1000,
                seed1 = 0.12,
                seed2 = 0.08)))
params["nodes_to_delete"] = nodes_to_delete
set_graph(params, files[0])
params["n1"] = 1000
params["n2"] = 1000
params["seed1"] = 0.1
params["seed2"] = 0.1
params["seeds"] = set_seeds(params)
params["alpha"] = 0.1
params["reprs"] = 100
params["communities"] = [list(range(0, 1000)), list(range(1000, 2000))]
params["ic_result"] = run_experiment(params)

plt.figure()
figure_1(params, "probability of infection")
plt.show()
```

## 3b, degree-based

```{python}
probs = numpy.array(degrees)
probs = (probs / probs.sum()) * 200.0
nodes_to_delete = set(i for (i, v) in enumerate(list(probs)) if random.random() < v)
params["nodes_to_delete"] = nodes_to_delete
set_graph(params, files[0])
params["ic_result"] = run_experiment(params)

plt.figure()
figure_1(params, "probability of infection")
plt.show()
```

## 3c, probability-based

```{python}
probs = numpy.array(degrees)
probs = 1 - numpy.power(1 - params["alpha"], degrees)
probs = (probs / probs.sum()) * 200.0
nodes_to_delete = set(i for (i, v) in enumerate(list(probs)) if random.random() < v)
params["nodes_to_delete"] = nodes_to_delete
set_graph(params, files[0])
params["ic_result"] = run_experiment(params)

plt.figure()
figure_1(params, "probability of infection")
plt.show()
```

## 4

```{python}
params["ic_result"] = run_thresh_experiment(params)

plt.figure()
figure_1(params, "collateral harm")
plt.show()
```

# 5-community model

With this, we attempt to keep average degrees consistent across the
experiments, but now there are _four_ non-essential worker
communities, and one essential worker community. The community sizes
are 400 each.

## Data

```{python}
n_communities = 5
def get_n1():
    return int(2000 / n_communities)
n1 = get_n1()
n2 = 2000 - n1
params = {}
params["thresholds"] = numpy.random.random(len(degrees)) * degrees
params["n1"] = n1
params["n2"] = n2

def make_many_community_graph():
    params = [0.0001/2, n1, (0.015 / 2) / (n1 / 1000)]
    for i in range(n_communities - 1):
        params.extend([n1, (0.01 / 2) / (n1 / 1000)])
    return community_graph(*params)

many_comms = make_many_community_graph()
```

## Degree distribution

```{python}
plot_community_degrees(
    get_community_degrees(read_graph(many_comms), params),
    ["Essential worker community", "Rest"], range=(0, 27))
```

## 1

```{python}
nodes_to_delete = set(set_seeds(dict(
                n1 = n1,
                n2 = n2,
                seed1 = 0.1,
                seed2 = 0.1)))
params["nodes_to_delete"] = nodes_to_delete
set_graph(params, many_comms)
params["seed1"] = 0.1
params["seed2"] = 0.1
params["seeds"] = set_seeds(params)
params["alpha"] = 0.1
params["reprs"] = 100
params["communities"] = [list(range(0, n1)), list(range(n1, 2000))]
params["ic_result"] = run_experiment(params)

plt.figure()
figure_1(params, "probability of infection")
plt.show()
```

## 2

```{python}
params["ic_result"] = run_thresh_experiment(params)

plt.figure()
figure_1(params, "collateral harm")
plt.show()
```

## 3a, SBM-based

This is not exactly comparable because since the overall sizes changed, there are
now fewer essential workers, so to make vaccination rate difference match the
degree difference, we need to change the parameters.

Given some amount of overseeding, community size, and total budget, we
can work out the seeding probabilities.

```{python}

def solve_seeding(n1, overseeding = 1.5):
    budget = 200
    size = 2000
    n2 = size - n1
    return budget / (size + (overseeding - 1) * n1)

def plot_overseeding(overseeding):
    params = {}
    params["thresholds"] = numpy.random.random(len(degrees)) * degrees
    nodes_to_delete = set(set_seeds(dict(
                n1 = n1,
                n2 = n2,
                seed1 = solve_seeding(n1, overseeding) * overseeding,
                seed2 = solve_seeding(n1, overseeding))))
    params["nodes_to_delete"] = nodes_to_delete
    set_graph(params, many_comms)
    params["n1"] = n1
    params["n2"] = n2
    params["seed1"] = 0.1
    params["seed2"] = 0.1
    params["seeds"] = set_seeds(params)
    params["alpha"] = 0.1
    params["reprs"] = 100
    params["communities"] = [list(range(0, n1)), list(range(n1, 2000))]
    params["ic_result"] = run_experiment(params)
    plt.figure()
    figure_1(params, "probability of infection, overseeding = %s" % overseeding)
    plt.show()
    params["ic_result"] = run_thresh_experiment(params)
    plt.figure()
    figure_1(params, "collateral harm, overseeding = %s" % overseeding)
    plt.show()

plot_overseeding(1)
plot_overseeding(10)
```

## 3b, degree-based

```{python}
probs = numpy.array(degrees)
probs = (probs / probs.sum()) * 200.0
nodes_to_delete = set(i for (i, v) in enumerate(list(probs)) if random.random() < v)
params["nodes_to_delete"] = nodes_to_delete
set_graph(params, many_comms)
params["ic_result"] = run_experiment(params)

plt.figure()
figure_1(params, "probability of infection")
plt.show()
```

## 3c, probability-based

```{python}
probs = numpy.array(degrees)
probs = 1 - numpy.power(1 - params["alpha"], degrees)
probs = (probs / probs.sum()) * 200.0
nodes_to_delete = set(i for (i, v) in enumerate(list(probs)) if random.random() < v)
params["nodes_to_delete"] = nodes_to_delete
set_graph(params, many_comms)
params["ic_result"] = run_experiment(params)

plt.figure()
figure_1(params, "probability of infection")
plt.show()
```

## 4

```{python}
params["ic_result"] = run_thresh_experiment(params)
    
plt.figure()
figure_1(params, "collateral harm")
plt.show()
```

# curves

```{python}
def run_overseeding_experiment(o, n1, n2, graph):
    params = {}
    params["thresholds"] = numpy.random.random(len(degrees)) * degrees
    nodes_to_delete = set(set_seeds(dict(
                n1 = n1,
                n2 = n2,
                seed1 = solve_seeding(n1, o) * o,
                seed2 = solve_seeding(n1, o))))
    params["nodes_to_delete"] = nodes_to_delete
    set_graph(params, many_comms)
    params["n1"] = n1
    params["n2"] = n2
    params["seed1"] = 0.1
    params["seed2"] = 0.1
    params["seeds"] = set_seeds(params)
    params["alpha"] = 0.1
    params["reprs"] = 1000
    params["communities"] = [list(range(0, n1)), list(range(n1, 2000))]
    params["ic_result"] = run_experiment(params)
    c1, c2 = split_result_by_communities(params["ic_result"], params)
    params["mean_1"] = numpy.mean(c1)
    params["mean_2"] = numpy.mean(c2)
    params["ic_result"] = run_thresh_experiment(params)
    c1, c2 = split_result_by_communities(params["ic_result"], params)
    params["collateral_mean_1"] = numpy.mean(c1)
    params["collateral_mean_2"] = numpy.mean(c2)
    return params

import numpy
x = numpy.arange(-3, 3.1, 0.5)
mean_1 = []
mean_2 = []
c_mean_1 = []
c_mean_2 = []
total = []
c_total = []
for i in x:
    r = run_overseeding_experiment(10 ** i, 400, 1600, many_comms)
    mean_1.append(r["mean_1"])
    mean_2.append(r["mean_2"])
    c_mean_1.append(r["collateral_mean_1"])
    c_mean_2.append(r["collateral_mean_2"])
    total.append(r["mean_1"] * n1 + r["mean_2"] * n2)
    c_total.append(r["collateral_mean_1"] * n1 + r["collateral_mean_2"] * n2)

plt.figure()
plt.plot(x, mean_1, label="essential")
plt.plot(x, mean_2, label="other")
plt.xlabel("overseeding")
plt.ylabel("mean infection per community")
plt.show()

plt.figure()
plt.plot(x, total, label="total")
plt.xlabel("overseeding")
plt.ylabel("total infection")
plt.show()

plt.figure()
plt.plot(x, c_mean_1, label="essential")
plt.plot(x, c_mean_2, label="other")
plt.xlabel("overseeding")
plt.ylabel("mean collateral harm per community")
plt.show()

plt.figure()
plt.plot(x, c_total, label="total")
plt.xlabel("overseeding")
plt.ylabel("total collateral harm")
plt.show()
```
