---
title: "Figure 4, etc"
---

Each result "row" is based off:

1. A set of graphs (realizations of a particular graph model)
2. A one-parameter family of experiments

# Preamble

```{python}
from exps import *
import copy

n_reps = 100 # set this to 10000 when generating final results!

def run_experiment_batch(conf):
    result = {}
    for (k, params) in conf.items():
        params = copy.copy(params)
        params["ic_result"] = run_experiment(params)
        result[k] = params
    return result

def run_thresh_experiment_batch(conf):
    result = {}
    for (k, params) in conf.items():
        params = copy.copy(params)
        degrees = numpy.array(list(len(n) for n in read_graph(params["graph"])))
        params["thresholds"] = numpy.random.random(len(degrees)) * degrees
        params["ic_result"] = run_thresh_experiment(params)
        result[k] = params
    return result

def figure_1(params, xlabel):
    c1, c2 = split_result_by_communities(params["ic_result"], params)
    hist(c1)
    hist(c2)
    plt.xlabel(xlabel)
    plt.ylabel("Frequency")

def figure_2(conf, ylabel):
    x_values_1 = []
    x_values_2 = []
    y_values_1 = []
    y_values_2 = []
    for (k, v) in conf.items():
        c1, c2 = split_result_by_communities(v["ic_result"], v)
        c1 = numpy.mean(c1)
        c2 = numpy.mean(c2)
        x_values_1.append(v["factor"])
        x_values_2.append(v["factor"])
        y_values_1.append(c1)
        y_values_2.append(c2)
    sns.lineplot(x = x_values_1, y = y_values_1, estimator = numpy.mean, ci = 95)
    sns.lineplot(x = x_values_2, y = y_values_2, estimator = numpy.mean, ci = 95)
    sns.scatterplot(x = x_values_1, y = y_values_1)
    sns.scatterplot(x = x_values_2, y = y_values_2)
    plt.xlabel("Factor")
    plt.ylabel(ylabel)

def figure_3(conf):
    x_values = []
    y_values = []
    for (k, v) in conf.items():
        c1, c2 = split_result_by_communities(v["ic_result"], v)
        c1 = numpy.mean(c1)
        c2 = numpy.mean(c2)
        f = min(c1, c2) / max(c1, c2)
        x_values.append(v["factor"])
        y_values.append(f)
    sns.lineplot(x = x_values, y = y_values, estimator = numpy.mean, ci = 95)
    sns.scatterplot(x = x_values, y = y_values)
    plt.ylim(0,1)
    plt.xlabel("Factor")
    plt.ylabel("Fairness")

def run_and_plot(conf, k, prefix):
    r = run_experiment_batch(conf)
    plt.figure()
    figure_1(r[k], "Access probability")
    plt.savefig(prefix + "-fig-1.png")
    plt.show()
    
    plt.figure()
    figure_2(r, "Access")
    plt.savefig(prefix + "-fig-2.png")
    plt.show()

    plt.figure()
    figure_3(r)
    plt.savefig(prefix + "-fig-3.png")
    plt.show()
```

# Experiment 1: Overseeding
 
```{python}
def configure_experiment_1(factors, graphs):
    result = {}
    params = dict(
        n1 = 1000,
        n2 = 1000)
    for f in factors:
        for g in graphs:
            # n = read_graph(g)
            params["seed1"] = f * 0.1
            params["seed2"] = 0.1 
            params["graph"] = g
            params["seeds"] = set_seeds(params)
            params["factor"] = f
            params["graph_name"] = g
            params["alpha"] = 0.1
            params["reprs"] = n_reps
            params["communities"] = [list(range(0, 1000)), list(range(1000, 2000))]
            result[(f, g)] = copy.copy(params)
    return result
```

## SBM, Isolated Communities

```{python}
k = (5, graphs[0]["files"][0])
run_and_plot(configure_experiment_1(
    list(range(1,10)),
    graphs[0]["files"]), k, "figures/exp-1-sbm-isolated")
```

## SBM, Connected Communities

```{python}
k = (5, graphs[1]["files"][0])
run_and_plot(configure_experiment_1(
    list(range(1,10)),
    graphs[1]["files"]), k, "figures/exp-1-sbm-connected")
```

## LFR, Isolated Communities

```{python}
k = (5, graphs[2]["files"][0])
run_and_plot(configure_experiment_1(
    list(range(1,10)),
    graphs[2]["files"]), k, "figures/exp-1-lfr-isolated")
```

## LFR, Connected Communities

```{python}
k = (5, graphs[3]["files"][0])
run_and_plot(configure_experiment_1(
    list(range(1,10)),
    graphs[3]["files"]), k, "figures/exp-1-lfr-connected")
```

# Experiment 2: Deletions

```{python}
import os

def delete_nodes_from_network(network, nodes_to_delete):
    network = read_graph(network)
    edge_list = graph_to_edge_list(network)
    for n in nodes_to_delete:
        network[n] = []
    network = list(list(e for e in l if e not in nodes_to_delete)
        for l in network)
    n = temp_name(".txt")
    write_graph(network, n)
    return n

def configure_experiment_2(factors, graphs):
    result = {}
    params = dict(
        n = 1000,
        n1 = 1000,
        n2 = 1000)
    for f in factors:
        for g in graphs:
            # n = read_graph(g)
            params["seed1"] = 0.1
            params["seed2"] = 0.1
            nodes_to_delete = set(set_seeds(dict(
                n1 = 1000,
                n2 = 1000,
                seed1 = 0.1,
                seed2 = 0.1 * f)))
            params["nodes_to_delete"] = nodes_to_delete
            network = delete_nodes_from_network(g, nodes_to_delete)
            params["graph"] = network
            params["seeds"] = set_seeds(params)
            params["factor"] = f
            params["graph_name"] = g
            params["alpha"] = 0.1
            params["reprs"] = n_reps
            params["communities"] = [list(range(0, 1000)), list(range(1000, 2000))]
            result[(f, g)] = copy.copy(params)
    return result
```

## SBM, Isolated Communities

```{python}
k = (5, graphs[0]["files"][0])
run_and_plot(configure_experiment_2(
    list(range(1,10)),
    graphs[0]["files"]), k, "figures/exp-2-sbm-isolated")
```

## SBM, Connected Communities

```{python}
k = (5, graphs[1]["files"][0])
run_and_plot(configure_experiment_2(
    list(range(1,10)),
    graphs[1]["files"]), k, "figures/exp-2-sbm-connected")
```

## LFR, Isolated Communities

```{python}
k = (5, graphs[2]["files"][0])
run_and_plot(configure_experiment_2(
    list(range(1,10)),
    graphs[2]["files"]), k, "figures/exp-2-lfr-isolated")
```

## LFR, Connected Communities

```{python}
k = (5, graphs[3]["files"][0])
run_and_plot(configure_experiment_2(
    list(range(1,10)),
    graphs[3]["files"]), k, "figures/exp-2-lfr-connected")
```

# Experiment 3.1: Thresholds + Overseeding

```{python}
def run_thresh_and_plot(conf, k, prefix):
    r = run_thresh_experiment_batch(conf)
    plt.figure()
    figure_1(r[k], "Activation probability")
    plt.savefig(prefix + "-fig-1.png")
    plt.show()
    
    plt.figure()
    figure_2(r, "Activation")
    plt.savefig(prefix + "-fig-2.png")
    plt.show()

    plt.figure()
    figure_3(r)
    plt.savefig(prefix + "-fig-3.png")
    plt.show()
```

## SBM, Isolated Communities

```{python}
k = (5, graphs[0]["files"][0])
run_thresh_and_plot(configure_experiment_1(
    list(range(1,10)),
    graphs[0]["files"]), k, "figures/exp-3-1-sbm-isolated")
```

## SBM, Connected Communities

```{python}
k = (5, graphs[1]["files"][0])
run_thresh_and_plot(configure_experiment_1(
    list(range(1,10)),
    graphs[1]["files"]), k, "figures/exp-3-1-sbm-connected")
```

## LFR, Isolated Communities

```{python}
k = (5, graphs[2]["files"][0])
run_thresh_and_plot(configure_experiment_1(
    list(range(1,10)),
    graphs[2]["files"]), k, "figures/exp-3-1-lfr-isolated")
```

## LFR, Connected Communities

```{python}
k = (5, graphs[3]["files"][0])
run_thresh_and_plot(configure_experiment_1(
    list(range(1,10)),
    graphs[3]["files"]), k, "figures/exp-3-1-lfr-connected")
```

# Experiment 3.2: Thresholds + Deletions

## SBM, Isolated Communities

```{python}
k = (5, graphs[0]["files"][0])
run_thresh_and_plot(configure_experiment_2(
    list(range(1,10)),
    graphs[0]["files"]), k, "figures/exp-3-2-sbm-isolated")
```

## SBM, Connected Communities

```{python}
k = (5, graphs[1]["files"][0])
run_thresh_and_plot(configure_experiment_2(
    list(range(1,10)),
    graphs[1]["files"]), k, "figures/exp-3-2-sbm-connected")
```

## LFR, Isolated Communities

```{python}
k = (5, graphs[2]["files"][0])
run_thresh_and_plot(configure_experiment_2(
    list(range(1,10)),
    graphs[2]["files"]), k, "figures/exp-3-2-lfr-isolated")
```

## LFR, Connected Communities

```{python}
k = (5, graphs[3]["files"][0])
run_thresh_and_plot(configure_experiment_2(
    list(range(1,10)),
    graphs[3]["files"]), k, "figures/exp-3-2-lfr-connected")
```

